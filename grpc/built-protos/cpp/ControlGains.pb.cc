// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ControlGains.proto

#include "ControlGains.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace CLIPPY {
namespace control {
        template <typename>
PROTOBUF_CONSTEXPR ControlGains::ControlGains(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.system_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.kp_)*/ nullptr,
      /*decltype(_impl_.ki_)*/ nullptr,
      /*decltype(_impl_.kd_)*/ nullptr,
      /*decltype(_impl_.kf_static_)*/ nullptr,
      /*decltype(_impl_.kf_linear_)*/ nullptr,
      /*decltype(_impl_.kf_linear_per_time_)*/ nullptr,
      /*decltype(_impl_.kf_constant_)*/ nullptr,
      /*decltype(_impl_.ku_)*/ nullptr,
      /*decltype(_impl_.tu_)*/ nullptr,
      /*decltype(_impl_.zncontrolrule_)*/ 0,
    } {}
struct ControlGainsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlGainsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlGainsDefaultTypeInternal() {}
  union {
    ControlGains _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlGainsDefaultTypeInternal _ControlGains_default_instance_;
}  // namespace control
}  // namespace CLIPPY
static ::_pb::Metadata file_level_metadata_ControlGains_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ControlGains_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ControlGains_2eproto = nullptr;
const ::uint32_t TableStruct_ControlGains_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.system_id_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.kp_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.ki_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.kd_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.kf_static_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.kf_linear_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.kf_linear_per_time_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.kf_constant_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.ku_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.tu_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.zncontrolrule_),
    ~0u,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 19, -1, sizeof(::CLIPPY::control::ControlGains)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::CLIPPY::control::_ControlGains_default_instance_._instance,
};
const char descriptor_table_protodef_ControlGains_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\022ControlGains.proto\022\016CLIPPY.control\032\036go"
    "ogle/protobuf/wrappers.proto\"\370\003\n\014Control"
    "Gains\022\021\n\tsystem_id\030\001 \001(\t\022(\n\002kP\030\002 \001(\0132\034.g"
    "oogle.protobuf.DoubleValue\022(\n\002kI\030\003 \001(\0132\034"
    ".google.protobuf.DoubleValue\022(\n\002kD\030\004 \001(\013"
    "2\034.google.protobuf.DoubleValue\022/\n\tkF_sta"
    "tic\030\005 \001(\0132\034.google.protobuf.DoubleValue\022"
    "/\n\tkF_linear\030\006 \001(\0132\034.google.protobuf.Dou"
    "bleValue\0228\n\022kF_linear_per_time\030\007 \001(\0132\034.g"
    "oogle.protobuf.DoubleValue\0221\n\013kF_constan"
    "t\030\010 \001(\0132\034.google.protobuf.DoubleValue\022(\n"
    "\002kU\030\t \001(\0132\034.google.protobuf.DoubleValue\022"
    "(\n\002tU\030\n \001(\0132\034.google.protobuf.DoubleValu"
    "e\0224\n\rznControlRule\030\013 \001(\0162\035.CLIPPY.contro"
    "l.ZNControlRule*l\n\rZNControlRule\022\t\n\005UNSE"
    "T\020\000\022\005\n\001P\020\001\022\006\n\002PI\020\002\022\006\n\002PD\020\003\022\007\n\003PID\020\004\022\n\n\006P"
    "ESSEN\020\005\022\022\n\016MILD_OVERSHOOT\020\006\022\020\n\014NO_OVERSH"
    "OOT\020\007b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ControlGains_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::absl::once_flag descriptor_table_ControlGains_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ControlGains_2eproto = {
    false,
    false,
    693,
    descriptor_table_protodef_ControlGains_2eproto,
    "ControlGains.proto",
    &descriptor_table_ControlGains_2eproto_once,
    descriptor_table_ControlGains_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_ControlGains_2eproto::offsets,
    file_level_metadata_ControlGains_2eproto,
    file_level_enum_descriptors_ControlGains_2eproto,
    file_level_service_descriptors_ControlGains_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ControlGains_2eproto_getter() {
  return &descriptor_table_ControlGains_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ControlGains_2eproto(&descriptor_table_ControlGains_2eproto);
namespace CLIPPY {
namespace control {
const ::google::protobuf::EnumDescriptor* ZNControlRule_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_ControlGains_2eproto);
  return file_level_enum_descriptors_ControlGains_2eproto[0];
}
bool ZNControlRule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class ControlGains::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlGains>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ControlGains, _impl_._has_bits_);
  static const ::google::protobuf::DoubleValue& kp(const ControlGains* msg);
  static void set_has_kp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::DoubleValue& ki(const ControlGains* msg);
  static void set_has_ki(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::DoubleValue& kd(const ControlGains* msg);
  static void set_has_kd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::protobuf::DoubleValue& kf_static(const ControlGains* msg);
  static void set_has_kf_static(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::protobuf::DoubleValue& kf_linear(const ControlGains* msg);
  static void set_has_kf_linear(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::google::protobuf::DoubleValue& kf_linear_per_time(const ControlGains* msg);
  static void set_has_kf_linear_per_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::google::protobuf::DoubleValue& kf_constant(const ControlGains* msg);
  static void set_has_kf_constant(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::google::protobuf::DoubleValue& ku(const ControlGains* msg);
  static void set_has_ku(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::google::protobuf::DoubleValue& tu(const ControlGains* msg);
  static void set_has_tu(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::google::protobuf::DoubleValue& ControlGains::_Internal::kp(const ControlGains* msg) {
  return *msg->_impl_.kp_;
}
const ::google::protobuf::DoubleValue& ControlGains::_Internal::ki(const ControlGains* msg) {
  return *msg->_impl_.ki_;
}
const ::google::protobuf::DoubleValue& ControlGains::_Internal::kd(const ControlGains* msg) {
  return *msg->_impl_.kd_;
}
const ::google::protobuf::DoubleValue& ControlGains::_Internal::kf_static(const ControlGains* msg) {
  return *msg->_impl_.kf_static_;
}
const ::google::protobuf::DoubleValue& ControlGains::_Internal::kf_linear(const ControlGains* msg) {
  return *msg->_impl_.kf_linear_;
}
const ::google::protobuf::DoubleValue& ControlGains::_Internal::kf_linear_per_time(const ControlGains* msg) {
  return *msg->_impl_.kf_linear_per_time_;
}
const ::google::protobuf::DoubleValue& ControlGains::_Internal::kf_constant(const ControlGains* msg) {
  return *msg->_impl_.kf_constant_;
}
const ::google::protobuf::DoubleValue& ControlGains::_Internal::ku(const ControlGains* msg) {
  return *msg->_impl_.ku_;
}
const ::google::protobuf::DoubleValue& ControlGains::_Internal::tu(const ControlGains* msg) {
  return *msg->_impl_.tu_;
}
void ControlGains::clear_kp() {
  if (_impl_.kp_ != nullptr) _impl_.kp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ControlGains::clear_ki() {
  if (_impl_.ki_ != nullptr) _impl_.ki_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ControlGains::clear_kd() {
  if (_impl_.kd_ != nullptr) _impl_.kd_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ControlGains::clear_kf_static() {
  if (_impl_.kf_static_ != nullptr) _impl_.kf_static_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ControlGains::clear_kf_linear() {
  if (_impl_.kf_linear_ != nullptr) _impl_.kf_linear_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ControlGains::clear_kf_linear_per_time() {
  if (_impl_.kf_linear_per_time_ != nullptr) _impl_.kf_linear_per_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ControlGains::clear_kf_constant() {
  if (_impl_.kf_constant_ != nullptr) _impl_.kf_constant_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ControlGains::clear_ku() {
  if (_impl_.ku_ != nullptr) _impl_.ku_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ControlGains::clear_tu() {
  if (_impl_.tu_ != nullptr) _impl_.tu_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
ControlGains::ControlGains(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CLIPPY.control.ControlGains)
}
ControlGains::ControlGains(const ControlGains& from) : ::google::protobuf::Message() {
  ControlGains* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.system_id_){},
      decltype(_impl_.kp_){nullptr},
      decltype(_impl_.ki_){nullptr},
      decltype(_impl_.kd_){nullptr},
      decltype(_impl_.kf_static_){nullptr},
      decltype(_impl_.kf_linear_){nullptr},
      decltype(_impl_.kf_linear_per_time_){nullptr},
      decltype(_impl_.kf_constant_){nullptr},
      decltype(_impl_.ku_){nullptr},
      decltype(_impl_.tu_){nullptr},
      decltype(_impl_.zncontrolrule_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.system_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.system_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_system_id().empty()) {
    _this->_impl_.system_id_.Set(from._internal_system_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.kp_ = new ::google::protobuf::DoubleValue(*from._impl_.kp_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.ki_ = new ::google::protobuf::DoubleValue(*from._impl_.ki_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.kd_ = new ::google::protobuf::DoubleValue(*from._impl_.kd_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.kf_static_ = new ::google::protobuf::DoubleValue(*from._impl_.kf_static_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.kf_linear_ = new ::google::protobuf::DoubleValue(*from._impl_.kf_linear_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.kf_linear_per_time_ = new ::google::protobuf::DoubleValue(*from._impl_.kf_linear_per_time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.kf_constant_ = new ::google::protobuf::DoubleValue(*from._impl_.kf_constant_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
    _this->_impl_.ku_ = new ::google::protobuf::DoubleValue(*from._impl_.ku_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000100u) != 0) {
    _this->_impl_.tu_ = new ::google::protobuf::DoubleValue(*from._impl_.tu_);
  }
  _this->_impl_.zncontrolrule_ = from._impl_.zncontrolrule_;

  // @@protoc_insertion_point(copy_constructor:CLIPPY.control.ControlGains)
}
inline void ControlGains::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.system_id_){},
      decltype(_impl_.kp_){nullptr},
      decltype(_impl_.ki_){nullptr},
      decltype(_impl_.kd_){nullptr},
      decltype(_impl_.kf_static_){nullptr},
      decltype(_impl_.kf_linear_){nullptr},
      decltype(_impl_.kf_linear_per_time_){nullptr},
      decltype(_impl_.kf_constant_){nullptr},
      decltype(_impl_.ku_){nullptr},
      decltype(_impl_.tu_){nullptr},
      decltype(_impl_.zncontrolrule_){0},
  };
  _impl_.system_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.system_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ControlGains::~ControlGains() {
  // @@protoc_insertion_point(destructor:CLIPPY.control.ControlGains)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ControlGains::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.system_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.kp_;
  if (this != internal_default_instance()) delete _impl_.ki_;
  if (this != internal_default_instance()) delete _impl_.kd_;
  if (this != internal_default_instance()) delete _impl_.kf_static_;
  if (this != internal_default_instance()) delete _impl_.kf_linear_;
  if (this != internal_default_instance()) delete _impl_.kf_linear_per_time_;
  if (this != internal_default_instance()) delete _impl_.kf_constant_;
  if (this != internal_default_instance()) delete _impl_.ku_;
  if (this != internal_default_instance()) delete _impl_.tu_;
}
void ControlGains::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ControlGains::Clear() {
// @@protoc_insertion_point(message_clear_start:CLIPPY.control.ControlGains)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.system_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.kp_ != nullptr);
      _impl_.kp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.ki_ != nullptr);
      _impl_.ki_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.kd_ != nullptr);
      _impl_.kd_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.kf_static_ != nullptr);
      _impl_.kf_static_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.kf_linear_ != nullptr);
      _impl_.kf_linear_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.kf_linear_per_time_ != nullptr);
      _impl_.kf_linear_per_time_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.kf_constant_ != nullptr);
      _impl_.kf_constant_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.ku_ != nullptr);
      _impl_.ku_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    ABSL_DCHECK(_impl_.tu_ != nullptr);
    _impl_.tu_->Clear();
  }
  _impl_.zncontrolrule_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ControlGains::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 9, 53, 2> ControlGains::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ControlGains, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    9,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ControlGains_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string system_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.system_id_)}},
    // .google.protobuf.DoubleValue kP = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kp_)}},
    // .google.protobuf.DoubleValue kI = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.ki_)}},
    // .google.protobuf.DoubleValue kD = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kd_)}},
    // .google.protobuf.DoubleValue kF_static = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 3, 3, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kf_static_)}},
    // .google.protobuf.DoubleValue kF_linear = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 4, 4, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kf_linear_)}},
    // .google.protobuf.DoubleValue kF_linear_per_time = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 5, 5, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kf_linear_per_time_)}},
    // .google.protobuf.DoubleValue kF_constant = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 6, 6, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kf_constant_)}},
    // .google.protobuf.DoubleValue kU = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 7, 7, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.ku_)}},
    // .google.protobuf.DoubleValue tU = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 8, 8, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.tu_)}},
    // .CLIPPY.control.ZNControlRule znControlRule = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ControlGains, _impl_.zncontrolrule_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.zncontrolrule_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string system_id = 1;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.system_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.DoubleValue kP = 2;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.DoubleValue kI = 3;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.ki_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.DoubleValue kD = 4;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kd_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.DoubleValue kF_static = 5;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kf_static_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.DoubleValue kF_linear = 6;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kf_linear_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.DoubleValue kF_linear_per_time = 7;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kf_linear_per_time_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.DoubleValue kF_constant = 8;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kf_constant_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.DoubleValue kU = 9;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.ku_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.DoubleValue tU = 10;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.tu_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .CLIPPY.control.ZNControlRule znControlRule = 11;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.zncontrolrule_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::DoubleValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::DoubleValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::DoubleValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::DoubleValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::DoubleValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::DoubleValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::DoubleValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::DoubleValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::DoubleValue>()},
  }}, {{
    "\33\11\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "CLIPPY.control.ControlGains"
    "system_id"
  }},
};

::uint8_t* ControlGains::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLIPPY.control.ControlGains)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string system_id = 1;
  if (!this->_internal_system_id().empty()) {
    const std::string& _s = this->_internal_system_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "CLIPPY.control.ControlGains.system_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.DoubleValue kP = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::kp(this),
        _Internal::kp(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue kI = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ki(this),
        _Internal::ki(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue kD = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::kd(this),
        _Internal::kd(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue kF_static = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::kf_static(this),
        _Internal::kf_static(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue kF_linear = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::kf_linear(this),
        _Internal::kf_linear(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue kF_linear_per_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::kf_linear_per_time(this),
        _Internal::kf_linear_per_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue kF_constant = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::kf_constant(this),
        _Internal::kf_constant(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue kU = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::ku(this),
        _Internal::ku(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue tU = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::tu(this),
        _Internal::tu(this).GetCachedSize(), target, stream);
  }

  // .CLIPPY.control.ZNControlRule znControlRule = 11;
  if (this->_internal_zncontrolrule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_zncontrolrule(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLIPPY.control.ControlGains)
  return target;
}

::size_t ControlGains::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLIPPY.control.ControlGains)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string system_id = 1;
  if (!this->_internal_system_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_system_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // .google.protobuf.DoubleValue kP = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kp_);
    }

    // .google.protobuf.DoubleValue kI = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.ki_);
    }

    // .google.protobuf.DoubleValue kD = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kd_);
    }

    // .google.protobuf.DoubleValue kF_static = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kf_static_);
    }

    // .google.protobuf.DoubleValue kF_linear = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kf_linear_);
    }

    // .google.protobuf.DoubleValue kF_linear_per_time = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kf_linear_per_time_);
    }

    // .google.protobuf.DoubleValue kF_constant = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.kf_constant_);
    }

    // .google.protobuf.DoubleValue kU = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.ku_);
    }

  }
  // .google.protobuf.DoubleValue tU = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.tu_);
  }

  // .CLIPPY.control.ZNControlRule znControlRule = 11;
  if (this->_internal_zncontrolrule() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_zncontrolrule());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ControlGains::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ControlGains::MergeImpl
};
const ::google::protobuf::Message::ClassData*ControlGains::GetClassData() const { return &_class_data_; }


void ControlGains::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ControlGains*>(&to_msg);
  auto& from = static_cast<const ControlGains&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLIPPY.control.ControlGains)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_system_id().empty()) {
    _this->_internal_set_system_id(from._internal_system_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_kp()->::google::protobuf::DoubleValue::MergeFrom(
          from._internal_kp());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ki()->::google::protobuf::DoubleValue::MergeFrom(
          from._internal_ki());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_kd()->::google::protobuf::DoubleValue::MergeFrom(
          from._internal_kd());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_kf_static()->::google::protobuf::DoubleValue::MergeFrom(
          from._internal_kf_static());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_kf_linear()->::google::protobuf::DoubleValue::MergeFrom(
          from._internal_kf_linear());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_kf_linear_per_time()->::google::protobuf::DoubleValue::MergeFrom(
          from._internal_kf_linear_per_time());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_kf_constant()->::google::protobuf::DoubleValue::MergeFrom(
          from._internal_kf_constant());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_ku()->::google::protobuf::DoubleValue::MergeFrom(
          from._internal_ku());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_mutable_tu()->::google::protobuf::DoubleValue::MergeFrom(
        from._internal_tu());
  }
  if (from._internal_zncontrolrule() != 0) {
    _this->_internal_set_zncontrolrule(from._internal_zncontrolrule());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ControlGains::CopyFrom(const ControlGains& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLIPPY.control.ControlGains)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ControlGains::IsInitialized() const {
  return true;
}

void ControlGains::InternalSwap(ControlGains* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.system_id_, lhs_arena,
                                       &other->_impl_.system_id_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.zncontrolrule_)
      + sizeof(ControlGains::_impl_.zncontrolrule_)
      - PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kp_)>(
          reinterpret_cast<char*>(&_impl_.kp_),
          reinterpret_cast<char*>(&other->_impl_.kp_));
}

::google::protobuf::Metadata ControlGains::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ControlGains_2eproto_getter, &descriptor_table_ControlGains_2eproto_once,
      file_level_metadata_ControlGains_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace CLIPPY
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
