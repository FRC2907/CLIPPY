// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ControlGains.proto

#include "ControlGains.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace CLIPPY {
namespace control {
        template <typename>
PROTOBUF_CONSTEXPR ControlGains::ControlGains(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.system_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.kp_)*/ 0,
      /*decltype(_impl_.ki_)*/ 0,
      /*decltype(_impl_.kd_)*/ 0,
      /*decltype(_impl_.kf_static_)*/ 0,
      /*decltype(_impl_.kf_linear_)*/ 0,
      /*decltype(_impl_.kf_square_)*/ 0,
      /*decltype(_impl_.kf_cosine_)*/ 0,
      /*decltype(_impl_.ku_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct ControlGainsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlGainsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlGainsDefaultTypeInternal() {}
  union {
    ControlGains _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlGainsDefaultTypeInternal _ControlGains_default_instance_;
}  // namespace control
}  // namespace CLIPPY
static ::_pb::Metadata file_level_metadata_ControlGains_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ControlGains_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ControlGains_2eproto = nullptr;
const ::uint32_t TableStruct_ControlGains_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.system_id_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.kp_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.ki_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.kd_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.kf_static_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.kf_linear_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.kf_square_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.kf_cosine_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlGains, _impl_.ku_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::CLIPPY::control::ControlGains)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::CLIPPY::control::_ControlGains_default_instance_._instance,
};
const char descriptor_table_protodef_ControlGains_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\022ControlGains.proto\022\016CLIPPY.control\"\235\001\n"
    "\014ControlGains\022\021\n\tsystem_id\030\001 \001(\t\022\n\n\002kP\030\002"
    " \001(\001\022\n\n\002kI\030\003 \001(\001\022\n\n\002kD\030\004 \001(\001\022\021\n\tkF_stati"
    "c\030\005 \001(\001\022\021\n\tkF_linear\030\006 \001(\001\022\021\n\tkF_square\030"
    "\007 \001(\001\022\021\n\tkF_cosine\030\010 \001(\001\022\n\n\002kU\030\t \001(\001b\006pr"
    "oto3"
};
static ::absl::once_flag descriptor_table_ControlGains_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ControlGains_2eproto = {
    false,
    false,
    204,
    descriptor_table_protodef_ControlGains_2eproto,
    "ControlGains.proto",
    &descriptor_table_ControlGains_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_ControlGains_2eproto::offsets,
    file_level_metadata_ControlGains_2eproto,
    file_level_enum_descriptors_ControlGains_2eproto,
    file_level_service_descriptors_ControlGains_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ControlGains_2eproto_getter() {
  return &descriptor_table_ControlGains_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ControlGains_2eproto(&descriptor_table_ControlGains_2eproto);
namespace CLIPPY {
namespace control {
// ===================================================================

class ControlGains::_Internal {
 public:
};

ControlGains::ControlGains(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CLIPPY.control.ControlGains)
}
ControlGains::ControlGains(const ControlGains& from) : ::google::protobuf::Message() {
  ControlGains* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.system_id_){},
      decltype(_impl_.kp_){},
      decltype(_impl_.ki_){},
      decltype(_impl_.kd_){},
      decltype(_impl_.kf_static_){},
      decltype(_impl_.kf_linear_){},
      decltype(_impl_.kf_square_){},
      decltype(_impl_.kf_cosine_){},
      decltype(_impl_.ku_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.system_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.system_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_system_id().empty()) {
    _this->_impl_.system_id_.Set(from._internal_system_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.kp_, &from._impl_.kp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ku_) -
    reinterpret_cast<char*>(&_impl_.kp_)) + sizeof(_impl_.ku_));

  // @@protoc_insertion_point(copy_constructor:CLIPPY.control.ControlGains)
}
inline void ControlGains::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.system_id_){},
      decltype(_impl_.kp_){0},
      decltype(_impl_.ki_){0},
      decltype(_impl_.kd_){0},
      decltype(_impl_.kf_static_){0},
      decltype(_impl_.kf_linear_){0},
      decltype(_impl_.kf_square_){0},
      decltype(_impl_.kf_cosine_){0},
      decltype(_impl_.ku_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.system_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.system_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
ControlGains::~ControlGains() {
  // @@protoc_insertion_point(destructor:CLIPPY.control.ControlGains)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ControlGains::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.system_id_.Destroy();
}
void ControlGains::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void ControlGains::Clear() {
// @@protoc_insertion_point(message_clear_start:CLIPPY.control.ControlGains)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.system_id_.ClearToEmpty();
  ::memset(&_impl_.kp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ku_) -
      reinterpret_cast<char*>(&_impl_.kp_)) + sizeof(_impl_.ku_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ControlGains::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 53, 2> ControlGains::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ControlGains_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string system_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.system_id_)}},
    // double kP = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kp_)}},
    // double kI = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.ki_)}},
    // double kD = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kd_)}},
    // double kF_static = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kf_static_)}},
    // double kF_linear = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kf_linear_)}},
    // double kF_square = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kf_square_)}},
    // double kF_cosine = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kf_cosine_)}},
    // double kU = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.ku_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string system_id = 1;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.system_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double kP = 2;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double kI = 3;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.ki_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double kD = 4;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kd_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double kF_static = 5;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kf_static_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double kF_linear = 6;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kf_linear_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double kF_square = 7;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kf_square_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double kF_cosine = 8;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kf_cosine_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double kU = 9;
    {PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.ku_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\33\11\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "CLIPPY.control.ControlGains"
    "system_id"
  }},
};

::uint8_t* ControlGains::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLIPPY.control.ControlGains)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string system_id = 1;
  if (!this->_internal_system_id().empty()) {
    const std::string& _s = this->_internal_system_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "CLIPPY.control.ControlGains.system_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // double kP = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kp = this->_internal_kp();
  ::uint64_t raw_kp;
  memcpy(&raw_kp, &tmp_kp, sizeof(tmp_kp));
  if (raw_kp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_kp(), target);
  }

  // double kI = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ki = this->_internal_ki();
  ::uint64_t raw_ki;
  memcpy(&raw_ki, &tmp_ki, sizeof(tmp_ki));
  if (raw_ki != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_ki(), target);
  }

  // double kD = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kd = this->_internal_kd();
  ::uint64_t raw_kd;
  memcpy(&raw_kd, &tmp_kd, sizeof(tmp_kd));
  if (raw_kd != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_kd(), target);
  }

  // double kF_static = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kf_static = this->_internal_kf_static();
  ::uint64_t raw_kf_static;
  memcpy(&raw_kf_static, &tmp_kf_static, sizeof(tmp_kf_static));
  if (raw_kf_static != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_kf_static(), target);
  }

  // double kF_linear = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kf_linear = this->_internal_kf_linear();
  ::uint64_t raw_kf_linear;
  memcpy(&raw_kf_linear, &tmp_kf_linear, sizeof(tmp_kf_linear));
  if (raw_kf_linear != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_kf_linear(), target);
  }

  // double kF_square = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kf_square = this->_internal_kf_square();
  ::uint64_t raw_kf_square;
  memcpy(&raw_kf_square, &tmp_kf_square, sizeof(tmp_kf_square));
  if (raw_kf_square != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_kf_square(), target);
  }

  // double kF_cosine = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kf_cosine = this->_internal_kf_cosine();
  ::uint64_t raw_kf_cosine;
  memcpy(&raw_kf_cosine, &tmp_kf_cosine, sizeof(tmp_kf_cosine));
  if (raw_kf_cosine != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_kf_cosine(), target);
  }

  // double kU = 9;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ku = this->_internal_ku();
  ::uint64_t raw_ku;
  memcpy(&raw_ku, &tmp_ku, sizeof(tmp_ku));
  if (raw_ku != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_ku(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLIPPY.control.ControlGains)
  return target;
}

::size_t ControlGains::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLIPPY.control.ControlGains)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string system_id = 1;
  if (!this->_internal_system_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_system_id());
  }

  // double kP = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kp = this->_internal_kp();
  ::uint64_t raw_kp;
  memcpy(&raw_kp, &tmp_kp, sizeof(tmp_kp));
  if (raw_kp != 0) {
    total_size += 9;
  }

  // double kI = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ki = this->_internal_ki();
  ::uint64_t raw_ki;
  memcpy(&raw_ki, &tmp_ki, sizeof(tmp_ki));
  if (raw_ki != 0) {
    total_size += 9;
  }

  // double kD = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kd = this->_internal_kd();
  ::uint64_t raw_kd;
  memcpy(&raw_kd, &tmp_kd, sizeof(tmp_kd));
  if (raw_kd != 0) {
    total_size += 9;
  }

  // double kF_static = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kf_static = this->_internal_kf_static();
  ::uint64_t raw_kf_static;
  memcpy(&raw_kf_static, &tmp_kf_static, sizeof(tmp_kf_static));
  if (raw_kf_static != 0) {
    total_size += 9;
  }

  // double kF_linear = 6;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kf_linear = this->_internal_kf_linear();
  ::uint64_t raw_kf_linear;
  memcpy(&raw_kf_linear, &tmp_kf_linear, sizeof(tmp_kf_linear));
  if (raw_kf_linear != 0) {
    total_size += 9;
  }

  // double kF_square = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kf_square = this->_internal_kf_square();
  ::uint64_t raw_kf_square;
  memcpy(&raw_kf_square, &tmp_kf_square, sizeof(tmp_kf_square));
  if (raw_kf_square != 0) {
    total_size += 9;
  }

  // double kF_cosine = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kf_cosine = this->_internal_kf_cosine();
  ::uint64_t raw_kf_cosine;
  memcpy(&raw_kf_cosine, &tmp_kf_cosine, sizeof(tmp_kf_cosine));
  if (raw_kf_cosine != 0) {
    total_size += 9;
  }

  // double kU = 9;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ku = this->_internal_ku();
  ::uint64_t raw_ku;
  memcpy(&raw_ku, &tmp_ku, sizeof(tmp_ku));
  if (raw_ku != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ControlGains::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ControlGains::MergeImpl
};
const ::google::protobuf::Message::ClassData*ControlGains::GetClassData() const { return &_class_data_; }


void ControlGains::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ControlGains*>(&to_msg);
  auto& from = static_cast<const ControlGains&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLIPPY.control.ControlGains)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_system_id().empty()) {
    _this->_internal_set_system_id(from._internal_system_id());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kp = from._internal_kp();
  ::uint64_t raw_kp;
  memcpy(&raw_kp, &tmp_kp, sizeof(tmp_kp));
  if (raw_kp != 0) {
    _this->_internal_set_kp(from._internal_kp());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ki = from._internal_ki();
  ::uint64_t raw_ki;
  memcpy(&raw_ki, &tmp_ki, sizeof(tmp_ki));
  if (raw_ki != 0) {
    _this->_internal_set_ki(from._internal_ki());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kd = from._internal_kd();
  ::uint64_t raw_kd;
  memcpy(&raw_kd, &tmp_kd, sizeof(tmp_kd));
  if (raw_kd != 0) {
    _this->_internal_set_kd(from._internal_kd());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kf_static = from._internal_kf_static();
  ::uint64_t raw_kf_static;
  memcpy(&raw_kf_static, &tmp_kf_static, sizeof(tmp_kf_static));
  if (raw_kf_static != 0) {
    _this->_internal_set_kf_static(from._internal_kf_static());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kf_linear = from._internal_kf_linear();
  ::uint64_t raw_kf_linear;
  memcpy(&raw_kf_linear, &tmp_kf_linear, sizeof(tmp_kf_linear));
  if (raw_kf_linear != 0) {
    _this->_internal_set_kf_linear(from._internal_kf_linear());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kf_square = from._internal_kf_square();
  ::uint64_t raw_kf_square;
  memcpy(&raw_kf_square, &tmp_kf_square, sizeof(tmp_kf_square));
  if (raw_kf_square != 0) {
    _this->_internal_set_kf_square(from._internal_kf_square());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_kf_cosine = from._internal_kf_cosine();
  ::uint64_t raw_kf_cosine;
  memcpy(&raw_kf_cosine, &tmp_kf_cosine, sizeof(tmp_kf_cosine));
  if (raw_kf_cosine != 0) {
    _this->_internal_set_kf_cosine(from._internal_kf_cosine());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_ku = from._internal_ku();
  ::uint64_t raw_ku;
  memcpy(&raw_ku, &tmp_ku, sizeof(tmp_ku));
  if (raw_ku != 0) {
    _this->_internal_set_ku(from._internal_ku());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ControlGains::CopyFrom(const ControlGains& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLIPPY.control.ControlGains)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ControlGains::IsInitialized() const {
  return true;
}

void ControlGains::InternalSwap(ControlGains* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.system_id_, lhs_arena,
                                       &other->_impl_.system_id_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.ku_)
      + sizeof(ControlGains::_impl_.ku_)
      - PROTOBUF_FIELD_OFFSET(ControlGains, _impl_.kp_)>(
          reinterpret_cast<char*>(&_impl_.kp_),
          reinterpret_cast<char*>(&other->_impl_.kp_));
}

::google::protobuf::Metadata ControlGains::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ControlGains_2eproto_getter, &descriptor_table_ControlGains_2eproto_once,
      file_level_metadata_ControlGains_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace CLIPPY
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
