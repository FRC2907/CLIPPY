// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogRecord.proto

#include "LogRecord.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace CLIPPY {
namespace log {
        template <typename>
PROTOBUF_CONSTEXPR LogRecord::LogRecord(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.reporter_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.value_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.timestamp_)*/ nullptr,
      /*decltype(_impl_.severity_)*/ 0,
    } {}
struct LogRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogRecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogRecordDefaultTypeInternal() {}
  union {
    LogRecord _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogRecordDefaultTypeInternal _LogRecord_default_instance_;
}  // namespace log
}  // namespace CLIPPY
static ::_pb::Metadata file_level_metadata_LogRecord_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_LogRecord_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_LogRecord_2eproto = nullptr;
const ::uint32_t TableStruct_LogRecord_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::CLIPPY::log::LogRecord, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::log::LogRecord, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CLIPPY::log::LogRecord, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::log::LogRecord, _impl_.reporter_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::log::LogRecord, _impl_.severity_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::log::LogRecord, _impl_.value_),
    0,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 12, -1, sizeof(::CLIPPY::log::LogRecord)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::CLIPPY::log::_LogRecord_default_instance_._instance,
};
const char descriptor_table_protodef_LogRecord_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\017LogRecord.proto\022\nCLIPPY.log\032\037google/pr"
    "otobuf/timestamp.proto\"\206\001\n\tLogRecord\022-\n\t"
    "timestamp\030\001 \001(\0132\032.google.protobuf.Timest"
    "amp\022\020\n\010reporter\030\002 \001(\t\022)\n\010severity\030\003 \001(\0162"
    "\027.CLIPPY.log.LogSeverity\022\r\n\005value\030\004 \001(\t*"
    "W\n\013LogSeverity\022\013\n\007UNKNOWN\020\000\022\t\n\005TRACE\020\001\022\t"
    "\n\005DEBUG\020\002\022\010\n\004INFO\020\003\022\006\n\002OK\020\004\022\010\n\004WARN\020\005\022\t\n"
    "\005ERROR\020\006b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_LogRecord_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_LogRecord_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_LogRecord_2eproto = {
    false,
    false,
    296,
    descriptor_table_protodef_LogRecord_2eproto,
    "LogRecord.proto",
    &descriptor_table_LogRecord_2eproto_once,
    descriptor_table_LogRecord_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_LogRecord_2eproto::offsets,
    file_level_metadata_LogRecord_2eproto,
    file_level_enum_descriptors_LogRecord_2eproto,
    file_level_service_descriptors_LogRecord_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_LogRecord_2eproto_getter() {
  return &descriptor_table_LogRecord_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_LogRecord_2eproto(&descriptor_table_LogRecord_2eproto);
namespace CLIPPY {
namespace log {
const ::google::protobuf::EnumDescriptor* LogSeverity_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_LogRecord_2eproto);
  return file_level_enum_descriptors_LogRecord_2eproto[0];
}
bool LogSeverity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class LogRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<LogRecord>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LogRecord, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& timestamp(const LogRecord* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Timestamp& LogRecord::_Internal::timestamp(const LogRecord* msg) {
  return *msg->_impl_.timestamp_;
}
void LogRecord::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LogRecord::LogRecord(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CLIPPY.log.LogRecord)
}
LogRecord::LogRecord(const LogRecord& from) : ::google::protobuf::Message() {
  LogRecord* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.reporter_){},
      decltype(_impl_.value_){},
      decltype(_impl_.timestamp_){nullptr},
      decltype(_impl_.severity_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.reporter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reporter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reporter().empty()) {
    _this->_impl_.reporter_.Set(from._internal_reporter(), _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ = new ::google::protobuf::Timestamp(*from._impl_.timestamp_);
  }
  _this->_impl_.severity_ = from._impl_.severity_;

  // @@protoc_insertion_point(copy_constructor:CLIPPY.log.LogRecord)
}
inline void LogRecord::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.reporter_){},
      decltype(_impl_.value_){},
      decltype(_impl_.timestamp_){nullptr},
      decltype(_impl_.severity_){0},
  };
  _impl_.reporter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reporter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
LogRecord::~LogRecord() {
  // @@protoc_insertion_point(destructor:CLIPPY.log.LogRecord)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LogRecord::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reporter_.Destroy();
  _impl_.value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}
void LogRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void LogRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:CLIPPY.log.LogRecord)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reporter_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  _impl_.severity_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LogRecord::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 42, 2> LogRecord::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LogRecord, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LogRecord_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string value = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.value_)}},
    // .google.protobuf.Timestamp timestamp = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.timestamp_)}},
    // string reporter = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.reporter_)}},
    // .CLIPPY.log.LogSeverity severity = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LogRecord, _impl_.severity_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.severity_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string reporter = 2;
    {PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.reporter_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .CLIPPY.log.LogSeverity severity = 3;
    {PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.severity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string value = 4;
    {PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\24\0\10\0\5\0\0\0"
    "CLIPPY.log.LogRecord"
    "reporter"
    "value"
  }},
};

::uint8_t* LogRecord::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLIPPY.log.LogRecord)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string reporter = 2;
  if (!this->_internal_reporter().empty()) {
    const std::string& _s = this->_internal_reporter();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "CLIPPY.log.LogRecord.reporter");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .CLIPPY.log.LogSeverity severity = 3;
  if (this->_internal_severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_severity(), target);
  }

  // string value = 4;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "CLIPPY.log.LogRecord.value");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLIPPY.log.LogRecord)
  return target;
}

::size_t LogRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLIPPY.log.LogRecord)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reporter = 2;
  if (!this->_internal_reporter().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_reporter());
  }

  // string value = 4;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  // .google.protobuf.Timestamp timestamp = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .CLIPPY.log.LogSeverity severity = 3;
  if (this->_internal_severity() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_severity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LogRecord::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    LogRecord::MergeImpl
};
const ::google::protobuf::Message::ClassData*LogRecord::GetClassData() const { return &_class_data_; }


void LogRecord::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LogRecord*>(&to_msg);
  auto& from = static_cast<const LogRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLIPPY.log.LogRecord)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reporter().empty()) {
    _this->_internal_set_reporter(from._internal_reporter());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_severity() != 0) {
    _this->_internal_set_severity(from._internal_severity());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogRecord::CopyFrom(const LogRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLIPPY.log.LogRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LogRecord::IsInitialized() const {
  return true;
}

void LogRecord::InternalSwap(LogRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reporter_, lhs_arena,
                                       &other->_impl_.reporter_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.severity_)
      + sizeof(LogRecord::_impl_.severity_)
      - PROTOBUF_FIELD_OFFSET(LogRecord, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata LogRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_LogRecord_2eproto_getter, &descriptor_table_LogRecord_2eproto_once,
      file_level_metadata_LogRecord_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace log
}  // namespace CLIPPY
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
