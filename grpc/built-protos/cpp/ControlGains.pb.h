// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ControlGains.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ControlGains_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ControlGains_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/wrappers.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ControlGains_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ControlGains_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ControlGains_2eproto;
namespace CLIPPY {
namespace control {
class ControlGains;
struct ControlGainsDefaultTypeInternal;
extern ControlGainsDefaultTypeInternal _ControlGains_default_instance_;
}  // namespace control
}  // namespace CLIPPY
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace CLIPPY {
namespace control {
enum ZNControlRule : int {
  UNSET = 0,
  P = 1,
  PI = 2,
  PD = 3,
  PID = 4,
  PESSEN = 5,
  MILD_OVERSHOOT = 6,
  NO_OVERSHOOT = 7,
  ZNControlRule_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ZNControlRule_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ZNControlRule_IsValid(int value);
constexpr ZNControlRule ZNControlRule_MIN = static_cast<ZNControlRule>(0);
constexpr ZNControlRule ZNControlRule_MAX = static_cast<ZNControlRule>(7);
constexpr int ZNControlRule_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
ZNControlRule_descriptor();
template <typename T>
const std::string& ZNControlRule_Name(T value) {
  static_assert(std::is_same<T, ZNControlRule>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ZNControlRule_Name().");
  return ZNControlRule_Name(static_cast<ZNControlRule>(value));
}
template <>
inline const std::string& ZNControlRule_Name(ZNControlRule value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ZNControlRule_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool ZNControlRule_Parse(absl::string_view name, ZNControlRule* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ZNControlRule>(
      ZNControlRule_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ControlGains final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CLIPPY.control.ControlGains) */ {
 public:
  inline ControlGains() : ControlGains(nullptr) {}
  ~ControlGains() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ControlGains(::google::protobuf::internal::ConstantInitialized);

  ControlGains(const ControlGains& from);
  ControlGains(ControlGains&& from) noexcept
    : ControlGains() {
    *this = ::std::move(from);
  }

  inline ControlGains& operator=(const ControlGains& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlGains& operator=(ControlGains&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlGains& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlGains* internal_default_instance() {
    return reinterpret_cast<const ControlGains*>(
               &_ControlGains_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlGains& a, ControlGains& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlGains* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlGains* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlGains* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlGains>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControlGains& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ControlGains& from) {
    ControlGains::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlGains* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CLIPPY.control.ControlGains";
  }
  protected:
  explicit ControlGains(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSystemIdFieldNumber = 1,
    kKPFieldNumber = 2,
    kKIFieldNumber = 3,
    kKDFieldNumber = 4,
    kKFStaticFieldNumber = 5,
    kKFLinearFieldNumber = 6,
    kKFLinearPerTimeFieldNumber = 7,
    kKFConstantFieldNumber = 8,
    kKUFieldNumber = 9,
    kTUFieldNumber = 10,
    kZnControlRuleFieldNumber = 11,
  };
  // string system_id = 1;
  void clear_system_id() ;
  const std::string& system_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_system_id(Arg_&& arg, Args_... args);
  std::string* mutable_system_id();
  PROTOBUF_NODISCARD std::string* release_system_id();
  void set_allocated_system_id(std::string* ptr);

  private:
  const std::string& _internal_system_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_system_id(
      const std::string& value);
  std::string* _internal_mutable_system_id();

  public:
  // .google.protobuf.DoubleValue kP = 2;
  bool has_kp() const;
  void clear_kp() ;
  const ::google::protobuf::DoubleValue& kp() const;
  PROTOBUF_NODISCARD ::google::protobuf::DoubleValue* release_kp();
  ::google::protobuf::DoubleValue* mutable_kp();
  void set_allocated_kp(::google::protobuf::DoubleValue* value);
  void unsafe_arena_set_allocated_kp(::google::protobuf::DoubleValue* value);
  ::google::protobuf::DoubleValue* unsafe_arena_release_kp();

  private:
  const ::google::protobuf::DoubleValue& _internal_kp() const;
  ::google::protobuf::DoubleValue* _internal_mutable_kp();

  public:
  // .google.protobuf.DoubleValue kI = 3;
  bool has_ki() const;
  void clear_ki() ;
  const ::google::protobuf::DoubleValue& ki() const;
  PROTOBUF_NODISCARD ::google::protobuf::DoubleValue* release_ki();
  ::google::protobuf::DoubleValue* mutable_ki();
  void set_allocated_ki(::google::protobuf::DoubleValue* value);
  void unsafe_arena_set_allocated_ki(::google::protobuf::DoubleValue* value);
  ::google::protobuf::DoubleValue* unsafe_arena_release_ki();

  private:
  const ::google::protobuf::DoubleValue& _internal_ki() const;
  ::google::protobuf::DoubleValue* _internal_mutable_ki();

  public:
  // .google.protobuf.DoubleValue kD = 4;
  bool has_kd() const;
  void clear_kd() ;
  const ::google::protobuf::DoubleValue& kd() const;
  PROTOBUF_NODISCARD ::google::protobuf::DoubleValue* release_kd();
  ::google::protobuf::DoubleValue* mutable_kd();
  void set_allocated_kd(::google::protobuf::DoubleValue* value);
  void unsafe_arena_set_allocated_kd(::google::protobuf::DoubleValue* value);
  ::google::protobuf::DoubleValue* unsafe_arena_release_kd();

  private:
  const ::google::protobuf::DoubleValue& _internal_kd() const;
  ::google::protobuf::DoubleValue* _internal_mutable_kd();

  public:
  // .google.protobuf.DoubleValue kF_static = 5;
  bool has_kf_static() const;
  void clear_kf_static() ;
  const ::google::protobuf::DoubleValue& kf_static() const;
  PROTOBUF_NODISCARD ::google::protobuf::DoubleValue* release_kf_static();
  ::google::protobuf::DoubleValue* mutable_kf_static();
  void set_allocated_kf_static(::google::protobuf::DoubleValue* value);
  void unsafe_arena_set_allocated_kf_static(::google::protobuf::DoubleValue* value);
  ::google::protobuf::DoubleValue* unsafe_arena_release_kf_static();

  private:
  const ::google::protobuf::DoubleValue& _internal_kf_static() const;
  ::google::protobuf::DoubleValue* _internal_mutable_kf_static();

  public:
  // .google.protobuf.DoubleValue kF_linear = 6;
  bool has_kf_linear() const;
  void clear_kf_linear() ;
  const ::google::protobuf::DoubleValue& kf_linear() const;
  PROTOBUF_NODISCARD ::google::protobuf::DoubleValue* release_kf_linear();
  ::google::protobuf::DoubleValue* mutable_kf_linear();
  void set_allocated_kf_linear(::google::protobuf::DoubleValue* value);
  void unsafe_arena_set_allocated_kf_linear(::google::protobuf::DoubleValue* value);
  ::google::protobuf::DoubleValue* unsafe_arena_release_kf_linear();

  private:
  const ::google::protobuf::DoubleValue& _internal_kf_linear() const;
  ::google::protobuf::DoubleValue* _internal_mutable_kf_linear();

  public:
  // .google.protobuf.DoubleValue kF_linear_per_time = 7;
  bool has_kf_linear_per_time() const;
  void clear_kf_linear_per_time() ;
  const ::google::protobuf::DoubleValue& kf_linear_per_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::DoubleValue* release_kf_linear_per_time();
  ::google::protobuf::DoubleValue* mutable_kf_linear_per_time();
  void set_allocated_kf_linear_per_time(::google::protobuf::DoubleValue* value);
  void unsafe_arena_set_allocated_kf_linear_per_time(::google::protobuf::DoubleValue* value);
  ::google::protobuf::DoubleValue* unsafe_arena_release_kf_linear_per_time();

  private:
  const ::google::protobuf::DoubleValue& _internal_kf_linear_per_time() const;
  ::google::protobuf::DoubleValue* _internal_mutable_kf_linear_per_time();

  public:
  // .google.protobuf.DoubleValue kF_constant = 8;
  bool has_kf_constant() const;
  void clear_kf_constant() ;
  const ::google::protobuf::DoubleValue& kf_constant() const;
  PROTOBUF_NODISCARD ::google::protobuf::DoubleValue* release_kf_constant();
  ::google::protobuf::DoubleValue* mutable_kf_constant();
  void set_allocated_kf_constant(::google::protobuf::DoubleValue* value);
  void unsafe_arena_set_allocated_kf_constant(::google::protobuf::DoubleValue* value);
  ::google::protobuf::DoubleValue* unsafe_arena_release_kf_constant();

  private:
  const ::google::protobuf::DoubleValue& _internal_kf_constant() const;
  ::google::protobuf::DoubleValue* _internal_mutable_kf_constant();

  public:
  // .google.protobuf.DoubleValue kU = 9;
  bool has_ku() const;
  void clear_ku() ;
  const ::google::protobuf::DoubleValue& ku() const;
  PROTOBUF_NODISCARD ::google::protobuf::DoubleValue* release_ku();
  ::google::protobuf::DoubleValue* mutable_ku();
  void set_allocated_ku(::google::protobuf::DoubleValue* value);
  void unsafe_arena_set_allocated_ku(::google::protobuf::DoubleValue* value);
  ::google::protobuf::DoubleValue* unsafe_arena_release_ku();

  private:
  const ::google::protobuf::DoubleValue& _internal_ku() const;
  ::google::protobuf::DoubleValue* _internal_mutable_ku();

  public:
  // .google.protobuf.DoubleValue tU = 10;
  bool has_tu() const;
  void clear_tu() ;
  const ::google::protobuf::DoubleValue& tu() const;
  PROTOBUF_NODISCARD ::google::protobuf::DoubleValue* release_tu();
  ::google::protobuf::DoubleValue* mutable_tu();
  void set_allocated_tu(::google::protobuf::DoubleValue* value);
  void unsafe_arena_set_allocated_tu(::google::protobuf::DoubleValue* value);
  ::google::protobuf::DoubleValue* unsafe_arena_release_tu();

  private:
  const ::google::protobuf::DoubleValue& _internal_tu() const;
  ::google::protobuf::DoubleValue* _internal_mutable_tu();

  public:
  // .CLIPPY.control.ZNControlRule znControlRule = 11;
  void clear_zncontrolrule() ;
  ::CLIPPY::control::ZNControlRule zncontrolrule() const;
  void set_zncontrolrule(::CLIPPY::control::ZNControlRule value);

  private:
  ::CLIPPY::control::ZNControlRule _internal_zncontrolrule() const;
  void _internal_set_zncontrolrule(::CLIPPY::control::ZNControlRule value);

  public:
  // @@protoc_insertion_point(class_scope:CLIPPY.control.ControlGains)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 11, 9, 53, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr system_id_;
    ::google::protobuf::DoubleValue* kp_;
    ::google::protobuf::DoubleValue* ki_;
    ::google::protobuf::DoubleValue* kd_;
    ::google::protobuf::DoubleValue* kf_static_;
    ::google::protobuf::DoubleValue* kf_linear_;
    ::google::protobuf::DoubleValue* kf_linear_per_time_;
    ::google::protobuf::DoubleValue* kf_constant_;
    ::google::protobuf::DoubleValue* ku_;
    ::google::protobuf::DoubleValue* tu_;
    int zncontrolrule_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ControlGains_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ControlGains

// string system_id = 1;
inline void ControlGains::clear_system_id() {
  _impl_.system_id_.ClearToEmpty();
}
inline const std::string& ControlGains::system_id() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlGains.system_id)
  return _internal_system_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ControlGains::set_system_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.system_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CLIPPY.control.ControlGains.system_id)
}
inline std::string* ControlGains::mutable_system_id() {
  std::string* _s = _internal_mutable_system_id();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.ControlGains.system_id)
  return _s;
}
inline const std::string& ControlGains::_internal_system_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.system_id_.Get();
}
inline void ControlGains::_internal_set_system_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.system_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ControlGains::_internal_mutable_system_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.system_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ControlGains::release_system_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.ControlGains.system_id)
  return _impl_.system_id_.Release();
}
inline void ControlGains::set_allocated_system_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.system_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.system_id_.IsDefault()) {
          _impl_.system_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.ControlGains.system_id)
}

// .google.protobuf.DoubleValue kP = 2;
inline bool ControlGains::has_kp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kp_ != nullptr);
  return value;
}
inline const ::google::protobuf::DoubleValue& ControlGains::_internal_kp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::DoubleValue* p = _impl_.kp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::DoubleValue&>(::google::protobuf::_DoubleValue_default_instance_);
}
inline const ::google::protobuf::DoubleValue& ControlGains::kp() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlGains.kP)
  return _internal_kp();
}
inline void ControlGains::unsafe_arena_set_allocated_kp(::google::protobuf::DoubleValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kp_);
  }
  _impl_.kp_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CLIPPY.control.ControlGains.kP)
}
inline ::google::protobuf::DoubleValue* ControlGains::release_kp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::DoubleValue* released = _impl_.kp_;
  _impl_.kp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::DoubleValue* ControlGains::unsafe_arena_release_kp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.ControlGains.kP)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::DoubleValue* temp = _impl_.kp_;
  _impl_.kp_ = nullptr;
  return temp;
}
inline ::google::protobuf::DoubleValue* ControlGains::_internal_mutable_kp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.kp_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::DoubleValue>(GetArenaForAllocation());
    _impl_.kp_ = reinterpret_cast<::google::protobuf::DoubleValue*>(p);
  }
  return _impl_.kp_;
}
inline ::google::protobuf::DoubleValue* ControlGains::mutable_kp() {
  ::google::protobuf::DoubleValue* _msg = _internal_mutable_kp();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.ControlGains.kP)
  return _msg;
}
inline void ControlGains::set_allocated_kp(::google::protobuf::DoubleValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.kp_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.ControlGains.kP)
}

// .google.protobuf.DoubleValue kI = 3;
inline bool ControlGains::has_ki() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ki_ != nullptr);
  return value;
}
inline const ::google::protobuf::DoubleValue& ControlGains::_internal_ki() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::DoubleValue* p = _impl_.ki_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::DoubleValue&>(::google::protobuf::_DoubleValue_default_instance_);
}
inline const ::google::protobuf::DoubleValue& ControlGains::ki() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlGains.kI)
  return _internal_ki();
}
inline void ControlGains::unsafe_arena_set_allocated_ki(::google::protobuf::DoubleValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ki_);
  }
  _impl_.ki_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CLIPPY.control.ControlGains.kI)
}
inline ::google::protobuf::DoubleValue* ControlGains::release_ki() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::DoubleValue* released = _impl_.ki_;
  _impl_.ki_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::DoubleValue* ControlGains::unsafe_arena_release_ki() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.ControlGains.kI)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::DoubleValue* temp = _impl_.ki_;
  _impl_.ki_ = nullptr;
  return temp;
}
inline ::google::protobuf::DoubleValue* ControlGains::_internal_mutable_ki() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.ki_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::DoubleValue>(GetArenaForAllocation());
    _impl_.ki_ = reinterpret_cast<::google::protobuf::DoubleValue*>(p);
  }
  return _impl_.ki_;
}
inline ::google::protobuf::DoubleValue* ControlGains::mutable_ki() {
  ::google::protobuf::DoubleValue* _msg = _internal_mutable_ki();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.ControlGains.kI)
  return _msg;
}
inline void ControlGains::set_allocated_ki(::google::protobuf::DoubleValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ki_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.ki_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.ControlGains.kI)
}

// .google.protobuf.DoubleValue kD = 4;
inline bool ControlGains::has_kd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kd_ != nullptr);
  return value;
}
inline const ::google::protobuf::DoubleValue& ControlGains::_internal_kd() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::DoubleValue* p = _impl_.kd_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::DoubleValue&>(::google::protobuf::_DoubleValue_default_instance_);
}
inline const ::google::protobuf::DoubleValue& ControlGains::kd() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlGains.kD)
  return _internal_kd();
}
inline void ControlGains::unsafe_arena_set_allocated_kd(::google::protobuf::DoubleValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kd_);
  }
  _impl_.kd_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CLIPPY.control.ControlGains.kD)
}
inline ::google::protobuf::DoubleValue* ControlGains::release_kd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::DoubleValue* released = _impl_.kd_;
  _impl_.kd_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::DoubleValue* ControlGains::unsafe_arena_release_kd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.ControlGains.kD)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::DoubleValue* temp = _impl_.kd_;
  _impl_.kd_ = nullptr;
  return temp;
}
inline ::google::protobuf::DoubleValue* ControlGains::_internal_mutable_kd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.kd_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::DoubleValue>(GetArenaForAllocation());
    _impl_.kd_ = reinterpret_cast<::google::protobuf::DoubleValue*>(p);
  }
  return _impl_.kd_;
}
inline ::google::protobuf::DoubleValue* ControlGains::mutable_kd() {
  ::google::protobuf::DoubleValue* _msg = _internal_mutable_kd();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.ControlGains.kD)
  return _msg;
}
inline void ControlGains::set_allocated_kd(::google::protobuf::DoubleValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kd_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.kd_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.ControlGains.kD)
}

// .google.protobuf.DoubleValue kF_static = 5;
inline bool ControlGains::has_kf_static() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kf_static_ != nullptr);
  return value;
}
inline const ::google::protobuf::DoubleValue& ControlGains::_internal_kf_static() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::DoubleValue* p = _impl_.kf_static_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::DoubleValue&>(::google::protobuf::_DoubleValue_default_instance_);
}
inline const ::google::protobuf::DoubleValue& ControlGains::kf_static() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlGains.kF_static)
  return _internal_kf_static();
}
inline void ControlGains::unsafe_arena_set_allocated_kf_static(::google::protobuf::DoubleValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kf_static_);
  }
  _impl_.kf_static_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CLIPPY.control.ControlGains.kF_static)
}
inline ::google::protobuf::DoubleValue* ControlGains::release_kf_static() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::DoubleValue* released = _impl_.kf_static_;
  _impl_.kf_static_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::DoubleValue* ControlGains::unsafe_arena_release_kf_static() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.ControlGains.kF_static)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::DoubleValue* temp = _impl_.kf_static_;
  _impl_.kf_static_ = nullptr;
  return temp;
}
inline ::google::protobuf::DoubleValue* ControlGains::_internal_mutable_kf_static() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.kf_static_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::DoubleValue>(GetArenaForAllocation());
    _impl_.kf_static_ = reinterpret_cast<::google::protobuf::DoubleValue*>(p);
  }
  return _impl_.kf_static_;
}
inline ::google::protobuf::DoubleValue* ControlGains::mutable_kf_static() {
  ::google::protobuf::DoubleValue* _msg = _internal_mutable_kf_static();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.ControlGains.kF_static)
  return _msg;
}
inline void ControlGains::set_allocated_kf_static(::google::protobuf::DoubleValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kf_static_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.kf_static_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.ControlGains.kF_static)
}

// .google.protobuf.DoubleValue kF_linear = 6;
inline bool ControlGains::has_kf_linear() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kf_linear_ != nullptr);
  return value;
}
inline const ::google::protobuf::DoubleValue& ControlGains::_internal_kf_linear() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::DoubleValue* p = _impl_.kf_linear_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::DoubleValue&>(::google::protobuf::_DoubleValue_default_instance_);
}
inline const ::google::protobuf::DoubleValue& ControlGains::kf_linear() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlGains.kF_linear)
  return _internal_kf_linear();
}
inline void ControlGains::unsafe_arena_set_allocated_kf_linear(::google::protobuf::DoubleValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kf_linear_);
  }
  _impl_.kf_linear_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CLIPPY.control.ControlGains.kF_linear)
}
inline ::google::protobuf::DoubleValue* ControlGains::release_kf_linear() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::DoubleValue* released = _impl_.kf_linear_;
  _impl_.kf_linear_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::DoubleValue* ControlGains::unsafe_arena_release_kf_linear() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.ControlGains.kF_linear)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::DoubleValue* temp = _impl_.kf_linear_;
  _impl_.kf_linear_ = nullptr;
  return temp;
}
inline ::google::protobuf::DoubleValue* ControlGains::_internal_mutable_kf_linear() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.kf_linear_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::DoubleValue>(GetArenaForAllocation());
    _impl_.kf_linear_ = reinterpret_cast<::google::protobuf::DoubleValue*>(p);
  }
  return _impl_.kf_linear_;
}
inline ::google::protobuf::DoubleValue* ControlGains::mutable_kf_linear() {
  ::google::protobuf::DoubleValue* _msg = _internal_mutable_kf_linear();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.ControlGains.kF_linear)
  return _msg;
}
inline void ControlGains::set_allocated_kf_linear(::google::protobuf::DoubleValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kf_linear_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.kf_linear_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.ControlGains.kF_linear)
}

// .google.protobuf.DoubleValue kF_linear_per_time = 7;
inline bool ControlGains::has_kf_linear_per_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kf_linear_per_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::DoubleValue& ControlGains::_internal_kf_linear_per_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::DoubleValue* p = _impl_.kf_linear_per_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::DoubleValue&>(::google::protobuf::_DoubleValue_default_instance_);
}
inline const ::google::protobuf::DoubleValue& ControlGains::kf_linear_per_time() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlGains.kF_linear_per_time)
  return _internal_kf_linear_per_time();
}
inline void ControlGains::unsafe_arena_set_allocated_kf_linear_per_time(::google::protobuf::DoubleValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kf_linear_per_time_);
  }
  _impl_.kf_linear_per_time_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CLIPPY.control.ControlGains.kF_linear_per_time)
}
inline ::google::protobuf::DoubleValue* ControlGains::release_kf_linear_per_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::DoubleValue* released = _impl_.kf_linear_per_time_;
  _impl_.kf_linear_per_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::DoubleValue* ControlGains::unsafe_arena_release_kf_linear_per_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.ControlGains.kF_linear_per_time)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::DoubleValue* temp = _impl_.kf_linear_per_time_;
  _impl_.kf_linear_per_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::DoubleValue* ControlGains::_internal_mutable_kf_linear_per_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.kf_linear_per_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::DoubleValue>(GetArenaForAllocation());
    _impl_.kf_linear_per_time_ = reinterpret_cast<::google::protobuf::DoubleValue*>(p);
  }
  return _impl_.kf_linear_per_time_;
}
inline ::google::protobuf::DoubleValue* ControlGains::mutable_kf_linear_per_time() {
  ::google::protobuf::DoubleValue* _msg = _internal_mutable_kf_linear_per_time();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.ControlGains.kF_linear_per_time)
  return _msg;
}
inline void ControlGains::set_allocated_kf_linear_per_time(::google::protobuf::DoubleValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kf_linear_per_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.kf_linear_per_time_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.ControlGains.kF_linear_per_time)
}

// .google.protobuf.DoubleValue kF_constant = 8;
inline bool ControlGains::has_kf_constant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kf_constant_ != nullptr);
  return value;
}
inline const ::google::protobuf::DoubleValue& ControlGains::_internal_kf_constant() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::DoubleValue* p = _impl_.kf_constant_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::DoubleValue&>(::google::protobuf::_DoubleValue_default_instance_);
}
inline const ::google::protobuf::DoubleValue& ControlGains::kf_constant() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlGains.kF_constant)
  return _internal_kf_constant();
}
inline void ControlGains::unsafe_arena_set_allocated_kf_constant(::google::protobuf::DoubleValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kf_constant_);
  }
  _impl_.kf_constant_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CLIPPY.control.ControlGains.kF_constant)
}
inline ::google::protobuf::DoubleValue* ControlGains::release_kf_constant() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::DoubleValue* released = _impl_.kf_constant_;
  _impl_.kf_constant_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::DoubleValue* ControlGains::unsafe_arena_release_kf_constant() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.ControlGains.kF_constant)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::DoubleValue* temp = _impl_.kf_constant_;
  _impl_.kf_constant_ = nullptr;
  return temp;
}
inline ::google::protobuf::DoubleValue* ControlGains::_internal_mutable_kf_constant() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.kf_constant_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::DoubleValue>(GetArenaForAllocation());
    _impl_.kf_constant_ = reinterpret_cast<::google::protobuf::DoubleValue*>(p);
  }
  return _impl_.kf_constant_;
}
inline ::google::protobuf::DoubleValue* ControlGains::mutable_kf_constant() {
  ::google::protobuf::DoubleValue* _msg = _internal_mutable_kf_constant();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.ControlGains.kF_constant)
  return _msg;
}
inline void ControlGains::set_allocated_kf_constant(::google::protobuf::DoubleValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.kf_constant_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.kf_constant_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.ControlGains.kF_constant)
}

// .google.protobuf.DoubleValue kU = 9;
inline bool ControlGains::has_ku() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ku_ != nullptr);
  return value;
}
inline const ::google::protobuf::DoubleValue& ControlGains::_internal_ku() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::DoubleValue* p = _impl_.ku_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::DoubleValue&>(::google::protobuf::_DoubleValue_default_instance_);
}
inline const ::google::protobuf::DoubleValue& ControlGains::ku() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlGains.kU)
  return _internal_ku();
}
inline void ControlGains::unsafe_arena_set_allocated_ku(::google::protobuf::DoubleValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ku_);
  }
  _impl_.ku_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CLIPPY.control.ControlGains.kU)
}
inline ::google::protobuf::DoubleValue* ControlGains::release_ku() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::DoubleValue* released = _impl_.ku_;
  _impl_.ku_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::DoubleValue* ControlGains::unsafe_arena_release_ku() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.ControlGains.kU)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::DoubleValue* temp = _impl_.ku_;
  _impl_.ku_ = nullptr;
  return temp;
}
inline ::google::protobuf::DoubleValue* ControlGains::_internal_mutable_ku() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.ku_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::DoubleValue>(GetArenaForAllocation());
    _impl_.ku_ = reinterpret_cast<::google::protobuf::DoubleValue*>(p);
  }
  return _impl_.ku_;
}
inline ::google::protobuf::DoubleValue* ControlGains::mutable_ku() {
  ::google::protobuf::DoubleValue* _msg = _internal_mutable_ku();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.ControlGains.kU)
  return _msg;
}
inline void ControlGains::set_allocated_ku(::google::protobuf::DoubleValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ku_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.ku_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.ControlGains.kU)
}

// .google.protobuf.DoubleValue tU = 10;
inline bool ControlGains::has_tu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tu_ != nullptr);
  return value;
}
inline const ::google::protobuf::DoubleValue& ControlGains::_internal_tu() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::DoubleValue* p = _impl_.tu_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::DoubleValue&>(::google::protobuf::_DoubleValue_default_instance_);
}
inline const ::google::protobuf::DoubleValue& ControlGains::tu() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlGains.tU)
  return _internal_tu();
}
inline void ControlGains::unsafe_arena_set_allocated_tu(::google::protobuf::DoubleValue* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tu_);
  }
  _impl_.tu_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CLIPPY.control.ControlGains.tU)
}
inline ::google::protobuf::DoubleValue* ControlGains::release_tu() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::google::protobuf::DoubleValue* released = _impl_.tu_;
  _impl_.tu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::DoubleValue* ControlGains::unsafe_arena_release_tu() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.ControlGains.tU)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::google::protobuf::DoubleValue* temp = _impl_.tu_;
  _impl_.tu_ = nullptr;
  return temp;
}
inline ::google::protobuf::DoubleValue* ControlGains::_internal_mutable_tu() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.tu_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::DoubleValue>(GetArenaForAllocation());
    _impl_.tu_ = reinterpret_cast<::google::protobuf::DoubleValue*>(p);
  }
  return _impl_.tu_;
}
inline ::google::protobuf::DoubleValue* ControlGains::mutable_tu() {
  ::google::protobuf::DoubleValue* _msg = _internal_mutable_tu();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.ControlGains.tU)
  return _msg;
}
inline void ControlGains::set_allocated_tu(::google::protobuf::DoubleValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tu_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.tu_ = reinterpret_cast<::google::protobuf::DoubleValue*>(value);
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.ControlGains.tU)
}

// .CLIPPY.control.ZNControlRule znControlRule = 11;
inline void ControlGains::clear_zncontrolrule() {
  _impl_.zncontrolrule_ = 0;
}
inline ::CLIPPY::control::ZNControlRule ControlGains::zncontrolrule() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlGains.znControlRule)
  return _internal_zncontrolrule();
}
inline void ControlGains::set_zncontrolrule(::CLIPPY::control::ZNControlRule value) {
  _internal_set_zncontrolrule(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.ControlGains.znControlRule)
}
inline ::CLIPPY::control::ZNControlRule ControlGains::_internal_zncontrolrule() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CLIPPY::control::ZNControlRule>(_impl_.zncontrolrule_);
}
inline void ControlGains::_internal_set_zncontrolrule(::CLIPPY::control::ZNControlRule value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.zncontrolrule_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace CLIPPY


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::CLIPPY::control::ZNControlRule> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::CLIPPY::control::ZNControlRule>() {
  return ::CLIPPY::control::ZNControlRule_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ControlGains_2eproto_2epb_2eh
