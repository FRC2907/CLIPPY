// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SystemState.proto

#include "SystemState.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace CLIPPY {
namespace control {
        template <typename>
PROTOBUF_CONSTEXPR SystemIDs::SystemIDs(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.system_ids_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SystemIDsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemIDsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemIDsDefaultTypeInternal() {}
  union {
    SystemIDs _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemIDsDefaultTypeInternal _SystemIDs_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SystemTags::SystemTags(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.system_tags_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SystemTagsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemTagsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemTagsDefaultTypeInternal() {}
  union {
    SystemTags _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemTagsDefaultTypeInternal _SystemTags_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SystemState_Measurement::SystemState_Measurement(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.position_)*/ 0,
      /*decltype(_impl_.velocity_)*/ 0,
      /*decltype(_impl_.acceleration_)*/ 0,
      /*decltype(_impl_.voltage_)*/ 0,
      /*decltype(_impl_.current_)*/ 0,
      /*decltype(_impl_.power_)*/ 0,
      /*decltype(_impl_.energy_)*/ 0,
      /*decltype(_impl_.pressure_)*/ 0,
      /*decltype(_impl_.jerk_)*/ 0,
      /*decltype(_impl_.temperature_)*/ 0,
      /*decltype(_impl_.active_)*/ false,
      /*decltype(_impl_.triggered_)*/ false,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SystemState_MeasurementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemState_MeasurementDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemState_MeasurementDefaultTypeInternal() {}
  union {
    SystemState_Measurement _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemState_MeasurementDefaultTypeInternal _SystemState_Measurement_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SystemState::SystemState(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.system_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.timestamp_)*/ nullptr,
      /*decltype(_impl_.state_)*/ nullptr,
      /*decltype(_impl_.gains_)*/ nullptr,
    } {}
struct SystemStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemStateDefaultTypeInternal() {}
  union {
    SystemState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemStateDefaultTypeInternal _SystemState_default_instance_;
}  // namespace control
}  // namespace CLIPPY
static ::_pb::Metadata file_level_metadata_SystemState_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_SystemState_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_SystemState_2eproto = nullptr;
const ::uint32_t TableStruct_SystemState_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemIDs, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemIDs, _impl_.system_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemTags, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemTags, _impl_.system_tags_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState_Measurement, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState_Measurement, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState_Measurement, _impl_.velocity_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState_Measurement, _impl_.acceleration_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState_Measurement, _impl_.voltage_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState_Measurement, _impl_.current_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState_Measurement, _impl_.active_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState_Measurement, _impl_.triggered_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState_Measurement, _impl_.power_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState_Measurement, _impl_.energy_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState_Measurement, _impl_.pressure_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState_Measurement, _impl_.jerk_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState_Measurement, _impl_.temperature_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState, _impl_.system_id_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::SystemState, _impl_.gains_),
    0,
    ~0u,
    1,
    2,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::CLIPPY::control::SystemIDs)},
        {9, -1, -1, sizeof(::CLIPPY::control::SystemTags)},
        {18, -1, -1, sizeof(::CLIPPY::control::SystemState_Measurement)},
        {38, 50, -1, sizeof(::CLIPPY::control::SystemState)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::CLIPPY::control::_SystemIDs_default_instance_._instance,
    &::CLIPPY::control::_SystemTags_default_instance_._instance,
    &::CLIPPY::control::_SystemState_Measurement_default_instance_._instance,
    &::CLIPPY::control::_SystemState_default_instance_._instance,
};
const char descriptor_table_protodef_SystemState_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021SystemState.proto\022\016CLIPPY.control\032\037goo"
    "gle/protobuf/timestamp.proto\032\022ControlGai"
    "ns.proto\"\037\n\tSystemIDs\022\022\n\nsystem_ids\030\001 \003("
    "\t\"!\n\nSystemTags\022\023\n\013system_tags\030\001 \003(\t\"\227\003\n"
    "\013SystemState\022-\n\ttimestamp\030\001 \001(\0132\032.google"
    ".protobuf.Timestamp\022\021\n\tsystem_id\030\002 \001(\t\0226"
    "\n\005state\030\003 \001(\0132\'.CLIPPY.control.SystemSta"
    "te.Measurement\022+\n\005gains\030\004 \001(\0132\034.CLIPPY.c"
    "ontrol.ControlGains\032\340\001\n\013Measurement\022\020\n\010p"
    "osition\030\001 \001(\001\022\020\n\010velocity\030\002 \001(\001\022\024\n\014accel"
    "eration\030\003 \001(\001\022\017\n\007voltage\030\004 \001(\001\022\017\n\007curren"
    "t\030\005 \001(\001\022\016\n\006active\030\006 \001(\010\022\021\n\ttriggered\030\007 \001"
    "(\010\022\r\n\005power\030\010 \001(\001\022\016\n\006energy\030\t \001(\001\022\020\n\010pre"
    "ssure\030\n \001(\001\022\014\n\004jerk\030\013 \001(\001\022\023\n\013temperature"
    "\030\014 \001(\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_SystemState_2eproto_deps[2] =
    {
        &::descriptor_table_ControlGains_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_SystemState_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_SystemState_2eproto = {
    false,
    false,
    574,
    descriptor_table_protodef_SystemState_2eproto,
    "SystemState.proto",
    &descriptor_table_SystemState_2eproto_once,
    descriptor_table_SystemState_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_SystemState_2eproto::offsets,
    file_level_metadata_SystemState_2eproto,
    file_level_enum_descriptors_SystemState_2eproto,
    file_level_service_descriptors_SystemState_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_SystemState_2eproto_getter() {
  return &descriptor_table_SystemState_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_SystemState_2eproto(&descriptor_table_SystemState_2eproto);
namespace CLIPPY {
namespace control {
// ===================================================================

class SystemIDs::_Internal {
 public:
};

SystemIDs::SystemIDs(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CLIPPY.control.SystemIDs)
}
SystemIDs::SystemIDs(const SystemIDs& from) : ::google::protobuf::Message() {
  SystemIDs* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.system_ids_){from._impl_.system_ids_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:CLIPPY.control.SystemIDs)
}
inline void SystemIDs::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.system_ids_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
SystemIDs::~SystemIDs() {
  // @@protoc_insertion_point(destructor:CLIPPY.control.SystemIDs)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SystemIDs::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_system_ids()->~RepeatedPtrField();
}
void SystemIDs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SystemIDs::Clear() {
// @@protoc_insertion_point(message_clear_start:CLIPPY.control.SystemIDs)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_system_ids()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SystemIDs::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 43, 2> SystemIDs::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SystemIDs_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated string system_ids = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SystemIDs, _impl_.system_ids_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string system_ids = 1;
    {PROTOBUF_FIELD_OFFSET(SystemIDs, _impl_.system_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\30\12\0\0\0\0\0\0"
    "CLIPPY.control.SystemIDs"
    "system_ids"
  }},
};

::uint8_t* SystemIDs::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLIPPY.control.SystemIDs)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string system_ids = 1;
  for (int i = 0, n = this->_internal_system_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_system_ids().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "CLIPPY.control.SystemIDs.system_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLIPPY.control.SystemIDs)
  return target;
}

::size_t SystemIDs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLIPPY.control.SystemIDs)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string system_ids = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_system_ids().size());
  for (int i = 0, n = _internal_system_ids().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_system_ids().Get(i));
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SystemIDs::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SystemIDs::MergeImpl
};
const ::google::protobuf::Message::ClassData*SystemIDs::GetClassData() const { return &_class_data_; }


void SystemIDs::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SystemIDs*>(&to_msg);
  auto& from = static_cast<const SystemIDs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLIPPY.control.SystemIDs)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_system_ids()->MergeFrom(from._internal_system_ids());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SystemIDs::CopyFrom(const SystemIDs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLIPPY.control.SystemIDs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SystemIDs::IsInitialized() const {
  return true;
}

void SystemIDs::InternalSwap(SystemIDs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.system_ids_.InternalSwap(&other->_impl_.system_ids_);
}

::google::protobuf::Metadata SystemIDs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SystemState_2eproto_getter, &descriptor_table_SystemState_2eproto_once,
      file_level_metadata_SystemState_2eproto[0]);
}
// ===================================================================

class SystemTags::_Internal {
 public:
};

SystemTags::SystemTags(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CLIPPY.control.SystemTags)
}
SystemTags::SystemTags(const SystemTags& from) : ::google::protobuf::Message() {
  SystemTags* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.system_tags_){from._impl_.system_tags_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:CLIPPY.control.SystemTags)
}
inline void SystemTags::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.system_tags_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
SystemTags::~SystemTags() {
  // @@protoc_insertion_point(destructor:CLIPPY.control.SystemTags)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SystemTags::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_system_tags()->~RepeatedPtrField();
}
void SystemTags::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SystemTags::Clear() {
// @@protoc_insertion_point(message_clear_start:CLIPPY.control.SystemTags)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_system_tags()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SystemTags::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 45, 2> SystemTags::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SystemTags_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated string system_tags = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SystemTags, _impl_.system_tags_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string system_tags = 1;
    {PROTOBUF_FIELD_OFFSET(SystemTags, _impl_.system_tags_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\31\13\0\0\0\0\0\0"
    "CLIPPY.control.SystemTags"
    "system_tags"
  }},
};

::uint8_t* SystemTags::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLIPPY.control.SystemTags)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string system_tags = 1;
  for (int i = 0, n = this->_internal_system_tags_size(); i < n; ++i) {
    const auto& s = this->_internal_system_tags().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "CLIPPY.control.SystemTags.system_tags");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLIPPY.control.SystemTags)
  return target;
}

::size_t SystemTags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLIPPY.control.SystemTags)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string system_tags = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_system_tags().size());
  for (int i = 0, n = _internal_system_tags().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_system_tags().Get(i));
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SystemTags::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SystemTags::MergeImpl
};
const ::google::protobuf::Message::ClassData*SystemTags::GetClassData() const { return &_class_data_; }


void SystemTags::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SystemTags*>(&to_msg);
  auto& from = static_cast<const SystemTags&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLIPPY.control.SystemTags)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_system_tags()->MergeFrom(from._internal_system_tags());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SystemTags::CopyFrom(const SystemTags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLIPPY.control.SystemTags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SystemTags::IsInitialized() const {
  return true;
}

void SystemTags::InternalSwap(SystemTags* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.system_tags_.InternalSwap(&other->_impl_.system_tags_);
}

::google::protobuf::Metadata SystemTags::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SystemState_2eproto_getter, &descriptor_table_SystemState_2eproto_once,
      file_level_metadata_SystemState_2eproto[1]);
}
// ===================================================================

class SystemState_Measurement::_Internal {
 public:
};

SystemState_Measurement::SystemState_Measurement(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CLIPPY.control.SystemState.Measurement)
}
SystemState_Measurement::SystemState_Measurement(const SystemState_Measurement& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CLIPPY.control.SystemState.Measurement)
}
inline void SystemState_Measurement::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){0},
      decltype(_impl_.velocity_){0},
      decltype(_impl_.acceleration_){0},
      decltype(_impl_.voltage_){0},
      decltype(_impl_.current_){0},
      decltype(_impl_.power_){0},
      decltype(_impl_.energy_){0},
      decltype(_impl_.pressure_){0},
      decltype(_impl_.jerk_){0},
      decltype(_impl_.temperature_){0},
      decltype(_impl_.active_){false},
      decltype(_impl_.triggered_){false},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
SystemState_Measurement::~SystemState_Measurement() {
  // @@protoc_insertion_point(destructor:CLIPPY.control.SystemState.Measurement)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SystemState_Measurement::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void SystemState_Measurement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SystemState_Measurement::Clear() {
// @@protoc_insertion_point(message_clear_start:CLIPPY.control.SystemState.Measurement)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.position_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.triggered_) -
      reinterpret_cast<char*>(&_impl_.position_)) + sizeof(_impl_.triggered_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SystemState_Measurement::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 0, 0, 2> SystemState_Measurement::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SystemState_Measurement_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double position = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.position_)}},
    // double velocity = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.velocity_)}},
    // double acceleration = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.acceleration_)}},
    // double voltage = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.voltage_)}},
    // double current = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.current_)}},
    // bool active = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SystemState_Measurement, _impl_.active_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.active_)}},
    // bool triggered = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SystemState_Measurement, _impl_.triggered_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.triggered_)}},
    // double power = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.power_)}},
    // double energy = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.energy_)}},
    // double pressure = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.pressure_)}},
    // double jerk = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 63, 0, PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.jerk_)}},
    // double temperature = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 63, 0, PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.temperature_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // double position = 1;
    {PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.position_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double velocity = 2;
    {PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.velocity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double acceleration = 3;
    {PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.acceleration_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double voltage = 4;
    {PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.voltage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double current = 5;
    {PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.current_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // bool active = 6;
    {PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.active_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool triggered = 7;
    {PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.triggered_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // double power = 8;
    {PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.power_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double energy = 9;
    {PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.energy_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double pressure = 10;
    {PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.pressure_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double jerk = 11;
    {PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.jerk_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double temperature = 12;
    {PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.temperature_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SystemState_Measurement::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLIPPY.control.SystemState.Measurement)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double position = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_position = this->_internal_position();
  ::uint64_t raw_position;
  memcpy(&raw_position, &tmp_position, sizeof(tmp_position));
  if (raw_position != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_position(), target);
  }

  // double velocity = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_velocity = this->_internal_velocity();
  ::uint64_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_velocity(), target);
  }

  // double acceleration = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_acceleration = this->_internal_acceleration();
  ::uint64_t raw_acceleration;
  memcpy(&raw_acceleration, &tmp_acceleration, sizeof(tmp_acceleration));
  if (raw_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_acceleration(), target);
  }

  // double voltage = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_voltage = this->_internal_voltage();
  ::uint64_t raw_voltage;
  memcpy(&raw_voltage, &tmp_voltage, sizeof(tmp_voltage));
  if (raw_voltage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_voltage(), target);
  }

  // double current = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_current = this->_internal_current();
  ::uint64_t raw_current;
  memcpy(&raw_current, &tmp_current, sizeof(tmp_current));
  if (raw_current != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_current(), target);
  }

  // bool active = 6;
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_active(), target);
  }

  // bool triggered = 7;
  if (this->_internal_triggered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_triggered(), target);
  }

  // double power = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_power = this->_internal_power();
  ::uint64_t raw_power;
  memcpy(&raw_power, &tmp_power, sizeof(tmp_power));
  if (raw_power != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_power(), target);
  }

  // double energy = 9;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_energy = this->_internal_energy();
  ::uint64_t raw_energy;
  memcpy(&raw_energy, &tmp_energy, sizeof(tmp_energy));
  if (raw_energy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_energy(), target);
  }

  // double pressure = 10;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pressure = this->_internal_pressure();
  ::uint64_t raw_pressure;
  memcpy(&raw_pressure, &tmp_pressure, sizeof(tmp_pressure));
  if (raw_pressure != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_pressure(), target);
  }

  // double jerk = 11;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_jerk = this->_internal_jerk();
  ::uint64_t raw_jerk;
  memcpy(&raw_jerk, &tmp_jerk, sizeof(tmp_jerk));
  if (raw_jerk != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        11, this->_internal_jerk(), target);
  }

  // double temperature = 12;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_temperature = this->_internal_temperature();
  ::uint64_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        12, this->_internal_temperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLIPPY.control.SystemState.Measurement)
  return target;
}

::size_t SystemState_Measurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLIPPY.control.SystemState.Measurement)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double position = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_position = this->_internal_position();
  ::uint64_t raw_position;
  memcpy(&raw_position, &tmp_position, sizeof(tmp_position));
  if (raw_position != 0) {
    total_size += 9;
  }

  // double velocity = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_velocity = this->_internal_velocity();
  ::uint64_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    total_size += 9;
  }

  // double acceleration = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_acceleration = this->_internal_acceleration();
  ::uint64_t raw_acceleration;
  memcpy(&raw_acceleration, &tmp_acceleration, sizeof(tmp_acceleration));
  if (raw_acceleration != 0) {
    total_size += 9;
  }

  // double voltage = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_voltage = this->_internal_voltage();
  ::uint64_t raw_voltage;
  memcpy(&raw_voltage, &tmp_voltage, sizeof(tmp_voltage));
  if (raw_voltage != 0) {
    total_size += 9;
  }

  // double current = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_current = this->_internal_current();
  ::uint64_t raw_current;
  memcpy(&raw_current, &tmp_current, sizeof(tmp_current));
  if (raw_current != 0) {
    total_size += 9;
  }

  // double power = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_power = this->_internal_power();
  ::uint64_t raw_power;
  memcpy(&raw_power, &tmp_power, sizeof(tmp_power));
  if (raw_power != 0) {
    total_size += 9;
  }

  // double energy = 9;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_energy = this->_internal_energy();
  ::uint64_t raw_energy;
  memcpy(&raw_energy, &tmp_energy, sizeof(tmp_energy));
  if (raw_energy != 0) {
    total_size += 9;
  }

  // double pressure = 10;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pressure = this->_internal_pressure();
  ::uint64_t raw_pressure;
  memcpy(&raw_pressure, &tmp_pressure, sizeof(tmp_pressure));
  if (raw_pressure != 0) {
    total_size += 9;
  }

  // double jerk = 11;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_jerk = this->_internal_jerk();
  ::uint64_t raw_jerk;
  memcpy(&raw_jerk, &tmp_jerk, sizeof(tmp_jerk));
  if (raw_jerk != 0) {
    total_size += 9;
  }

  // double temperature = 12;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_temperature = this->_internal_temperature();
  ::uint64_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    total_size += 9;
  }

  // bool active = 6;
  if (this->_internal_active() != 0) {
    total_size += 2;
  }

  // bool triggered = 7;
  if (this->_internal_triggered() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SystemState_Measurement::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SystemState_Measurement::MergeImpl
};
const ::google::protobuf::Message::ClassData*SystemState_Measurement::GetClassData() const { return &_class_data_; }


void SystemState_Measurement::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SystemState_Measurement*>(&to_msg);
  auto& from = static_cast<const SystemState_Measurement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLIPPY.control.SystemState.Measurement)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_position = from._internal_position();
  ::uint64_t raw_position;
  memcpy(&raw_position, &tmp_position, sizeof(tmp_position));
  if (raw_position != 0) {
    _this->_internal_set_position(from._internal_position());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_velocity = from._internal_velocity();
  ::uint64_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    _this->_internal_set_velocity(from._internal_velocity());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_acceleration = from._internal_acceleration();
  ::uint64_t raw_acceleration;
  memcpy(&raw_acceleration, &tmp_acceleration, sizeof(tmp_acceleration));
  if (raw_acceleration != 0) {
    _this->_internal_set_acceleration(from._internal_acceleration());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_voltage = from._internal_voltage();
  ::uint64_t raw_voltage;
  memcpy(&raw_voltage, &tmp_voltage, sizeof(tmp_voltage));
  if (raw_voltage != 0) {
    _this->_internal_set_voltage(from._internal_voltage());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_current = from._internal_current();
  ::uint64_t raw_current;
  memcpy(&raw_current, &tmp_current, sizeof(tmp_current));
  if (raw_current != 0) {
    _this->_internal_set_current(from._internal_current());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_power = from._internal_power();
  ::uint64_t raw_power;
  memcpy(&raw_power, &tmp_power, sizeof(tmp_power));
  if (raw_power != 0) {
    _this->_internal_set_power(from._internal_power());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_energy = from._internal_energy();
  ::uint64_t raw_energy;
  memcpy(&raw_energy, &tmp_energy, sizeof(tmp_energy));
  if (raw_energy != 0) {
    _this->_internal_set_energy(from._internal_energy());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_pressure = from._internal_pressure();
  ::uint64_t raw_pressure;
  memcpy(&raw_pressure, &tmp_pressure, sizeof(tmp_pressure));
  if (raw_pressure != 0) {
    _this->_internal_set_pressure(from._internal_pressure());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_jerk = from._internal_jerk();
  ::uint64_t raw_jerk;
  memcpy(&raw_jerk, &tmp_jerk, sizeof(tmp_jerk));
  if (raw_jerk != 0) {
    _this->_internal_set_jerk(from._internal_jerk());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_temperature = from._internal_temperature();
  ::uint64_t raw_temperature;
  memcpy(&raw_temperature, &tmp_temperature, sizeof(tmp_temperature));
  if (raw_temperature != 0) {
    _this->_internal_set_temperature(from._internal_temperature());
  }
  if (from._internal_active() != 0) {
    _this->_internal_set_active(from._internal_active());
  }
  if (from._internal_triggered() != 0) {
    _this->_internal_set_triggered(from._internal_triggered());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SystemState_Measurement::CopyFrom(const SystemState_Measurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLIPPY.control.SystemState.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SystemState_Measurement::IsInitialized() const {
  return true;
}

void SystemState_Measurement::InternalSwap(SystemState_Measurement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.triggered_)
      + sizeof(SystemState_Measurement::_impl_.triggered_)
      - PROTOBUF_FIELD_OFFSET(SystemState_Measurement, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata SystemState_Measurement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SystemState_2eproto_getter, &descriptor_table_SystemState_2eproto_once,
      file_level_metadata_SystemState_2eproto[2]);
}
// ===================================================================

class SystemState::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SystemState, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& timestamp(const SystemState* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CLIPPY::control::SystemState_Measurement& state(const SystemState* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CLIPPY::control::ControlGains& gains(const SystemState* msg);
  static void set_has_gains(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::google::protobuf::Timestamp& SystemState::_Internal::timestamp(const SystemState* msg) {
  return *msg->_impl_.timestamp_;
}
const ::CLIPPY::control::SystemState_Measurement& SystemState::_Internal::state(const SystemState* msg) {
  return *msg->_impl_.state_;
}
const ::CLIPPY::control::ControlGains& SystemState::_Internal::gains(const SystemState* msg) {
  return *msg->_impl_.gains_;
}
void SystemState::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SystemState::clear_gains() {
  if (_impl_.gains_ != nullptr) _impl_.gains_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
SystemState::SystemState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CLIPPY.control.SystemState)
}
SystemState::SystemState(const SystemState& from) : ::google::protobuf::Message() {
  SystemState* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.system_id_){},
      decltype(_impl_.timestamp_){nullptr},
      decltype(_impl_.state_){nullptr},
      decltype(_impl_.gains_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.system_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.system_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_system_id().empty()) {
    _this->_impl_.system_id_.Set(from._internal_system_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ = new ::google::protobuf::Timestamp(*from._impl_.timestamp_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.state_ = new ::CLIPPY::control::SystemState_Measurement(*from._impl_.state_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.gains_ = new ::CLIPPY::control::ControlGains(*from._impl_.gains_);
  }

  // @@protoc_insertion_point(copy_constructor:CLIPPY.control.SystemState)
}
inline void SystemState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.system_id_){},
      decltype(_impl_.timestamp_){nullptr},
      decltype(_impl_.state_){nullptr},
      decltype(_impl_.gains_){nullptr},
  };
  _impl_.system_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.system_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
SystemState::~SystemState() {
  // @@protoc_insertion_point(destructor:CLIPPY.control.SystemState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SystemState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.system_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.state_;
  if (this != internal_default_instance()) delete _impl_.gains_;
}
void SystemState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SystemState::Clear() {
// @@protoc_insertion_point(message_clear_start:CLIPPY.control.SystemState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.system_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.state_ != nullptr);
      _impl_.state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.gains_ != nullptr);
      _impl_.gains_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SystemState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 44, 2> SystemState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SystemState, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SystemState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .CLIPPY.control.ControlGains gains = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(SystemState, _impl_.gains_)}},
    // .google.protobuf.Timestamp timestamp = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SystemState, _impl_.timestamp_)}},
    // string system_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SystemState, _impl_.system_id_)}},
    // .CLIPPY.control.SystemState.Measurement state = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(SystemState, _impl_.state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(SystemState, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string system_id = 2;
    {PROTOBUF_FIELD_OFFSET(SystemState, _impl_.system_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .CLIPPY.control.SystemState.Measurement state = 3;
    {PROTOBUF_FIELD_OFFSET(SystemState, _impl_.state_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .CLIPPY.control.ControlGains gains = 4;
    {PROTOBUF_FIELD_OFFSET(SystemState, _impl_.gains_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::CLIPPY::control::SystemState_Measurement>()},
    {::_pbi::TcParser::GetTable<::CLIPPY::control::ControlGains>()},
  }}, {{
    "\32\0\11\0\0\0\0\0"
    "CLIPPY.control.SystemState"
    "system_id"
  }},
};

::uint8_t* SystemState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLIPPY.control.SystemState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string system_id = 2;
  if (!this->_internal_system_id().empty()) {
    const std::string& _s = this->_internal_system_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "CLIPPY.control.SystemState.system_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .CLIPPY.control.SystemState.Measurement state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  // .CLIPPY.control.ControlGains gains = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::gains(this),
        _Internal::gains(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLIPPY.control.SystemState)
  return target;
}

::size_t SystemState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLIPPY.control.SystemState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string system_id = 2;
  if (!this->_internal_system_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_system_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .google.protobuf.Timestamp timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_);
    }

    // .CLIPPY.control.SystemState.Measurement state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.state_);
    }

    // .CLIPPY.control.ControlGains gains = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.gains_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SystemState::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SystemState::MergeImpl
};
const ::google::protobuf::Message::ClassData*SystemState::GetClassData() const { return &_class_data_; }


void SystemState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SystemState*>(&to_msg);
  auto& from = static_cast<const SystemState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLIPPY.control.SystemState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_system_id().empty()) {
    _this->_internal_set_system_id(from._internal_system_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_state()->::CLIPPY::control::SystemState_Measurement::MergeFrom(
          from._internal_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_gains()->::CLIPPY::control::ControlGains::MergeFrom(
          from._internal_gains());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SystemState::CopyFrom(const SystemState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLIPPY.control.SystemState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SystemState::IsInitialized() const {
  return true;
}

void SystemState::InternalSwap(SystemState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.system_id_, lhs_arena,
                                       &other->_impl_.system_id_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemState, _impl_.gains_)
      + sizeof(SystemState::_impl_.gains_)
      - PROTOBUF_FIELD_OFFSET(SystemState, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata SystemState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_SystemState_2eproto_getter, &descriptor_table_SystemState_2eproto_once,
      file_level_metadata_SystemState_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace CLIPPY
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
