// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SystemState.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SystemState_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_SystemState_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "ControlGains.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_SystemState_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_SystemState_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_SystemState_2eproto;
namespace CLIPPY {
namespace control {
class SystemIDs;
struct SystemIDsDefaultTypeInternal;
extern SystemIDsDefaultTypeInternal _SystemIDs_default_instance_;
class SystemState;
struct SystemStateDefaultTypeInternal;
extern SystemStateDefaultTypeInternal _SystemState_default_instance_;
class SystemState_Measurement;
struct SystemState_MeasurementDefaultTypeInternal;
extern SystemState_MeasurementDefaultTypeInternal _SystemState_Measurement_default_instance_;
class SystemTags;
struct SystemTagsDefaultTypeInternal;
extern SystemTagsDefaultTypeInternal _SystemTags_default_instance_;
}  // namespace control
}  // namespace CLIPPY
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace CLIPPY {
namespace control {

// ===================================================================


// -------------------------------------------------------------------

class SystemIDs final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CLIPPY.control.SystemIDs) */ {
 public:
  inline SystemIDs() : SystemIDs(nullptr) {}
  ~SystemIDs() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SystemIDs(::google::protobuf::internal::ConstantInitialized);

  SystemIDs(const SystemIDs& from);
  SystemIDs(SystemIDs&& from) noexcept
    : SystemIDs() {
    *this = ::std::move(from);
  }

  inline SystemIDs& operator=(const SystemIDs& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemIDs& operator=(SystemIDs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemIDs& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemIDs* internal_default_instance() {
    return reinterpret_cast<const SystemIDs*>(
               &_SystemIDs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SystemIDs& a, SystemIDs& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemIDs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemIDs* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemIDs* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemIDs>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SystemIDs& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SystemIDs& from) {
    SystemIDs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemIDs* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CLIPPY.control.SystemIDs";
  }
  protected:
  explicit SystemIDs(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSystemIdsFieldNumber = 1,
  };
  // repeated string system_ids = 1;
  int system_ids_size() const;
  private:
  int _internal_system_ids_size() const;

  public:
  void clear_system_ids() ;
  const std::string& system_ids(int index) const;
  std::string* mutable_system_ids(int index);
  void set_system_ids(int index, const std::string& value);
  void set_system_ids(int index, std::string&& value);
  void set_system_ids(int index, const char* value);
  void set_system_ids(int index, const char* value, std::size_t size);
  void set_system_ids(int index, absl::string_view value);
  std::string* add_system_ids();
  void add_system_ids(const std::string& value);
  void add_system_ids(std::string&& value);
  void add_system_ids(const char* value);
  void add_system_ids(const char* value, std::size_t size);
  void add_system_ids(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& system_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_system_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_system_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_system_ids();

  public:
  // @@protoc_insertion_point(class_scope:CLIPPY.control.SystemIDs)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 43, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> system_ids_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SystemState_2eproto;
};// -------------------------------------------------------------------

class SystemTags final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CLIPPY.control.SystemTags) */ {
 public:
  inline SystemTags() : SystemTags(nullptr) {}
  ~SystemTags() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SystemTags(::google::protobuf::internal::ConstantInitialized);

  SystemTags(const SystemTags& from);
  SystemTags(SystemTags&& from) noexcept
    : SystemTags() {
    *this = ::std::move(from);
  }

  inline SystemTags& operator=(const SystemTags& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemTags& operator=(SystemTags&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemTags& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemTags* internal_default_instance() {
    return reinterpret_cast<const SystemTags*>(
               &_SystemTags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SystemTags& a, SystemTags& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemTags* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemTags* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemTags* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemTags>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SystemTags& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SystemTags& from) {
    SystemTags::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemTags* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CLIPPY.control.SystemTags";
  }
  protected:
  explicit SystemTags(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSystemTagsFieldNumber = 1,
  };
  // repeated string system_tags = 1;
  int system_tags_size() const;
  private:
  int _internal_system_tags_size() const;

  public:
  void clear_system_tags() ;
  const std::string& system_tags(int index) const;
  std::string* mutable_system_tags(int index);
  void set_system_tags(int index, const std::string& value);
  void set_system_tags(int index, std::string&& value);
  void set_system_tags(int index, const char* value);
  void set_system_tags(int index, const char* value, std::size_t size);
  void set_system_tags(int index, absl::string_view value);
  std::string* add_system_tags();
  void add_system_tags(const std::string& value);
  void add_system_tags(std::string&& value);
  void add_system_tags(const char* value);
  void add_system_tags(const char* value, std::size_t size);
  void add_system_tags(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& system_tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_system_tags();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_system_tags() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_system_tags();

  public:
  // @@protoc_insertion_point(class_scope:CLIPPY.control.SystemTags)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 45, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> system_tags_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SystemState_2eproto;
};// -------------------------------------------------------------------

class SystemState_Measurement final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CLIPPY.control.SystemState.Measurement) */ {
 public:
  inline SystemState_Measurement() : SystemState_Measurement(nullptr) {}
  ~SystemState_Measurement() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SystemState_Measurement(::google::protobuf::internal::ConstantInitialized);

  SystemState_Measurement(const SystemState_Measurement& from);
  SystemState_Measurement(SystemState_Measurement&& from) noexcept
    : SystemState_Measurement() {
    *this = ::std::move(from);
  }

  inline SystemState_Measurement& operator=(const SystemState_Measurement& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemState_Measurement& operator=(SystemState_Measurement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemState_Measurement& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemState_Measurement* internal_default_instance() {
    return reinterpret_cast<const SystemState_Measurement*>(
               &_SystemState_Measurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SystemState_Measurement& a, SystemState_Measurement& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemState_Measurement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemState_Measurement* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemState_Measurement* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemState_Measurement>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SystemState_Measurement& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SystemState_Measurement& from) {
    SystemState_Measurement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemState_Measurement* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CLIPPY.control.SystemState.Measurement";
  }
  protected:
  explicit SystemState_Measurement(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kVelocityFieldNumber = 2,
    kAccelerationFieldNumber = 3,
    kVoltageFieldNumber = 4,
    kCurrentFieldNumber = 5,
    kPowerFieldNumber = 8,
    kEnergyFieldNumber = 9,
    kPressureFieldNumber = 10,
    kJerkFieldNumber = 11,
    kTemperatureFieldNumber = 12,
    kActiveFieldNumber = 6,
    kTriggeredFieldNumber = 7,
  };
  // double position = 1;
  void clear_position() ;
  double position() const;
  void set_position(double value);

  private:
  double _internal_position() const;
  void _internal_set_position(double value);

  public:
  // double velocity = 2;
  void clear_velocity() ;
  double velocity() const;
  void set_velocity(double value);

  private:
  double _internal_velocity() const;
  void _internal_set_velocity(double value);

  public:
  // double acceleration = 3;
  void clear_acceleration() ;
  double acceleration() const;
  void set_acceleration(double value);

  private:
  double _internal_acceleration() const;
  void _internal_set_acceleration(double value);

  public:
  // double voltage = 4;
  void clear_voltage() ;
  double voltage() const;
  void set_voltage(double value);

  private:
  double _internal_voltage() const;
  void _internal_set_voltage(double value);

  public:
  // double current = 5;
  void clear_current() ;
  double current() const;
  void set_current(double value);

  private:
  double _internal_current() const;
  void _internal_set_current(double value);

  public:
  // double power = 8;
  void clear_power() ;
  double power() const;
  void set_power(double value);

  private:
  double _internal_power() const;
  void _internal_set_power(double value);

  public:
  // double energy = 9;
  void clear_energy() ;
  double energy() const;
  void set_energy(double value);

  private:
  double _internal_energy() const;
  void _internal_set_energy(double value);

  public:
  // double pressure = 10;
  void clear_pressure() ;
  double pressure() const;
  void set_pressure(double value);

  private:
  double _internal_pressure() const;
  void _internal_set_pressure(double value);

  public:
  // double jerk = 11;
  void clear_jerk() ;
  double jerk() const;
  void set_jerk(double value);

  private:
  double _internal_jerk() const;
  void _internal_set_jerk(double value);

  public:
  // double temperature = 12;
  void clear_temperature() ;
  double temperature() const;
  void set_temperature(double value);

  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);

  public:
  // bool active = 6;
  void clear_active() ;
  bool active() const;
  void set_active(bool value);

  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);

  public:
  // bool triggered = 7;
  void clear_triggered() ;
  bool triggered() const;
  void set_triggered(bool value);

  private:
  bool _internal_triggered() const;
  void _internal_set_triggered(bool value);

  public:
  // @@protoc_insertion_point(class_scope:CLIPPY.control.SystemState.Measurement)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 12, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double position_;
    double velocity_;
    double acceleration_;
    double voltage_;
    double current_;
    double power_;
    double energy_;
    double pressure_;
    double jerk_;
    double temperature_;
    bool active_;
    bool triggered_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SystemState_2eproto;
};// -------------------------------------------------------------------

class SystemState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CLIPPY.control.SystemState) */ {
 public:
  inline SystemState() : SystemState(nullptr) {}
  ~SystemState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SystemState(::google::protobuf::internal::ConstantInitialized);

  SystemState(const SystemState& from);
  SystemState(SystemState&& from) noexcept
    : SystemState() {
    *this = ::std::move(from);
  }

  inline SystemState& operator=(const SystemState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemState& operator=(SystemState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemState* internal_default_instance() {
    return reinterpret_cast<const SystemState*>(
               &_SystemState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SystemState& a, SystemState& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SystemState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SystemState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SystemState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SystemState& from) {
    SystemState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemState* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CLIPPY.control.SystemState";
  }
  protected:
  explicit SystemState(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SystemState_Measurement Measurement;

  // accessors -------------------------------------------------------

  enum : int {
    kSystemIdFieldNumber = 2,
    kTimestampFieldNumber = 1,
    kStateFieldNumber = 3,
    kGainsFieldNumber = 4,
  };
  // string system_id = 2;
  void clear_system_id() ;
  const std::string& system_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_system_id(Arg_&& arg, Args_... args);
  std::string* mutable_system_id();
  PROTOBUF_NODISCARD std::string* release_system_id();
  void set_allocated_system_id(std::string* ptr);

  private:
  const std::string& _internal_system_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_system_id(
      const std::string& value);
  std::string* _internal_mutable_system_id();

  public:
  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // .CLIPPY.control.SystemState.Measurement state = 3;
  bool has_state() const;
  void clear_state() ;
  const ::CLIPPY::control::SystemState_Measurement& state() const;
  PROTOBUF_NODISCARD ::CLIPPY::control::SystemState_Measurement* release_state();
  ::CLIPPY::control::SystemState_Measurement* mutable_state();
  void set_allocated_state(::CLIPPY::control::SystemState_Measurement* value);
  void unsafe_arena_set_allocated_state(::CLIPPY::control::SystemState_Measurement* value);
  ::CLIPPY::control::SystemState_Measurement* unsafe_arena_release_state();

  private:
  const ::CLIPPY::control::SystemState_Measurement& _internal_state() const;
  ::CLIPPY::control::SystemState_Measurement* _internal_mutable_state();

  public:
  // .CLIPPY.control.ControlGains gains = 4;
  bool has_gains() const;
  void clear_gains() ;
  const ::CLIPPY::control::ControlGains& gains() const;
  PROTOBUF_NODISCARD ::CLIPPY::control::ControlGains* release_gains();
  ::CLIPPY::control::ControlGains* mutable_gains();
  void set_allocated_gains(::CLIPPY::control::ControlGains* value);
  void unsafe_arena_set_allocated_gains(::CLIPPY::control::ControlGains* value);
  ::CLIPPY::control::ControlGains* unsafe_arena_release_gains();

  private:
  const ::CLIPPY::control::ControlGains& _internal_gains() const;
  ::CLIPPY::control::ControlGains* _internal_mutable_gains();

  public:
  // @@protoc_insertion_point(class_scope:CLIPPY.control.SystemState)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 3, 44, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr system_id_;
    ::google::protobuf::Timestamp* timestamp_;
    ::CLIPPY::control::SystemState_Measurement* state_;
    ::CLIPPY::control::ControlGains* gains_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_SystemState_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SystemIDs

// repeated string system_ids = 1;
inline int SystemIDs::_internal_system_ids_size() const {
  return _internal_system_ids().size();
}
inline int SystemIDs::system_ids_size() const {
  return _internal_system_ids_size();
}
inline void SystemIDs::clear_system_ids() {
  _internal_mutable_system_ids()->Clear();
}
inline std::string* SystemIDs::add_system_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_system_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:CLIPPY.control.SystemIDs.system_ids)
  return _s;
}
inline const std::string& SystemIDs::system_ids(int index) const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemIDs.system_ids)
  return _internal_system_ids().Get(index);
}
inline std::string* SystemIDs::mutable_system_ids(int index) {
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.SystemIDs.system_ids)
  return _internal_mutable_system_ids()->Mutable(index);
}
inline void SystemIDs::set_system_ids(int index, const std::string& value) {
  _internal_mutable_system_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.SystemIDs.system_ids)
}
inline void SystemIDs::set_system_ids(int index, std::string&& value) {
  _internal_mutable_system_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CLIPPY.control.SystemIDs.system_ids)
}
inline void SystemIDs::set_system_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_system_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CLIPPY.control.SystemIDs.system_ids)
}
inline void SystemIDs::set_system_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_system_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLIPPY.control.SystemIDs.system_ids)
}
inline void SystemIDs::set_system_ids(int index, absl::string_view value) {
  _internal_mutable_system_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:CLIPPY.control.SystemIDs.system_ids)
}
inline void SystemIDs::add_system_ids(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_system_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:CLIPPY.control.SystemIDs.system_ids)
}
inline void SystemIDs::add_system_ids(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_system_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:CLIPPY.control.SystemIDs.system_ids)
}
inline void SystemIDs::add_system_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_system_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CLIPPY.control.SystemIDs.system_ids)
}
inline void SystemIDs::add_system_ids(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_system_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CLIPPY.control.SystemIDs.system_ids)
}
inline void SystemIDs::add_system_ids(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_system_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:CLIPPY.control.SystemIDs.system_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SystemIDs::system_ids() const {
  // @@protoc_insertion_point(field_list:CLIPPY.control.SystemIDs.system_ids)
  return _internal_system_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* SystemIDs::mutable_system_ids() {
  // @@protoc_insertion_point(field_mutable_list:CLIPPY.control.SystemIDs.system_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_system_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SystemIDs::_internal_system_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.system_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SystemIDs::_internal_mutable_system_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.system_ids_;
}

// -------------------------------------------------------------------

// SystemTags

// repeated string system_tags = 1;
inline int SystemTags::_internal_system_tags_size() const {
  return _internal_system_tags().size();
}
inline int SystemTags::system_tags_size() const {
  return _internal_system_tags_size();
}
inline void SystemTags::clear_system_tags() {
  _internal_mutable_system_tags()->Clear();
}
inline std::string* SystemTags::add_system_tags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_system_tags()->Add();
  // @@protoc_insertion_point(field_add_mutable:CLIPPY.control.SystemTags.system_tags)
  return _s;
}
inline const std::string& SystemTags::system_tags(int index) const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemTags.system_tags)
  return _internal_system_tags().Get(index);
}
inline std::string* SystemTags::mutable_system_tags(int index) {
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.SystemTags.system_tags)
  return _internal_mutable_system_tags()->Mutable(index);
}
inline void SystemTags::set_system_tags(int index, const std::string& value) {
  _internal_mutable_system_tags()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.SystemTags.system_tags)
}
inline void SystemTags::set_system_tags(int index, std::string&& value) {
  _internal_mutable_system_tags()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:CLIPPY.control.SystemTags.system_tags)
}
inline void SystemTags::set_system_tags(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_system_tags()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CLIPPY.control.SystemTags.system_tags)
}
inline void SystemTags::set_system_tags(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_system_tags()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CLIPPY.control.SystemTags.system_tags)
}
inline void SystemTags::set_system_tags(int index, absl::string_view value) {
  _internal_mutable_system_tags()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:CLIPPY.control.SystemTags.system_tags)
}
inline void SystemTags::add_system_tags(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_system_tags()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:CLIPPY.control.SystemTags.system_tags)
}
inline void SystemTags::add_system_tags(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_system_tags()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:CLIPPY.control.SystemTags.system_tags)
}
inline void SystemTags::add_system_tags(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_system_tags()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CLIPPY.control.SystemTags.system_tags)
}
inline void SystemTags::add_system_tags(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_system_tags()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CLIPPY.control.SystemTags.system_tags)
}
inline void SystemTags::add_system_tags(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_system_tags()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:CLIPPY.control.SystemTags.system_tags)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SystemTags::system_tags() const {
  // @@protoc_insertion_point(field_list:CLIPPY.control.SystemTags.system_tags)
  return _internal_system_tags();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* SystemTags::mutable_system_tags() {
  // @@protoc_insertion_point(field_mutable_list:CLIPPY.control.SystemTags.system_tags)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_system_tags();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SystemTags::_internal_system_tags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.system_tags_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SystemTags::_internal_mutable_system_tags() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.system_tags_;
}

// -------------------------------------------------------------------

// SystemState_Measurement

// double position = 1;
inline void SystemState_Measurement::clear_position() {
  _impl_.position_ = 0;
}
inline double SystemState_Measurement::position() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemState.Measurement.position)
  return _internal_position();
}
inline void SystemState_Measurement::set_position(double value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.SystemState.Measurement.position)
}
inline double SystemState_Measurement::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.position_;
}
inline void SystemState_Measurement::_internal_set_position(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.position_ = value;
}

// double velocity = 2;
inline void SystemState_Measurement::clear_velocity() {
  _impl_.velocity_ = 0;
}
inline double SystemState_Measurement::velocity() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemState.Measurement.velocity)
  return _internal_velocity();
}
inline void SystemState_Measurement::set_velocity(double value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.SystemState.Measurement.velocity)
}
inline double SystemState_Measurement::_internal_velocity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.velocity_;
}
inline void SystemState_Measurement::_internal_set_velocity(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.velocity_ = value;
}

// double acceleration = 3;
inline void SystemState_Measurement::clear_acceleration() {
  _impl_.acceleration_ = 0;
}
inline double SystemState_Measurement::acceleration() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemState.Measurement.acceleration)
  return _internal_acceleration();
}
inline void SystemState_Measurement::set_acceleration(double value) {
  _internal_set_acceleration(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.SystemState.Measurement.acceleration)
}
inline double SystemState_Measurement::_internal_acceleration() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.acceleration_;
}
inline void SystemState_Measurement::_internal_set_acceleration(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.acceleration_ = value;
}

// double voltage = 4;
inline void SystemState_Measurement::clear_voltage() {
  _impl_.voltage_ = 0;
}
inline double SystemState_Measurement::voltage() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemState.Measurement.voltage)
  return _internal_voltage();
}
inline void SystemState_Measurement::set_voltage(double value) {
  _internal_set_voltage(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.SystemState.Measurement.voltage)
}
inline double SystemState_Measurement::_internal_voltage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.voltage_;
}
inline void SystemState_Measurement::_internal_set_voltage(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.voltage_ = value;
}

// double current = 5;
inline void SystemState_Measurement::clear_current() {
  _impl_.current_ = 0;
}
inline double SystemState_Measurement::current() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemState.Measurement.current)
  return _internal_current();
}
inline void SystemState_Measurement::set_current(double value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.SystemState.Measurement.current)
}
inline double SystemState_Measurement::_internal_current() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.current_;
}
inline void SystemState_Measurement::_internal_set_current(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.current_ = value;
}

// bool active = 6;
inline void SystemState_Measurement::clear_active() {
  _impl_.active_ = false;
}
inline bool SystemState_Measurement::active() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemState.Measurement.active)
  return _internal_active();
}
inline void SystemState_Measurement::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.SystemState.Measurement.active)
}
inline bool SystemState_Measurement::_internal_active() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.active_;
}
inline void SystemState_Measurement::_internal_set_active(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.active_ = value;
}

// bool triggered = 7;
inline void SystemState_Measurement::clear_triggered() {
  _impl_.triggered_ = false;
}
inline bool SystemState_Measurement::triggered() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemState.Measurement.triggered)
  return _internal_triggered();
}
inline void SystemState_Measurement::set_triggered(bool value) {
  _internal_set_triggered(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.SystemState.Measurement.triggered)
}
inline bool SystemState_Measurement::_internal_triggered() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.triggered_;
}
inline void SystemState_Measurement::_internal_set_triggered(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.triggered_ = value;
}

// double power = 8;
inline void SystemState_Measurement::clear_power() {
  _impl_.power_ = 0;
}
inline double SystemState_Measurement::power() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemState.Measurement.power)
  return _internal_power();
}
inline void SystemState_Measurement::set_power(double value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.SystemState.Measurement.power)
}
inline double SystemState_Measurement::_internal_power() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.power_;
}
inline void SystemState_Measurement::_internal_set_power(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.power_ = value;
}

// double energy = 9;
inline void SystemState_Measurement::clear_energy() {
  _impl_.energy_ = 0;
}
inline double SystemState_Measurement::energy() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemState.Measurement.energy)
  return _internal_energy();
}
inline void SystemState_Measurement::set_energy(double value) {
  _internal_set_energy(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.SystemState.Measurement.energy)
}
inline double SystemState_Measurement::_internal_energy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.energy_;
}
inline void SystemState_Measurement::_internal_set_energy(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.energy_ = value;
}

// double pressure = 10;
inline void SystemState_Measurement::clear_pressure() {
  _impl_.pressure_ = 0;
}
inline double SystemState_Measurement::pressure() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemState.Measurement.pressure)
  return _internal_pressure();
}
inline void SystemState_Measurement::set_pressure(double value) {
  _internal_set_pressure(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.SystemState.Measurement.pressure)
}
inline double SystemState_Measurement::_internal_pressure() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pressure_;
}
inline void SystemState_Measurement::_internal_set_pressure(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pressure_ = value;
}

// double jerk = 11;
inline void SystemState_Measurement::clear_jerk() {
  _impl_.jerk_ = 0;
}
inline double SystemState_Measurement::jerk() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemState.Measurement.jerk)
  return _internal_jerk();
}
inline void SystemState_Measurement::set_jerk(double value) {
  _internal_set_jerk(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.SystemState.Measurement.jerk)
}
inline double SystemState_Measurement::_internal_jerk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.jerk_;
}
inline void SystemState_Measurement::_internal_set_jerk(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.jerk_ = value;
}

// double temperature = 12;
inline void SystemState_Measurement::clear_temperature() {
  _impl_.temperature_ = 0;
}
inline double SystemState_Measurement::temperature() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemState.Measurement.temperature)
  return _internal_temperature();
}
inline void SystemState_Measurement::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.SystemState.Measurement.temperature)
}
inline double SystemState_Measurement::_internal_temperature() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.temperature_;
}
inline void SystemState_Measurement::_internal_set_temperature(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.temperature_ = value;
}

// -------------------------------------------------------------------

// SystemState

// .google.protobuf.Timestamp timestamp = 1;
inline bool SystemState::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& SystemState::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& SystemState::timestamp() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemState.timestamp)
  return _internal_timestamp();
}
inline void SystemState::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CLIPPY.control.SystemState.timestamp)
}
inline ::google::protobuf::Timestamp* SystemState::release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* SystemState::unsafe_arena_release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.SystemState.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* SystemState::_internal_mutable_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* SystemState::mutable_timestamp() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.SystemState.timestamp)
  return _msg;
}
inline void SystemState::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.SystemState.timestamp)
}

// string system_id = 2;
inline void SystemState::clear_system_id() {
  _impl_.system_id_.ClearToEmpty();
}
inline const std::string& SystemState::system_id() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemState.system_id)
  return _internal_system_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SystemState::set_system_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.system_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CLIPPY.control.SystemState.system_id)
}
inline std::string* SystemState::mutable_system_id() {
  std::string* _s = _internal_mutable_system_id();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.SystemState.system_id)
  return _s;
}
inline const std::string& SystemState::_internal_system_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.system_id_.Get();
}
inline void SystemState::_internal_set_system_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.system_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SystemState::_internal_mutable_system_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.system_id_.Mutable( GetArenaForAllocation());
}
inline std::string* SystemState::release_system_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.SystemState.system_id)
  return _impl_.system_id_.Release();
}
inline void SystemState::set_allocated_system_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.system_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.system_id_.IsDefault()) {
          _impl_.system_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.SystemState.system_id)
}

// .CLIPPY.control.SystemState.Measurement state = 3;
inline bool SystemState::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline void SystemState::clear_state() {
  if (_impl_.state_ != nullptr) _impl_.state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CLIPPY::control::SystemState_Measurement& SystemState::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::CLIPPY::control::SystemState_Measurement* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::CLIPPY::control::SystemState_Measurement&>(::CLIPPY::control::_SystemState_Measurement_default_instance_);
}
inline const ::CLIPPY::control::SystemState_Measurement& SystemState::state() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemState.state)
  return _internal_state();
}
inline void SystemState::unsafe_arena_set_allocated_state(::CLIPPY::control::SystemState_Measurement* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = reinterpret_cast<::CLIPPY::control::SystemState_Measurement*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CLIPPY.control.SystemState.state)
}
inline ::CLIPPY::control::SystemState_Measurement* SystemState::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CLIPPY::control::SystemState_Measurement* released = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::CLIPPY::control::SystemState_Measurement* SystemState::unsafe_arena_release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.SystemState.state)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CLIPPY::control::SystemState_Measurement* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::CLIPPY::control::SystemState_Measurement* SystemState::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::CLIPPY::control::SystemState_Measurement>(GetArenaForAllocation());
    _impl_.state_ = reinterpret_cast<::CLIPPY::control::SystemState_Measurement*>(p);
  }
  return _impl_.state_;
}
inline ::CLIPPY::control::SystemState_Measurement* SystemState::mutable_state() {
  ::CLIPPY::control::SystemState_Measurement* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.SystemState.state)
  return _msg;
}
inline void SystemState::set_allocated_state(::CLIPPY::control::SystemState_Measurement* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::CLIPPY::control::SystemState_Measurement*>(_impl_.state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::CLIPPY::control::SystemState_Measurement*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.state_ = reinterpret_cast<::CLIPPY::control::SystemState_Measurement*>(value);
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.SystemState.state)
}

// .CLIPPY.control.ControlGains gains = 4;
inline bool SystemState::has_gains() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gains_ != nullptr);
  return value;
}
inline const ::CLIPPY::control::ControlGains& SystemState::_internal_gains() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::CLIPPY::control::ControlGains* p = _impl_.gains_;
  return p != nullptr ? *p : reinterpret_cast<const ::CLIPPY::control::ControlGains&>(::CLIPPY::control::_ControlGains_default_instance_);
}
inline const ::CLIPPY::control::ControlGains& SystemState::gains() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.SystemState.gains)
  return _internal_gains();
}
inline void SystemState::unsafe_arena_set_allocated_gains(::CLIPPY::control::ControlGains* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gains_);
  }
  _impl_.gains_ = reinterpret_cast<::CLIPPY::control::ControlGains*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CLIPPY.control.SystemState.gains)
}
inline ::CLIPPY::control::ControlGains* SystemState::release_gains() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CLIPPY::control::ControlGains* released = _impl_.gains_;
  _impl_.gains_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::CLIPPY::control::ControlGains* SystemState::unsafe_arena_release_gains() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.SystemState.gains)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CLIPPY::control::ControlGains* temp = _impl_.gains_;
  _impl_.gains_ = nullptr;
  return temp;
}
inline ::CLIPPY::control::ControlGains* SystemState::_internal_mutable_gains() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.gains_ == nullptr) {
    auto* p = CreateMaybeMessage<::CLIPPY::control::ControlGains>(GetArenaForAllocation());
    _impl_.gains_ = reinterpret_cast<::CLIPPY::control::ControlGains*>(p);
  }
  return _impl_.gains_;
}
inline ::CLIPPY::control::ControlGains* SystemState::mutable_gains() {
  ::CLIPPY::control::ControlGains* _msg = _internal_mutable_gains();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.SystemState.gains)
  return _msg;
}
inline void SystemState::set_allocated_gains(::CLIPPY::control::ControlGains* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gains_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.gains_ = reinterpret_cast<::CLIPPY::control::ControlGains*>(value);
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.SystemState.gains)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace CLIPPY


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_SystemState_2eproto_2epb_2eh
