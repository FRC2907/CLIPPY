// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Waypoint.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Waypoint_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Waypoint_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "Urgency.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Waypoint_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Waypoint_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Waypoint_2eproto;
namespace CLIPPY {
namespace control {
class Waypoint;
struct WaypointDefaultTypeInternal;
extern WaypointDefaultTypeInternal _Waypoint_default_instance_;
}  // namespace control
}  // namespace CLIPPY
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace CLIPPY {
namespace control {
enum WaypointType : int {
  UNKNOWN = 0,
  NEUTRAL = 1,
  OBSTACLE = 2,
  FREE = 3,
  TARGET = 4,
  SELF = 5,
  WaypointType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  WaypointType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool WaypointType_IsValid(int value);
constexpr WaypointType WaypointType_MIN = static_cast<WaypointType>(0);
constexpr WaypointType WaypointType_MAX = static_cast<WaypointType>(5);
constexpr int WaypointType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
WaypointType_descriptor();
template <typename T>
const std::string& WaypointType_Name(T value) {
  static_assert(std::is_same<T, WaypointType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to WaypointType_Name().");
  return WaypointType_Name(static_cast<WaypointType>(value));
}
template <>
inline const std::string& WaypointType_Name(WaypointType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<WaypointType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool WaypointType_Parse(absl::string_view name, WaypointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WaypointType>(
      WaypointType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Waypoint final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CLIPPY.control.Waypoint) */ {
 public:
  inline Waypoint() : Waypoint(nullptr) {}
  ~Waypoint() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Waypoint(::google::protobuf::internal::ConstantInitialized);

  Waypoint(const Waypoint& from);
  Waypoint(Waypoint&& from) noexcept
    : Waypoint() {
    *this = ::std::move(from);
  }

  inline Waypoint& operator=(const Waypoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint& operator=(Waypoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Waypoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const Waypoint* internal_default_instance() {
    return reinterpret_cast<const Waypoint*>(
               &_Waypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Waypoint& a, Waypoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Waypoint* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Waypoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Waypoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Waypoint& from) {
    Waypoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waypoint* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CLIPPY.control.Waypoint";
  }
  protected:
  explicit Waypoint(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kWaypointTypeFieldNumber = 2,
    kUrgencyFieldNumber = 3,
    kXFieldNumber = 7,
    kYFieldNumber = 8,
    kZFieldNumber = 9,
    kTXyFieldNumber = 10,
    kDxFieldNumber = 13,
    kDyFieldNumber = 14,
    kDzFieldNumber = 15,
    kDtXyFieldNumber = 16,
  };
  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // .CLIPPY.control.WaypointType waypoint_type = 2;
  void clear_waypoint_type() ;
  ::CLIPPY::control::WaypointType waypoint_type() const;
  void set_waypoint_type(::CLIPPY::control::WaypointType value);

  private:
  ::CLIPPY::control::WaypointType _internal_waypoint_type() const;
  void _internal_set_waypoint_type(::CLIPPY::control::WaypointType value);

  public:
  // .CLIPPY.control.Urgency urgency = 3;
  void clear_urgency() ;
  ::CLIPPY::control::Urgency urgency() const;
  void set_urgency(::CLIPPY::control::Urgency value);

  private:
  ::CLIPPY::control::Urgency _internal_urgency() const;
  void _internal_set_urgency(::CLIPPY::control::Urgency value);

  public:
  // double x = 7;
  void clear_x() ;
  double x() const;
  void set_x(double value);

  private:
  double _internal_x() const;
  void _internal_set_x(double value);

  public:
  // double y = 8;
  void clear_y() ;
  double y() const;
  void set_y(double value);

  private:
  double _internal_y() const;
  void _internal_set_y(double value);

  public:
  // double z = 9;
  void clear_z() ;
  double z() const;
  void set_z(double value);

  private:
  double _internal_z() const;
  void _internal_set_z(double value);

  public:
  // double t_xy = 10;
  void clear_t_xy() ;
  double t_xy() const;
  void set_t_xy(double value);

  private:
  double _internal_t_xy() const;
  void _internal_set_t_xy(double value);

  public:
  // double dx = 13;
  void clear_dx() ;
  double dx() const;
  void set_dx(double value);

  private:
  double _internal_dx() const;
  void _internal_set_dx(double value);

  public:
  // double dy = 14;
  void clear_dy() ;
  double dy() const;
  void set_dy(double value);

  private:
  double _internal_dy() const;
  void _internal_set_dy(double value);

  public:
  // double dz = 15;
  void clear_dz() ;
  double dz() const;
  void set_dz(double value);

  private:
  double _internal_dz() const;
  void _internal_set_dz(double value);

  public:
  // double dt_xy = 16;
  void clear_dt_xy() ;
  double dt_xy() const;
  void set_dt_xy(double value);

  private:
  double _internal_dt_xy() const;
  void _internal_set_dt_xy(double value);

  public:
  // @@protoc_insertion_point(class_scope:CLIPPY.control.Waypoint)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 11, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Timestamp* timestamp_;
    int waypoint_type_;
    int urgency_;
    double x_;
    double y_;
    double z_;
    double t_xy_;
    double dx_;
    double dy_;
    double dz_;
    double dt_xy_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Waypoint_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Waypoint

// .google.protobuf.Timestamp timestamp = 1;
inline bool Waypoint::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Waypoint::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Waypoint::timestamp() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.Waypoint.timestamp)
  return _internal_timestamp();
}
inline void Waypoint::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CLIPPY.control.Waypoint.timestamp)
}
inline ::google::protobuf::Timestamp* Waypoint::release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Waypoint::unsafe_arena_release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.Waypoint.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Waypoint::_internal_mutable_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* Waypoint::mutable_timestamp() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.Waypoint.timestamp)
  return _msg;
}
inline void Waypoint::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.Waypoint.timestamp)
}

// .CLIPPY.control.WaypointType waypoint_type = 2;
inline void Waypoint::clear_waypoint_type() {
  _impl_.waypoint_type_ = 0;
}
inline ::CLIPPY::control::WaypointType Waypoint::waypoint_type() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.Waypoint.waypoint_type)
  return _internal_waypoint_type();
}
inline void Waypoint::set_waypoint_type(::CLIPPY::control::WaypointType value) {
  _internal_set_waypoint_type(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.Waypoint.waypoint_type)
}
inline ::CLIPPY::control::WaypointType Waypoint::_internal_waypoint_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CLIPPY::control::WaypointType>(_impl_.waypoint_type_);
}
inline void Waypoint::_internal_set_waypoint_type(::CLIPPY::control::WaypointType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.waypoint_type_ = value;
}

// .CLIPPY.control.Urgency urgency = 3;
inline void Waypoint::clear_urgency() {
  _impl_.urgency_ = 0;
}
inline ::CLIPPY::control::Urgency Waypoint::urgency() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.Waypoint.urgency)
  return _internal_urgency();
}
inline void Waypoint::set_urgency(::CLIPPY::control::Urgency value) {
  _internal_set_urgency(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.Waypoint.urgency)
}
inline ::CLIPPY::control::Urgency Waypoint::_internal_urgency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CLIPPY::control::Urgency>(_impl_.urgency_);
}
inline void Waypoint::_internal_set_urgency(::CLIPPY::control::Urgency value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.urgency_ = value;
}

// double x = 7;
inline void Waypoint::clear_x() {
  _impl_.x_ = 0;
}
inline double Waypoint::x() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.Waypoint.x)
  return _internal_x();
}
inline void Waypoint::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.Waypoint.x)
}
inline double Waypoint::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void Waypoint::_internal_set_x(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_ = value;
}

// double y = 8;
inline void Waypoint::clear_y() {
  _impl_.y_ = 0;
}
inline double Waypoint::y() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.Waypoint.y)
  return _internal_y();
}
inline void Waypoint::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.Waypoint.y)
}
inline double Waypoint::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void Waypoint::_internal_set_y(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// double z = 9;
inline void Waypoint::clear_z() {
  _impl_.z_ = 0;
}
inline double Waypoint::z() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.Waypoint.z)
  return _internal_z();
}
inline void Waypoint::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.Waypoint.z)
}
inline double Waypoint::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void Waypoint::_internal_set_z(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_ = value;
}

// double t_xy = 10;
inline void Waypoint::clear_t_xy() {
  _impl_.t_xy_ = 0;
}
inline double Waypoint::t_xy() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.Waypoint.t_xy)
  return _internal_t_xy();
}
inline void Waypoint::set_t_xy(double value) {
  _internal_set_t_xy(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.Waypoint.t_xy)
}
inline double Waypoint::_internal_t_xy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.t_xy_;
}
inline void Waypoint::_internal_set_t_xy(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.t_xy_ = value;
}

// double dx = 13;
inline void Waypoint::clear_dx() {
  _impl_.dx_ = 0;
}
inline double Waypoint::dx() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.Waypoint.dx)
  return _internal_dx();
}
inline void Waypoint::set_dx(double value) {
  _internal_set_dx(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.Waypoint.dx)
}
inline double Waypoint::_internal_dx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dx_;
}
inline void Waypoint::_internal_set_dx(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dx_ = value;
}

// double dy = 14;
inline void Waypoint::clear_dy() {
  _impl_.dy_ = 0;
}
inline double Waypoint::dy() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.Waypoint.dy)
  return _internal_dy();
}
inline void Waypoint::set_dy(double value) {
  _internal_set_dy(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.Waypoint.dy)
}
inline double Waypoint::_internal_dy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dy_;
}
inline void Waypoint::_internal_set_dy(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dy_ = value;
}

// double dz = 15;
inline void Waypoint::clear_dz() {
  _impl_.dz_ = 0;
}
inline double Waypoint::dz() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.Waypoint.dz)
  return _internal_dz();
}
inline void Waypoint::set_dz(double value) {
  _internal_set_dz(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.Waypoint.dz)
}
inline double Waypoint::_internal_dz() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dz_;
}
inline void Waypoint::_internal_set_dz(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dz_ = value;
}

// double dt_xy = 16;
inline void Waypoint::clear_dt_xy() {
  _impl_.dt_xy_ = 0;
}
inline double Waypoint::dt_xy() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.Waypoint.dt_xy)
  return _internal_dt_xy();
}
inline void Waypoint::set_dt_xy(double value) {
  _internal_set_dt_xy(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.Waypoint.dt_xy)
}
inline double Waypoint::_internal_dt_xy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dt_xy_;
}
inline void Waypoint::_internal_set_dt_xy(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dt_xy_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace CLIPPY


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::CLIPPY::control::WaypointType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::CLIPPY::control::WaypointType>() {
  return ::CLIPPY::control::WaypointType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Waypoint_2eproto_2epb_2eh
