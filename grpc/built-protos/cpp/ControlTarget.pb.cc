// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ControlTarget.proto

#include "ControlTarget.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace CLIPPY {
namespace control {
        template <typename>
PROTOBUF_CONSTEXPR ControlTarget::ControlTarget(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.system_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.timestamp_)*/ nullptr,
      /*decltype(_impl_.target_)*/ {},
      /*decltype(_impl_._oneof_case_)*/ {},
    } {}
struct ControlTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlTargetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlTargetDefaultTypeInternal() {}
  union {
    ControlTarget _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlTargetDefaultTypeInternal _ControlTarget_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR MultiSystemControlTarget::MultiSystemControlTarget(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.targets_)*/ {},
      /*decltype(_impl_.timestamp_)*/ nullptr,
    } {}
struct MultiSystemControlTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiSystemControlTargetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiSystemControlTargetDefaultTypeInternal() {}
  union {
    MultiSystemControlTarget _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiSystemControlTargetDefaultTypeInternal _MultiSystemControlTarget_default_instance_;
}  // namespace control
}  // namespace CLIPPY
static ::_pb::Metadata file_level_metadata_ControlTarget_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ControlTarget_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ControlTarget_2eproto = nullptr;
const ::uint32_t TableStruct_ControlTarget_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlTarget, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlTarget, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlTarget, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlTarget, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlTarget, _impl_.system_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlTarget, _impl_.target_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::MultiSystemControlTarget, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::MultiSystemControlTarget, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::MultiSystemControlTarget, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::MultiSystemControlTarget, _impl_.targets_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 17, -1, sizeof(::CLIPPY::control::ControlTarget)},
        {25, 35, -1, sizeof(::CLIPPY::control::MultiSystemControlTarget)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::CLIPPY::control::_ControlTarget_default_instance_._instance,
    &::CLIPPY::control::_MultiSystemControlTarget_default_instance_._instance,
};
const char descriptor_table_protodef_ControlTarget_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\023ControlTarget.proto\022\016CLIPPY.control\032\037g"
    "oogle/protobuf/timestamp.proto\"\323\001\n\rContr"
    "olTarget\022-\n\ttimestamp\030\001 \001(\0132\032.google.pro"
    "tobuf.Timestamp\022\021\n\tsystem_id\030\002 \001(\t\022\021\n\007vo"
    "ltage\030\007 \001(\001H\000\022\021\n\007current\030\010 \001(\001H\000\022\022\n\010posi"
    "tion\030\t \001(\001H\000\022\022\n\010velocity\030\n \001(\001H\000\022\026\n\014acce"
    "leration\030\013 \001(\001H\000\022\020\n\006active\030\014 \001(\010H\000B\010\n\006ta"
    "rget\"y\n\030MultiSystemControlTarget\022-\n\ttime"
    "stamp\030\001 \001(\0132\032.google.protobuf.Timestamp\022"
    ".\n\007targets\030\003 \003(\0132\035.CLIPPY.control.Contro"
    "lTargetb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ControlTarget_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_ControlTarget_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ControlTarget_2eproto = {
    false,
    false,
    415,
    descriptor_table_protodef_ControlTarget_2eproto,
    "ControlTarget.proto",
    &descriptor_table_ControlTarget_2eproto_once,
    descriptor_table_ControlTarget_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_ControlTarget_2eproto::offsets,
    file_level_metadata_ControlTarget_2eproto,
    file_level_enum_descriptors_ControlTarget_2eproto,
    file_level_service_descriptors_ControlTarget_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ControlTarget_2eproto_getter() {
  return &descriptor_table_ControlTarget_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ControlTarget_2eproto(&descriptor_table_ControlTarget_2eproto);
namespace CLIPPY {
namespace control {
// ===================================================================

class ControlTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlTarget>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ControlTarget, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::ControlTarget, _impl_._oneof_case_);
  static const ::google::protobuf::Timestamp& timestamp(const ControlTarget* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Timestamp& ControlTarget::_Internal::timestamp(const ControlTarget* msg) {
  return *msg->_impl_.timestamp_;
}
void ControlTarget::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ControlTarget::ControlTarget(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CLIPPY.control.ControlTarget)
}
ControlTarget::ControlTarget(const ControlTarget& from) : ::google::protobuf::Message() {
  ControlTarget* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.system_id_){},
      decltype(_impl_.timestamp_){nullptr},
      decltype(_impl_.target_){},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.system_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.system_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_system_id().empty()) {
    _this->_impl_.system_id_.Set(from._internal_system_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ = new ::google::protobuf::Timestamp(*from._impl_.timestamp_);
  }
  clear_has_target();
  switch (from.target_case()) {
    case kVoltage: {
      _this->_internal_set_voltage(from._internal_voltage());
      break;
    }
    case kCurrent: {
      _this->_internal_set_current(from._internal_current());
      break;
    }
    case kPosition: {
      _this->_internal_set_position(from._internal_position());
      break;
    }
    case kVelocity: {
      _this->_internal_set_velocity(from._internal_velocity());
      break;
    }
    case kAcceleration: {
      _this->_internal_set_acceleration(from._internal_acceleration());
      break;
    }
    case kActive: {
      _this->_internal_set_active(from._internal_active());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }

  // @@protoc_insertion_point(copy_constructor:CLIPPY.control.ControlTarget)
}
inline void ControlTarget::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.system_id_){},
      decltype(_impl_.timestamp_){nullptr},
      decltype(_impl_.target_){},
      /*decltype(_impl_._oneof_case_)*/ {},
  };
  _impl_.system_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.system_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_target();
}
ControlTarget::~ControlTarget() {
  // @@protoc_insertion_point(destructor:CLIPPY.control.ControlTarget)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ControlTarget::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.system_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (has_target()) {
    clear_target();
  }
}
void ControlTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlTarget::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:CLIPPY.control.ControlTarget)
  switch (target_case()) {
    case kVoltage: {
      // No need to clear
      break;
    }
    case kCurrent: {
      // No need to clear
      break;
    }
    case kPosition: {
      // No need to clear
      break;
    }
    case kVelocity: {
      // No need to clear
      break;
    }
    case kAcceleration: {
      // No need to clear
      break;
    }
    case kActive: {
      // No need to clear
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TARGET_NOT_SET;
}


PROTOBUF_NOINLINE void ControlTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:CLIPPY.control.ControlTarget)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.system_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  clear_target();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ControlTarget::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 8, 1, 54, 2> ControlTarget::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ControlTarget, _impl_._has_bits_),
    0, // no _extensions_
    12, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963260,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ControlTarget_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string system_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ControlTarget, _impl_.system_id_)}},
    // .google.protobuf.Timestamp timestamp = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ControlTarget, _impl_.timestamp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(ControlTarget, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string system_id = 2;
    {PROTOBUF_FIELD_OFFSET(ControlTarget, _impl_.system_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double voltage = 7;
    {PROTOBUF_FIELD_OFFSET(ControlTarget, _impl_.target_.voltage_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
    // double current = 8;
    {PROTOBUF_FIELD_OFFSET(ControlTarget, _impl_.target_.current_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
    // double position = 9;
    {PROTOBUF_FIELD_OFFSET(ControlTarget, _impl_.target_.position_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
    // double velocity = 10;
    {PROTOBUF_FIELD_OFFSET(ControlTarget, _impl_.target_.velocity_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
    // double acceleration = 11;
    {PROTOBUF_FIELD_OFFSET(ControlTarget, _impl_.target_.acceleration_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
    // bool active = 12;
    {PROTOBUF_FIELD_OFFSET(ControlTarget, _impl_.target_.active_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\34\0\11\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "CLIPPY.control.ControlTarget"
    "system_id"
  }},
};

::uint8_t* ControlTarget::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLIPPY.control.ControlTarget)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string system_id = 2;
  if (!this->_internal_system_id().empty()) {
    const std::string& _s = this->_internal_system_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "CLIPPY.control.ControlTarget.system_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  switch (target_case()) {
    case kVoltage: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          7, this->_internal_voltage(), target);
      break;
    }
    case kCurrent: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          8, this->_internal_current(), target);
      break;
    }
    case kPosition: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          9, this->_internal_position(), target);
      break;
    }
    case kVelocity: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          10, this->_internal_velocity(), target);
      break;
    }
    case kAcceleration: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          11, this->_internal_acceleration(), target);
      break;
    }
    case kActive: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          12, this->_internal_active(), target);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLIPPY.control.ControlTarget)
  return target;
}

::size_t ControlTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLIPPY.control.ControlTarget)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string system_id = 2;
  if (!this->_internal_system_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_system_id());
  }

  // .google.protobuf.Timestamp timestamp = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  switch (target_case()) {
    // double voltage = 7;
    case kVoltage: {
      total_size += 9;
      break;
    }
    // double current = 8;
    case kCurrent: {
      total_size += 9;
      break;
    }
    // double position = 9;
    case kPosition: {
      total_size += 9;
      break;
    }
    // double velocity = 10;
    case kVelocity: {
      total_size += 9;
      break;
    }
    // double acceleration = 11;
    case kAcceleration: {
      total_size += 9;
      break;
    }
    // bool active = 12;
    case kActive: {
      total_size += 2;
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ControlTarget::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    ControlTarget::MergeImpl
};
const ::google::protobuf::Message::ClassData*ControlTarget::GetClassData() const { return &_class_data_; }


void ControlTarget::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ControlTarget*>(&to_msg);
  auto& from = static_cast<const ControlTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLIPPY.control.ControlTarget)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_system_id().empty()) {
    _this->_internal_set_system_id(from._internal_system_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  switch (from.target_case()) {
    case kVoltage: {
      _this->_internal_set_voltage(from._internal_voltage());
      break;
    }
    case kCurrent: {
      _this->_internal_set_current(from._internal_current());
      break;
    }
    case kPosition: {
      _this->_internal_set_position(from._internal_position());
      break;
    }
    case kVelocity: {
      _this->_internal_set_velocity(from._internal_velocity());
      break;
    }
    case kAcceleration: {
      _this->_internal_set_acceleration(from._internal_acceleration());
      break;
    }
    case kActive: {
      _this->_internal_set_active(from._internal_active());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ControlTarget::CopyFrom(const ControlTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLIPPY.control.ControlTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ControlTarget::IsInitialized() const {
  return true;
}

void ControlTarget::InternalSwap(ControlTarget* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.system_id_, lhs_arena,
                                       &other->_impl_.system_id_, rhs_arena);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
  swap(_impl_.target_, other->_impl_.target_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata ControlTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ControlTarget_2eproto_getter, &descriptor_table_ControlTarget_2eproto_once,
      file_level_metadata_ControlTarget_2eproto[0]);
}
// ===================================================================

class MultiSystemControlTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiSystemControlTarget>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MultiSystemControlTarget, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& timestamp(const MultiSystemControlTarget* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Timestamp& MultiSystemControlTarget::_Internal::timestamp(const MultiSystemControlTarget* msg) {
  return *msg->_impl_.timestamp_;
}
void MultiSystemControlTarget::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MultiSystemControlTarget::MultiSystemControlTarget(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CLIPPY.control.MultiSystemControlTarget)
}
MultiSystemControlTarget::MultiSystemControlTarget(const MultiSystemControlTarget& from) : ::google::protobuf::Message() {
  MultiSystemControlTarget* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.targets_){from._impl_.targets_},
      decltype(_impl_.timestamp_){nullptr},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ = new ::google::protobuf::Timestamp(*from._impl_.timestamp_);
  }

  // @@protoc_insertion_point(copy_constructor:CLIPPY.control.MultiSystemControlTarget)
}
inline void MultiSystemControlTarget::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.targets_){arena},
      decltype(_impl_.timestamp_){nullptr},
  };
}
MultiSystemControlTarget::~MultiSystemControlTarget() {
  // @@protoc_insertion_point(destructor:CLIPPY.control.MultiSystemControlTarget)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MultiSystemControlTarget::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.targets_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}
void MultiSystemControlTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void MultiSystemControlTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:CLIPPY.control.MultiSystemControlTarget)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_targets()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* MultiSystemControlTarget::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 2, 2, 0, 2> MultiSystemControlTarget::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MultiSystemControlTarget, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967290,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_MultiSystemControlTarget_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp timestamp = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MultiSystemControlTarget, _impl_.timestamp_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .CLIPPY.control.ControlTarget targets = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(MultiSystemControlTarget, _impl_.targets_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(MultiSystemControlTarget, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .CLIPPY.control.ControlTarget targets = 3;
    {PROTOBUF_FIELD_OFFSET(MultiSystemControlTarget, _impl_.targets_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::CLIPPY::control::ControlTarget>()},
  }}, {{
  }},
};

::uint8_t* MultiSystemControlTarget::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLIPPY.control.MultiSystemControlTarget)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // repeated .CLIPPY.control.ControlTarget targets = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_targets_size()); i < n; i++) {
    const auto& repfield = this->_internal_targets().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLIPPY.control.MultiSystemControlTarget)
  return target;
}

::size_t MultiSystemControlTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLIPPY.control.MultiSystemControlTarget)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CLIPPY.control.ControlTarget targets = 3;
  total_size += 1UL * this->_internal_targets_size();
  for (const auto& msg : this->_internal_targets()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .google.protobuf.Timestamp timestamp = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData MultiSystemControlTarget::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    MultiSystemControlTarget::MergeImpl
};
const ::google::protobuf::Message::ClassData*MultiSystemControlTarget::GetClassData() const { return &_class_data_; }


void MultiSystemControlTarget::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<MultiSystemControlTarget*>(&to_msg);
  auto& from = static_cast<const MultiSystemControlTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLIPPY.control.MultiSystemControlTarget)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_targets()->MergeFrom(from._internal_targets());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MultiSystemControlTarget::CopyFrom(const MultiSystemControlTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLIPPY.control.MultiSystemControlTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool MultiSystemControlTarget::IsInitialized() const {
  return true;
}

void MultiSystemControlTarget::InternalSwap(MultiSystemControlTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.targets_.InternalSwap(&other->_impl_.targets_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::google::protobuf::Metadata MultiSystemControlTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ControlTarget_2eproto_getter, &descriptor_table_ControlTarget_2eproto_once,
      file_level_metadata_ControlTarget_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace CLIPPY
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
