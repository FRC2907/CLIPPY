// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Waypoint.proto

#include "Waypoint.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace CLIPPY {
namespace control {
        template <typename>
PROTOBUF_CONSTEXPR Waypoint::Waypoint(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.timestamp_)*/ nullptr,
      /*decltype(_impl_.waypoint_type_)*/ 0,
      /*decltype(_impl_.urgency_)*/ 0,
      /*decltype(_impl_.x_)*/ 0,
      /*decltype(_impl_.y_)*/ 0,
      /*decltype(_impl_.z_)*/ 0,
      /*decltype(_impl_.t_xy_)*/ 0,
      /*decltype(_impl_.dx_)*/ 0,
      /*decltype(_impl_.dy_)*/ 0,
      /*decltype(_impl_.dz_)*/ 0,
      /*decltype(_impl_.dt_xy_)*/ 0,
    } {}
struct WaypointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaypointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaypointDefaultTypeInternal() {}
  union {
    Waypoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaypointDefaultTypeInternal _Waypoint_default_instance_;
}  // namespace control
}  // namespace CLIPPY
static ::_pb::Metadata file_level_metadata_Waypoint_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Waypoint_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Waypoint_2eproto = nullptr;
const ::uint32_t TableStruct_Waypoint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::Waypoint, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::Waypoint, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::Waypoint, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::Waypoint, _impl_.waypoint_type_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::Waypoint, _impl_.urgency_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::Waypoint, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::Waypoint, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::Waypoint, _impl_.z_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::Waypoint, _impl_.t_xy_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::Waypoint, _impl_.dx_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::Waypoint, _impl_.dy_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::Waypoint, _impl_.dz_),
    PROTOBUF_FIELD_OFFSET(::CLIPPY::control::Waypoint, _impl_.dt_xy_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 19, -1, sizeof(::CLIPPY::control::Waypoint)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::CLIPPY::control::_Waypoint_default_instance_._instance,
};
const char descriptor_table_protodef_Waypoint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\016Waypoint.proto\022\016CLIPPY.control\032\rUrgenc"
    "y.proto\032\037google/protobuf/timestamp.proto"
    "\"\372\001\n\010Waypoint\022-\n\ttimestamp\030\001 \001(\0132\032.googl"
    "e.protobuf.Timestamp\0223\n\rwaypoint_type\030\002 "
    "\001(\0162\034.CLIPPY.control.WaypointType\022(\n\007urg"
    "ency\030\003 \001(\0162\027.CLIPPY.control.Urgency\022\t\n\001x"
    "\030\007 \001(\001\022\t\n\001y\030\010 \001(\001\022\t\n\001z\030\t \001(\001\022\014\n\004t_xy\030\n \001"
    "(\001\022\n\n\002dx\030\r \001(\001\022\n\n\002dy\030\016 \001(\001\022\n\n\002dz\030\017 \001(\001\022\r"
    "\n\005dt_xy\030\020 \001(\001*V\n\014WaypointType\022\013\n\007UNKNOWN"
    "\020\000\022\013\n\007NEUTRAL\020\001\022\014\n\010OBSTACLE\020\002\022\010\n\004FREE\020\003\022"
    "\n\n\006TARGET\020\004\022\010\n\004SELF\020\005b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_Waypoint_2eproto_deps[2] =
    {
        &::descriptor_table_Urgency_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_Waypoint_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Waypoint_2eproto = {
    false,
    false,
    429,
    descriptor_table_protodef_Waypoint_2eproto,
    "Waypoint.proto",
    &descriptor_table_Waypoint_2eproto_once,
    descriptor_table_Waypoint_2eproto_deps,
    2,
    1,
    schemas,
    file_default_instances,
    TableStruct_Waypoint_2eproto::offsets,
    file_level_metadata_Waypoint_2eproto,
    file_level_enum_descriptors_Waypoint_2eproto,
    file_level_service_descriptors_Waypoint_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Waypoint_2eproto_getter() {
  return &descriptor_table_Waypoint_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Waypoint_2eproto(&descriptor_table_Waypoint_2eproto);
namespace CLIPPY {
namespace control {
const ::google::protobuf::EnumDescriptor* WaypointType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_Waypoint_2eproto);
  return file_level_enum_descriptors_Waypoint_2eproto[0];
}
bool WaypointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class Waypoint::_Internal {
 public:
  using HasBits = decltype(std::declval<Waypoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Waypoint, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& timestamp(const Waypoint* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Timestamp& Waypoint::_Internal::timestamp(const Waypoint* msg) {
  return *msg->_impl_.timestamp_;
}
void Waypoint::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Waypoint::Waypoint(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CLIPPY.control.Waypoint)
}
Waypoint::Waypoint(const Waypoint& from) : ::google::protobuf::Message() {
  Waypoint* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.timestamp_){nullptr},
      decltype(_impl_.waypoint_type_){},
      decltype(_impl_.urgency_){},
      decltype(_impl_.x_){},
      decltype(_impl_.y_){},
      decltype(_impl_.z_){},
      decltype(_impl_.t_xy_){},
      decltype(_impl_.dx_){},
      decltype(_impl_.dy_){},
      decltype(_impl_.dz_){},
      decltype(_impl_.dt_xy_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ = new ::google::protobuf::Timestamp(*from._impl_.timestamp_);
  }
  ::memcpy(&_impl_.waypoint_type_, &from._impl_.waypoint_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.dt_xy_) -
    reinterpret_cast<char*>(&_impl_.waypoint_type_)) + sizeof(_impl_.dt_xy_));

  // @@protoc_insertion_point(copy_constructor:CLIPPY.control.Waypoint)
}
inline void Waypoint::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.timestamp_){nullptr},
      decltype(_impl_.waypoint_type_){0},
      decltype(_impl_.urgency_){0},
      decltype(_impl_.x_){0},
      decltype(_impl_.y_){0},
      decltype(_impl_.z_){0},
      decltype(_impl_.t_xy_){0},
      decltype(_impl_.dx_){0},
      decltype(_impl_.dy_){0},
      decltype(_impl_.dz_){0},
      decltype(_impl_.dt_xy_){0},
  };
}
Waypoint::~Waypoint() {
  // @@protoc_insertion_point(destructor:CLIPPY.control.Waypoint)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Waypoint::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}
void Waypoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Waypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:CLIPPY.control.Waypoint)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  ::memset(&_impl_.waypoint_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.dt_xy_) -
      reinterpret_cast<char*>(&_impl_.waypoint_type_)) + sizeof(_impl_.dt_xy_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Waypoint::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 1, 0, 2> Waypoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Waypoint, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294904888,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Waypoint_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double dt_xy = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 63, 0, PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.dt_xy_)}},
    // .google.protobuf.Timestamp timestamp = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.timestamp_)}},
    // .CLIPPY.control.WaypointType waypoint_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Waypoint, _impl_.waypoint_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.waypoint_type_)}},
    // .CLIPPY.control.Urgency urgency = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Waypoint, _impl_.urgency_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.urgency_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // double x = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.x_)}},
    // double y = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.y_)}},
    // double z = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.z_)}},
    // double t_xy = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.t_xy_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // double dx = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 63, 0, PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.dx_)}},
    // double dy = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 63, 0, PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.dy_)}},
    // double dz = 15;
    {::_pbi::TcParser::FastF64S1,
     {121, 63, 0, PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.dz_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .CLIPPY.control.WaypointType waypoint_type = 2;
    {PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.waypoint_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .CLIPPY.control.Urgency urgency = 3;
    {PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.urgency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // double x = 7;
    {PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.x_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double y = 8;
    {PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.y_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double z = 9;
    {PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.z_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double t_xy = 10;
    {PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.t_xy_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double dx = 13;
    {PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.dx_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double dy = 14;
    {PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.dy_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double dz = 15;
    {PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.dz_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double dt_xy = 16;
    {PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.dt_xy_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

::uint8_t* Waypoint::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLIPPY.control.Waypoint)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .CLIPPY.control.WaypointType waypoint_type = 2;
  if (this->_internal_waypoint_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_waypoint_type(), target);
  }

  // .CLIPPY.control.Urgency urgency = 3;
  if (this->_internal_urgency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_urgency(), target);
  }

  // double x = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this->_internal_x(), target);
  }

  // double y = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this->_internal_y(), target);
  }

  // double z = 9;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_z(), target);
  }

  // double t_xy = 10;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_t_xy = this->_internal_t_xy();
  ::uint64_t raw_t_xy;
  memcpy(&raw_t_xy, &tmp_t_xy, sizeof(tmp_t_xy));
  if (raw_t_xy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        10, this->_internal_t_xy(), target);
  }

  // double dx = 13;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dx = this->_internal_dx();
  ::uint64_t raw_dx;
  memcpy(&raw_dx, &tmp_dx, sizeof(tmp_dx));
  if (raw_dx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        13, this->_internal_dx(), target);
  }

  // double dy = 14;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dy = this->_internal_dy();
  ::uint64_t raw_dy;
  memcpy(&raw_dy, &tmp_dy, sizeof(tmp_dy));
  if (raw_dy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        14, this->_internal_dy(), target);
  }

  // double dz = 15;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dz = this->_internal_dz();
  ::uint64_t raw_dz;
  memcpy(&raw_dz, &tmp_dz, sizeof(tmp_dz));
  if (raw_dz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        15, this->_internal_dz(), target);
  }

  // double dt_xy = 16;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dt_xy = this->_internal_dt_xy();
  ::uint64_t raw_dt_xy;
  memcpy(&raw_dt_xy, &tmp_dt_xy, sizeof(tmp_dt_xy));
  if (raw_dt_xy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        16, this->_internal_dt_xy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLIPPY.control.Waypoint)
  return target;
}

::size_t Waypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLIPPY.control.Waypoint)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .CLIPPY.control.WaypointType waypoint_type = 2;
  if (this->_internal_waypoint_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_waypoint_type());
  }

  // .CLIPPY.control.Urgency urgency = 3;
  if (this->_internal_urgency() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_urgency());
  }

  // double x = 7;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 9;
  }

  // double y = 8;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 9;
  }

  // double z = 9;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 9;
  }

  // double t_xy = 10;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_t_xy = this->_internal_t_xy();
  ::uint64_t raw_t_xy;
  memcpy(&raw_t_xy, &tmp_t_xy, sizeof(tmp_t_xy));
  if (raw_t_xy != 0) {
    total_size += 9;
  }

  // double dx = 13;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dx = this->_internal_dx();
  ::uint64_t raw_dx;
  memcpy(&raw_dx, &tmp_dx, sizeof(tmp_dx));
  if (raw_dx != 0) {
    total_size += 9;
  }

  // double dy = 14;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dy = this->_internal_dy();
  ::uint64_t raw_dy;
  memcpy(&raw_dy, &tmp_dy, sizeof(tmp_dy));
  if (raw_dy != 0) {
    total_size += 9;
  }

  // double dz = 15;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dz = this->_internal_dz();
  ::uint64_t raw_dz;
  memcpy(&raw_dz, &tmp_dz, sizeof(tmp_dz));
  if (raw_dz != 0) {
    total_size += 9;
  }

  // double dt_xy = 16;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dt_xy = this->_internal_dt_xy();
  ::uint64_t raw_dt_xy;
  memcpy(&raw_dt_xy, &tmp_dt_xy, sizeof(tmp_dt_xy));
  if (raw_dt_xy != 0) {
    total_size += 10;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Waypoint::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Waypoint::MergeImpl
};
const ::google::protobuf::Message::ClassData*Waypoint::GetClassData() const { return &_class_data_; }


void Waypoint::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Waypoint*>(&to_msg);
  auto& from = static_cast<const Waypoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CLIPPY.control.Waypoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_waypoint_type() != 0) {
    _this->_internal_set_waypoint_type(from._internal_waypoint_type());
  }
  if (from._internal_urgency() != 0) {
    _this->_internal_set_urgency(from._internal_urgency());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_t_xy = from._internal_t_xy();
  ::uint64_t raw_t_xy;
  memcpy(&raw_t_xy, &tmp_t_xy, sizeof(tmp_t_xy));
  if (raw_t_xy != 0) {
    _this->_internal_set_t_xy(from._internal_t_xy());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dx = from._internal_dx();
  ::uint64_t raw_dx;
  memcpy(&raw_dx, &tmp_dx, sizeof(tmp_dx));
  if (raw_dx != 0) {
    _this->_internal_set_dx(from._internal_dx());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dy = from._internal_dy();
  ::uint64_t raw_dy;
  memcpy(&raw_dy, &tmp_dy, sizeof(tmp_dy));
  if (raw_dy != 0) {
    _this->_internal_set_dy(from._internal_dy());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dz = from._internal_dz();
  ::uint64_t raw_dz;
  memcpy(&raw_dz, &tmp_dz, sizeof(tmp_dz));
  if (raw_dz != 0) {
    _this->_internal_set_dz(from._internal_dz());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_dt_xy = from._internal_dt_xy();
  ::uint64_t raw_dt_xy;
  memcpy(&raw_dt_xy, &tmp_dt_xy, sizeof(tmp_dt_xy));
  if (raw_dt_xy != 0) {
    _this->_internal_set_dt_xy(from._internal_dt_xy());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Waypoint::CopyFrom(const Waypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLIPPY.control.Waypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Waypoint::IsInitialized() const {
  return true;
}

void Waypoint::InternalSwap(Waypoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.dt_xy_)
      + sizeof(Waypoint::_impl_.dt_xy_)
      - PROTOBUF_FIELD_OFFSET(Waypoint, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata Waypoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Waypoint_2eproto_getter, &descriptor_table_Waypoint_2eproto_once,
      file_level_metadata_Waypoint_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace CLIPPY
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
