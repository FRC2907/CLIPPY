// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ControlTarget.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ControlTarget_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ControlTarget_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "Urgency.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ControlTarget_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ControlTarget_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ControlTarget_2eproto;
namespace CLIPPY {
namespace control {
class ControlTarget;
struct ControlTargetDefaultTypeInternal;
extern ControlTargetDefaultTypeInternal _ControlTarget_default_instance_;
class MultiSystemControlTarget;
struct MultiSystemControlTargetDefaultTypeInternal;
extern MultiSystemControlTargetDefaultTypeInternal _MultiSystemControlTarget_default_instance_;
}  // namespace control
}  // namespace CLIPPY
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace CLIPPY {
namespace control {

// ===================================================================


// -------------------------------------------------------------------

class ControlTarget final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CLIPPY.control.ControlTarget) */ {
 public:
  inline ControlTarget() : ControlTarget(nullptr) {}
  ~ControlTarget() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ControlTarget(::google::protobuf::internal::ConstantInitialized);

  ControlTarget(const ControlTarget& from);
  ControlTarget(ControlTarget&& from) noexcept
    : ControlTarget() {
    *this = ::std::move(from);
  }

  inline ControlTarget& operator=(const ControlTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlTarget& operator=(ControlTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlTarget& default_instance() {
    return *internal_default_instance();
  }
  enum OutputCase {
    kVoltage = 7,
    kCurrent = 8,
    kPosition = 9,
    kVelocity = 10,
    kAcceleration = 11,
    kActive = 12,
    OUTPUT_NOT_SET = 0,
  };

  static inline const ControlTarget* internal_default_instance() {
    return reinterpret_cast<const ControlTarget*>(
               &_ControlTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlTarget& a, ControlTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlTarget* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlTarget* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlTarget>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControlTarget& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ControlTarget& from) {
    ControlTarget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlTarget* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CLIPPY.control.ControlTarget";
  }
  protected:
  explicit ControlTarget(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSystemIdFieldNumber = 2,
    kTimestampFieldNumber = 1,
    kUrgencyFieldNumber = 3,
    kVoltageFieldNumber = 7,
    kCurrentFieldNumber = 8,
    kPositionFieldNumber = 9,
    kVelocityFieldNumber = 10,
    kAccelerationFieldNumber = 11,
    kActiveFieldNumber = 12,
  };
  // string system_id = 2;
  void clear_system_id() ;
  const std::string& system_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_system_id(Arg_&& arg, Args_... args);
  std::string* mutable_system_id();
  PROTOBUF_NODISCARD std::string* release_system_id();
  void set_allocated_system_id(std::string* ptr);

  private:
  const std::string& _internal_system_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_system_id(
      const std::string& value);
  std::string* _internal_mutable_system_id();

  public:
  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // .CLIPPY.control.Urgency urgency = 3;
  void clear_urgency() ;
  ::CLIPPY::control::Urgency urgency() const;
  void set_urgency(::CLIPPY::control::Urgency value);

  private:
  ::CLIPPY::control::Urgency _internal_urgency() const;
  void _internal_set_urgency(::CLIPPY::control::Urgency value);

  public:
  // double voltage = 7;
  bool has_voltage() const;
  void clear_voltage() ;
  double voltage() const;
  void set_voltage(double value);

  private:
  double _internal_voltage() const;
  void _internal_set_voltage(double value);

  public:
  // double current = 8;
  bool has_current() const;
  void clear_current() ;
  double current() const;
  void set_current(double value);

  private:
  double _internal_current() const;
  void _internal_set_current(double value);

  public:
  // double position = 9;
  bool has_position() const;
  void clear_position() ;
  double position() const;
  void set_position(double value);

  private:
  double _internal_position() const;
  void _internal_set_position(double value);

  public:
  // double velocity = 10;
  bool has_velocity() const;
  void clear_velocity() ;
  double velocity() const;
  void set_velocity(double value);

  private:
  double _internal_velocity() const;
  void _internal_set_velocity(double value);

  public:
  // double acceleration = 11;
  bool has_acceleration() const;
  void clear_acceleration() ;
  double acceleration() const;
  void set_acceleration(double value);

  private:
  double _internal_acceleration() const;
  void _internal_set_acceleration(double value);

  public:
  // bool active = 12;
  bool has_active() const;
  void clear_active() ;
  bool active() const;
  void set_active(bool value);

  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);

  public:
  void clear_output();
  OutputCase output_case() const;
  // @@protoc_insertion_point(class_scope:CLIPPY.control.ControlTarget)
 private:
  class _Internal;
  void set_has_voltage();
  void set_has_current();
  void set_has_position();
  void set_has_velocity();
  void set_has_acceleration();
  void set_has_active();

  inline bool has_output() const;
  inline void clear_has_output();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 9, 1, 54, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr system_id_;
    ::google::protobuf::Timestamp* timestamp_;
    int urgency_;
    union OutputUnion {
      constexpr OutputUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      double voltage_;
      double current_;
      double position_;
      double velocity_;
      double acceleration_;
      bool active_;
    } output_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ControlTarget_2eproto;
};// -------------------------------------------------------------------

class MultiSystemControlTarget final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CLIPPY.control.MultiSystemControlTarget) */ {
 public:
  inline MultiSystemControlTarget() : MultiSystemControlTarget(nullptr) {}
  ~MultiSystemControlTarget() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MultiSystemControlTarget(::google::protobuf::internal::ConstantInitialized);

  MultiSystemControlTarget(const MultiSystemControlTarget& from);
  MultiSystemControlTarget(MultiSystemControlTarget&& from) noexcept
    : MultiSystemControlTarget() {
    *this = ::std::move(from);
  }

  inline MultiSystemControlTarget& operator=(const MultiSystemControlTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiSystemControlTarget& operator=(MultiSystemControlTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiSystemControlTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiSystemControlTarget* internal_default_instance() {
    return reinterpret_cast<const MultiSystemControlTarget*>(
               &_MultiSystemControlTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MultiSystemControlTarget& a, MultiSystemControlTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiSystemControlTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiSystemControlTarget* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiSystemControlTarget* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiSystemControlTarget>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MultiSystemControlTarget& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MultiSystemControlTarget& from) {
    MultiSystemControlTarget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiSystemControlTarget* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "CLIPPY.control.MultiSystemControlTarget";
  }
  protected:
  explicit MultiSystemControlTarget(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kUrgencyFieldNumber = 2,
  };
  // repeated .CLIPPY.control.ControlTarget targets = 3;
  int targets_size() const;
  private:
  int _internal_targets_size() const;

  public:
  void clear_targets() ;
  ::CLIPPY::control::ControlTarget* mutable_targets(int index);
  ::google::protobuf::RepeatedPtrField< ::CLIPPY::control::ControlTarget >*
      mutable_targets();
  private:
  const ::google::protobuf::RepeatedPtrField<::CLIPPY::control::ControlTarget>& _internal_targets() const;
  ::google::protobuf::RepeatedPtrField<::CLIPPY::control::ControlTarget>* _internal_mutable_targets();
  public:
  const ::CLIPPY::control::ControlTarget& targets(int index) const;
  ::CLIPPY::control::ControlTarget* add_targets();
  const ::google::protobuf::RepeatedPtrField< ::CLIPPY::control::ControlTarget >&
      targets() const;
  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // .CLIPPY.control.Urgency urgency = 2;
  void clear_urgency() ;
  ::CLIPPY::control::Urgency urgency() const;
  void set_urgency(::CLIPPY::control::Urgency value);

  private:
  ::CLIPPY::control::Urgency _internal_urgency() const;
  void _internal_set_urgency(::CLIPPY::control::Urgency value);

  public:
  // @@protoc_insertion_point(class_scope:CLIPPY.control.MultiSystemControlTarget)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::CLIPPY::control::ControlTarget > targets_;
    ::google::protobuf::Timestamp* timestamp_;
    int urgency_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ControlTarget_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ControlTarget

// .google.protobuf.Timestamp timestamp = 1;
inline bool ControlTarget::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& ControlTarget::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& ControlTarget::timestamp() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlTarget.timestamp)
  return _internal_timestamp();
}
inline void ControlTarget::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CLIPPY.control.ControlTarget.timestamp)
}
inline ::google::protobuf::Timestamp* ControlTarget::release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* ControlTarget::unsafe_arena_release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.ControlTarget.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* ControlTarget::_internal_mutable_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* ControlTarget::mutable_timestamp() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.ControlTarget.timestamp)
  return _msg;
}
inline void ControlTarget::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.ControlTarget.timestamp)
}

// string system_id = 2;
inline void ControlTarget::clear_system_id() {
  _impl_.system_id_.ClearToEmpty();
}
inline const std::string& ControlTarget::system_id() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlTarget.system_id)
  return _internal_system_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ControlTarget::set_system_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.system_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CLIPPY.control.ControlTarget.system_id)
}
inline std::string* ControlTarget::mutable_system_id() {
  std::string* _s = _internal_mutable_system_id();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.ControlTarget.system_id)
  return _s;
}
inline const std::string& ControlTarget::_internal_system_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.system_id_.Get();
}
inline void ControlTarget::_internal_set_system_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.system_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ControlTarget::_internal_mutable_system_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.system_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ControlTarget::release_system_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.ControlTarget.system_id)
  return _impl_.system_id_.Release();
}
inline void ControlTarget::set_allocated_system_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.system_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.system_id_.IsDefault()) {
          _impl_.system_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.ControlTarget.system_id)
}

// .CLIPPY.control.Urgency urgency = 3;
inline void ControlTarget::clear_urgency() {
  _impl_.urgency_ = 0;
}
inline ::CLIPPY::control::Urgency ControlTarget::urgency() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlTarget.urgency)
  return _internal_urgency();
}
inline void ControlTarget::set_urgency(::CLIPPY::control::Urgency value) {
  _internal_set_urgency(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.ControlTarget.urgency)
}
inline ::CLIPPY::control::Urgency ControlTarget::_internal_urgency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CLIPPY::control::Urgency>(_impl_.urgency_);
}
inline void ControlTarget::_internal_set_urgency(::CLIPPY::control::Urgency value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.urgency_ = value;
}

// double voltage = 7;
inline bool ControlTarget::has_voltage() const {
  return output_case() == kVoltage;
}
inline void ControlTarget::set_has_voltage() {
  _impl_._oneof_case_[0] = kVoltage;
}
inline void ControlTarget::clear_voltage() {
  if (output_case() == kVoltage) {
    _impl_.output_.voltage_ = 0;
    clear_has_output();
  }
}
inline double ControlTarget::voltage() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlTarget.voltage)
  return _internal_voltage();
}
inline void ControlTarget::set_voltage(double value) {
  _internal_set_voltage(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.ControlTarget.voltage)
}
inline double ControlTarget::_internal_voltage() const {
  if (output_case() == kVoltage) {
    return _impl_.output_.voltage_;
  }
  return 0;
}
inline void ControlTarget::_internal_set_voltage(double value) {
  if (output_case() != kVoltage) {
    clear_output();
    set_has_voltage();
  }
  _impl_.output_.voltage_ = value;
}

// double current = 8;
inline bool ControlTarget::has_current() const {
  return output_case() == kCurrent;
}
inline void ControlTarget::set_has_current() {
  _impl_._oneof_case_[0] = kCurrent;
}
inline void ControlTarget::clear_current() {
  if (output_case() == kCurrent) {
    _impl_.output_.current_ = 0;
    clear_has_output();
  }
}
inline double ControlTarget::current() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlTarget.current)
  return _internal_current();
}
inline void ControlTarget::set_current(double value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.ControlTarget.current)
}
inline double ControlTarget::_internal_current() const {
  if (output_case() == kCurrent) {
    return _impl_.output_.current_;
  }
  return 0;
}
inline void ControlTarget::_internal_set_current(double value) {
  if (output_case() != kCurrent) {
    clear_output();
    set_has_current();
  }
  _impl_.output_.current_ = value;
}

// double position = 9;
inline bool ControlTarget::has_position() const {
  return output_case() == kPosition;
}
inline void ControlTarget::set_has_position() {
  _impl_._oneof_case_[0] = kPosition;
}
inline void ControlTarget::clear_position() {
  if (output_case() == kPosition) {
    _impl_.output_.position_ = 0;
    clear_has_output();
  }
}
inline double ControlTarget::position() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlTarget.position)
  return _internal_position();
}
inline void ControlTarget::set_position(double value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.ControlTarget.position)
}
inline double ControlTarget::_internal_position() const {
  if (output_case() == kPosition) {
    return _impl_.output_.position_;
  }
  return 0;
}
inline void ControlTarget::_internal_set_position(double value) {
  if (output_case() != kPosition) {
    clear_output();
    set_has_position();
  }
  _impl_.output_.position_ = value;
}

// double velocity = 10;
inline bool ControlTarget::has_velocity() const {
  return output_case() == kVelocity;
}
inline void ControlTarget::set_has_velocity() {
  _impl_._oneof_case_[0] = kVelocity;
}
inline void ControlTarget::clear_velocity() {
  if (output_case() == kVelocity) {
    _impl_.output_.velocity_ = 0;
    clear_has_output();
  }
}
inline double ControlTarget::velocity() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlTarget.velocity)
  return _internal_velocity();
}
inline void ControlTarget::set_velocity(double value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.ControlTarget.velocity)
}
inline double ControlTarget::_internal_velocity() const {
  if (output_case() == kVelocity) {
    return _impl_.output_.velocity_;
  }
  return 0;
}
inline void ControlTarget::_internal_set_velocity(double value) {
  if (output_case() != kVelocity) {
    clear_output();
    set_has_velocity();
  }
  _impl_.output_.velocity_ = value;
}

// double acceleration = 11;
inline bool ControlTarget::has_acceleration() const {
  return output_case() == kAcceleration;
}
inline void ControlTarget::set_has_acceleration() {
  _impl_._oneof_case_[0] = kAcceleration;
}
inline void ControlTarget::clear_acceleration() {
  if (output_case() == kAcceleration) {
    _impl_.output_.acceleration_ = 0;
    clear_has_output();
  }
}
inline double ControlTarget::acceleration() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlTarget.acceleration)
  return _internal_acceleration();
}
inline void ControlTarget::set_acceleration(double value) {
  _internal_set_acceleration(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.ControlTarget.acceleration)
}
inline double ControlTarget::_internal_acceleration() const {
  if (output_case() == kAcceleration) {
    return _impl_.output_.acceleration_;
  }
  return 0;
}
inline void ControlTarget::_internal_set_acceleration(double value) {
  if (output_case() != kAcceleration) {
    clear_output();
    set_has_acceleration();
  }
  _impl_.output_.acceleration_ = value;
}

// bool active = 12;
inline bool ControlTarget::has_active() const {
  return output_case() == kActive;
}
inline void ControlTarget::set_has_active() {
  _impl_._oneof_case_[0] = kActive;
}
inline void ControlTarget::clear_active() {
  if (output_case() == kActive) {
    _impl_.output_.active_ = false;
    clear_has_output();
  }
}
inline bool ControlTarget::active() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.ControlTarget.active)
  return _internal_active();
}
inline void ControlTarget::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.ControlTarget.active)
}
inline bool ControlTarget::_internal_active() const {
  if (output_case() == kActive) {
    return _impl_.output_.active_;
  }
  return false;
}
inline void ControlTarget::_internal_set_active(bool value) {
  if (output_case() != kActive) {
    clear_output();
    set_has_active();
  }
  _impl_.output_.active_ = value;
}

inline bool ControlTarget::has_output() const {
  return output_case() != OUTPUT_NOT_SET;
}
inline void ControlTarget::clear_has_output() {
  _impl_._oneof_case_[0] = OUTPUT_NOT_SET;
}
inline ControlTarget::OutputCase ControlTarget::output_case() const {
  return ControlTarget::OutputCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MultiSystemControlTarget

// .google.protobuf.Timestamp timestamp = 1;
inline bool MultiSystemControlTarget::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& MultiSystemControlTarget::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& MultiSystemControlTarget::timestamp() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.MultiSystemControlTarget.timestamp)
  return _internal_timestamp();
}
inline void MultiSystemControlTarget::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CLIPPY.control.MultiSystemControlTarget.timestamp)
}
inline ::google::protobuf::Timestamp* MultiSystemControlTarget::release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* MultiSystemControlTarget::unsafe_arena_release_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:CLIPPY.control.MultiSystemControlTarget.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* MultiSystemControlTarget::_internal_mutable_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* MultiSystemControlTarget::mutable_timestamp() {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.MultiSystemControlTarget.timestamp)
  return _msg;
}
inline void MultiSystemControlTarget::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:CLIPPY.control.MultiSystemControlTarget.timestamp)
}

// .CLIPPY.control.Urgency urgency = 2;
inline void MultiSystemControlTarget::clear_urgency() {
  _impl_.urgency_ = 0;
}
inline ::CLIPPY::control::Urgency MultiSystemControlTarget::urgency() const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.MultiSystemControlTarget.urgency)
  return _internal_urgency();
}
inline void MultiSystemControlTarget::set_urgency(::CLIPPY::control::Urgency value) {
  _internal_set_urgency(value);
  // @@protoc_insertion_point(field_set:CLIPPY.control.MultiSystemControlTarget.urgency)
}
inline ::CLIPPY::control::Urgency MultiSystemControlTarget::_internal_urgency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::CLIPPY::control::Urgency>(_impl_.urgency_);
}
inline void MultiSystemControlTarget::_internal_set_urgency(::CLIPPY::control::Urgency value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.urgency_ = value;
}

// repeated .CLIPPY.control.ControlTarget targets = 3;
inline int MultiSystemControlTarget::_internal_targets_size() const {
  return _internal_targets().size();
}
inline int MultiSystemControlTarget::targets_size() const {
  return _internal_targets_size();
}
inline void MultiSystemControlTarget::clear_targets() {
  _internal_mutable_targets()->Clear();
}
inline ::CLIPPY::control::ControlTarget* MultiSystemControlTarget::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:CLIPPY.control.MultiSystemControlTarget.targets)
  return _internal_mutable_targets()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::CLIPPY::control::ControlTarget >*
MultiSystemControlTarget::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:CLIPPY.control.MultiSystemControlTarget.targets)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_targets();
}
inline const ::CLIPPY::control::ControlTarget& MultiSystemControlTarget::targets(int index) const {
  // @@protoc_insertion_point(field_get:CLIPPY.control.MultiSystemControlTarget.targets)
    return _internal_targets().Get(index);
}
inline ::CLIPPY::control::ControlTarget* MultiSystemControlTarget::add_targets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::CLIPPY::control::ControlTarget* _add = _internal_mutable_targets()->Add();
  // @@protoc_insertion_point(field_add:CLIPPY.control.MultiSystemControlTarget.targets)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::CLIPPY::control::ControlTarget >&
MultiSystemControlTarget::targets() const {
  // @@protoc_insertion_point(field_list:CLIPPY.control.MultiSystemControlTarget.targets)
  return _internal_targets();
}
inline const ::google::protobuf::RepeatedPtrField<::CLIPPY::control::ControlTarget>&
MultiSystemControlTarget::_internal_targets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.targets_;
}
inline ::google::protobuf::RepeatedPtrField<::CLIPPY::control::ControlTarget>*
MultiSystemControlTarget::_internal_mutable_targets() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.targets_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace CLIPPY


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ControlTarget_2eproto_2epb_2eh
