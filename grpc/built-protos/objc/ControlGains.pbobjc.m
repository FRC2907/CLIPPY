// Generated by the protocol buffer compiler.  DO NOT EDIT!
// clang-format off
// source: ControlGains.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "ControlGains.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ControlGains);
GPBObjCClassDeclaration(GPBDoubleValue);

#pragma mark - ControlGainsRoot

@implementation ControlGainsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription ControlGainsRoot_FileDescription = {
  .package = "CLIPPY.control",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum ZNControlRule

GPBEnumDescriptor *ZNControlRule_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "Unset\000P\000Pi\000Pd\000Pid\000Pessen\000MildOvershoot\000N"
        "oOvershoot\000";
    static const int32_t values[] = {
        ZNControlRule_Unset,
        ZNControlRule_P,
        ZNControlRule_Pi,
        ZNControlRule_Pd,
        ZNControlRule_Pid,
        ZNControlRule_Pessen,
        ZNControlRule_MildOvershoot,
        ZNControlRule_NoOvershoot,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ZNControlRule)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ZNControlRule_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ZNControlRule_IsValidValue(int32_t value__) {
  switch (value__) {
    case ZNControlRule_Unset:
    case ZNControlRule_P:
    case ZNControlRule_Pi:
    case ZNControlRule_Pd:
    case ZNControlRule_Pid:
    case ZNControlRule_Pessen:
    case ZNControlRule_MildOvershoot:
    case ZNControlRule_NoOvershoot:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ControlGains

@implementation ControlGains

@dynamic systemId;
@dynamic hasKP, kP;
@dynamic hasKI, kI;
@dynamic hasKD, kD;
@dynamic hasKFStatic, kFStatic;
@dynamic hasKFLinear, kFLinear;
@dynamic hasKFLinearPerTime, kFLinearPerTime;
@dynamic hasKFConstant, kFConstant;
@dynamic hasKU, kU;
@dynamic hasTU, tU;
@dynamic znControlRule;

typedef struct ControlGains__storage_ {
  uint32_t _has_storage_[1];
  ZNControlRule znControlRule;
  NSString *systemId;
  GPBDoubleValue *kP;
  GPBDoubleValue *kI;
  GPBDoubleValue *kD;
  GPBDoubleValue *kFStatic;
  GPBDoubleValue *kFLinear;
  GPBDoubleValue *kFLinearPerTime;
  GPBDoubleValue *kFConstant;
  GPBDoubleValue *kU;
  GPBDoubleValue *tU;
} ControlGains__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "systemId",
        .dataTypeSpecific.clazz = Nil,
        .number = ControlGains_FieldNumber_SystemId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ControlGains__storage_, systemId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kP",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDoubleValue),
        .number = ControlGains_FieldNumber_KP,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ControlGains__storage_, kP),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "kI",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDoubleValue),
        .number = ControlGains_FieldNumber_KI,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ControlGains__storage_, kI),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "kD",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDoubleValue),
        .number = ControlGains_FieldNumber_KD,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ControlGains__storage_, kD),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "kFStatic",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDoubleValue),
        .number = ControlGains_FieldNumber_KFStatic,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ControlGains__storage_, kFStatic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "kFLinear",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDoubleValue),
        .number = ControlGains_FieldNumber_KFLinear,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ControlGains__storage_, kFLinear),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "kFLinearPerTime",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDoubleValue),
        .number = ControlGains_FieldNumber_KFLinearPerTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ControlGains__storage_, kFLinearPerTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "kFConstant",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDoubleValue),
        .number = ControlGains_FieldNumber_KFConstant,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ControlGains__storage_, kFConstant),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "kU",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDoubleValue),
        .number = ControlGains_FieldNumber_KU,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ControlGains__storage_, kU),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tU",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDoubleValue),
        .number = ControlGains_FieldNumber_TU,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ControlGains__storage_, tU),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "znControlRule",
        .dataTypeSpecific.enumDescFunc = ZNControlRule_EnumDescriptor,
        .number = ControlGains_FieldNumber_ZnControlRule,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ControlGains__storage_, znControlRule),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ControlGains)
                                   messageName:@"ControlGains"
                               fileDescription:&ControlGainsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ControlGains__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\n\002\002\000\003\002\000\004\002\000\005\002\246\000\006\002\246\000\007\002\246\243\244\000\010\002\250\000\t\002\000\n\002\000\013\r\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ControlGains_ZnControlRule_RawValue(ControlGains *message) {
  GPBDescriptor *descriptor = [ControlGains descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ControlGains_FieldNumber_ZnControlRule];
  return GPBGetMessageRawEnumField(message, field);
}

void SetControlGains_ZnControlRule_RawValue(ControlGains *message, int32_t value) {
  GPBDescriptor *descriptor = [ControlGains descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ControlGains_FieldNumber_ZnControlRule];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
