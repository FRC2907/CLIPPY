// Generated by the protocol buffer compiler.  DO NOT EDIT!
// clang-format off
// source: ControlGains.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "ControlGains.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ControlGains);

#pragma mark - ControlGainsRoot

@implementation ControlGainsRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

static GPBFileDescription ControlGainsRoot_FileDescription = {
  .package = "CLIPPY.control",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - ControlGains

@implementation ControlGains

@dynamic systemId;
@dynamic kP;
@dynamic kI;
@dynamic kD;
@dynamic kFStatic;
@dynamic kFLinear;
@dynamic kFSquare;
@dynamic kFCosine;

typedef struct ControlGains__storage_ {
  uint32_t _has_storage_[1];
  NSString *systemId;
  double kP;
  double kI;
  double kD;
  double kFStatic;
  double kFLinear;
  double kFSquare;
  double kFCosine;
} ControlGains__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "systemId",
        .dataTypeSpecific.clazz = Nil,
        .number = ControlGains_FieldNumber_SystemId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ControlGains__storage_, systemId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kP",
        .dataTypeSpecific.clazz = Nil,
        .number = ControlGains_FieldNumber_KP,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ControlGains__storage_, kP),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "kI",
        .dataTypeSpecific.clazz = Nil,
        .number = ControlGains_FieldNumber_KI,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ControlGains__storage_, kI),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "kD",
        .dataTypeSpecific.clazz = Nil,
        .number = ControlGains_FieldNumber_KD,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ControlGains__storage_, kD),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "kFStatic",
        .dataTypeSpecific.clazz = Nil,
        .number = ControlGains_FieldNumber_KFStatic,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ControlGains__storage_, kFStatic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "kFLinear",
        .dataTypeSpecific.clazz = Nil,
        .number = ControlGains_FieldNumber_KFLinear,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ControlGains__storage_, kFLinear),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "kFSquare",
        .dataTypeSpecific.clazz = Nil,
        .number = ControlGains_FieldNumber_KFSquare,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ControlGains__storage_, kFSquare),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "kFCosine",
        .dataTypeSpecific.clazz = Nil,
        .number = ControlGains_FieldNumber_KFCosine,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ControlGains__storage_, kFCosine),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(ControlGains)
                                   messageName:@"ControlGains"
                               fileDescription:&ControlGainsRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ControlGains__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\007\007\002\000\010\002\000\t\002\000\n\002\246\000\013\002\246\000\014\002\246\000\r\002\246\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
