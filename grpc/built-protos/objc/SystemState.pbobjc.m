// Generated by the protocol buffer compiler.  DO NOT EDIT!
// clang-format off
// source: SystemState.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "SystemState.pbobjc.h"
#import "ControlGains.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ControlGains);
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(SystemIDs);
GPBObjCClassDeclaration(SystemState);
GPBObjCClassDeclaration(SystemState_Measurement);
GPBObjCClassDeclaration(SystemTags);

#pragma mark - SystemStateRoot

@implementation SystemStateRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription SystemStateRoot_FileDescription = {
  .package = "CLIPPY.control",
  .prefix = NULL,
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - SystemIDs

@implementation SystemIDs

@dynamic systemIdsArray, systemIdsArray_Count;

typedef struct SystemIDs__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *systemIdsArray;
} SystemIDs__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "systemIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemIDs_FieldNumber_SystemIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SystemIDs__storage_, systemIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SystemIDs)
                                   messageName:@"SystemIDs"
                               fileDescription:&SystemStateRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemIDs__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SystemTags

@implementation SystemTags

@dynamic systemTagsArray, systemTagsArray_Count;

typedef struct SystemTags__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *systemTagsArray;
} SystemTags__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "systemTagsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemTags_FieldNumber_SystemTagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SystemTags__storage_, systemTagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SystemTags)
                                   messageName:@"SystemTags"
                               fileDescription:&SystemStateRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemTags__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SystemState

@implementation SystemState

@dynamic hasTimestamp, timestamp;
@dynamic systemId;
@dynamic hasState, state;
@dynamic hasGains, gains;

typedef struct SystemState__storage_ {
  uint32_t _has_storage_[1];
  GPBTimestamp *timestamp;
  NSString *systemId;
  SystemState_Measurement *state;
  ControlGains *gains;
} SystemState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SystemState_FieldNumber_Timestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemState__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "systemId",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemState_FieldNumber_SystemId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SystemState__storage_, systemId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "state",
        .dataTypeSpecific.clazz = GPBObjCClass(SystemState_Measurement),
        .number = SystemState_FieldNumber_State,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SystemState__storage_, state),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gains",
        .dataTypeSpecific.clazz = GPBObjCClass(ControlGains),
        .number = SystemState_FieldNumber_Gains,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SystemState__storage_, gains),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SystemState)
                                   messageName:@"SystemState"
                               fileDescription:&SystemStateRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SystemState_Measurement

@implementation SystemState_Measurement

@dynamic position;
@dynamic velocity;
@dynamic acceleration;
@dynamic voltage;
@dynamic current;
@dynamic active;
@dynamic triggered;
@dynamic power;
@dynamic energy;
@dynamic pressure;
@dynamic jerk;
@dynamic temperature;

typedef struct SystemState_Measurement__storage_ {
  uint32_t _has_storage_[1];
  double position;
  double velocity;
  double acceleration;
  double voltage;
  double current;
  double power;
  double energy;
  double pressure;
  double jerk;
  double temperature;
} SystemState_Measurement__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "position",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemState_Measurement_FieldNumber_Position,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SystemState_Measurement__storage_, position),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "velocity",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemState_Measurement_FieldNumber_Velocity,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SystemState_Measurement__storage_, velocity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "acceleration",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemState_Measurement_FieldNumber_Acceleration,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SystemState_Measurement__storage_, acceleration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "voltage",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemState_Measurement_FieldNumber_Voltage,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SystemState_Measurement__storage_, voltage),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "current",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemState_Measurement_FieldNumber_Current,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SystemState_Measurement__storage_, current),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "active",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemState_Measurement_FieldNumber_Active,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "triggered",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemState_Measurement_FieldNumber_Triggered,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "power",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemState_Measurement_FieldNumber_Power,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SystemState_Measurement__storage_, power),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "energy",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemState_Measurement_FieldNumber_Energy,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SystemState_Measurement__storage_, energy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "pressure",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemState_Measurement_FieldNumber_Pressure,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SystemState_Measurement__storage_, pressure),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "jerk",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemState_Measurement_FieldNumber_Jerk,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(SystemState_Measurement__storage_, jerk),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "temperature",
        .dataTypeSpecific.clazz = Nil,
        .number = SystemState_Measurement_FieldNumber_Temperature,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(SystemState_Measurement__storage_, temperature),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(SystemState_Measurement)
                                   messageName:@"Measurement"
                               fileDescription:&SystemStateRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SystemState_Measurement__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(SystemState)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
