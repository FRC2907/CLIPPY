# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: MotionPlannerServer.proto

require 'google/protobuf'

require 'Waypoint_pb'
require 'ControlGains_pb'
require 'ControlTarget_pb'
require 'google/protobuf/empty_pb'


descriptor_data = "\n\x19MotionPlannerServer.proto\x12\x0e\x43LIPPY.control\x1a\x0eWaypoint.proto\x1a\x12\x43ontrolGains.proto\x1a\x13\x43ontrolTarget.proto\x1a\x1bgoogle/protobuf/empty.proto2\xab\x01\n\x13MotionPlannerServer\x12\x44\n\x0eSubmitWaypoint\x12\x18.CLIPPY.control.Waypoint\x1a\x16.google.protobuf.Empty\"\x00\x12N\n\x13SubmitControlTarget\x12\x1d.CLIPPY.control.ControlTarget\x1a\x16.google.protobuf.Empty\"\x00\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module CLIPPY
  module Control
  end
end
