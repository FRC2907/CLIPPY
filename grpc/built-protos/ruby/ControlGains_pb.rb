# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ControlGains.proto

require 'google/protobuf'

require 'google/protobuf/wrappers_pb'


descriptor_data = "\n\x12\x43ontrolGains.proto\x12\x0e\x43LIPPY.control\x1a\x1egoogle/protobuf/wrappers.proto\"\xf8\x03\n\x0c\x43ontrolGains\x12\x11\n\tsystem_id\x18\x01 \x01(\t\x12(\n\x02kP\x18\x02 \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12(\n\x02kI\x18\x03 \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12(\n\x02kD\x18\x04 \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12/\n\tkF_static\x18\x05 \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12/\n\tkF_linear\x18\x06 \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12\x38\n\x12kF_linear_per_time\x18\x07 \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12\x31\n\x0bkF_constant\x18\x08 \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12(\n\x02kU\x18\t \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12(\n\x02tU\x18\n \x01(\x0b\x32\x1c.google.protobuf.DoubleValue\x12\x34\n\rznControlRule\x18\x0b \x01(\x0e\x32\x1d.CLIPPY.control.ZNControlRule*l\n\rZNControlRule\x12\t\n\x05UNSET\x10\x00\x12\x05\n\x01P\x10\x01\x12\x06\n\x02PI\x10\x02\x12\x06\n\x02PD\x10\x03\x12\x07\n\x03PID\x10\x04\x12\n\n\x06PESSEN\x10\x05\x12\x12\n\x0eMILD_OVERSHOOT\x10\x06\x12\x10\n\x0cNO_OVERSHOOT\x10\x07\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
    ["google.protobuf.DoubleValue", "google/protobuf/wrappers.proto"],
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module CLIPPY
  module Control
    ControlGains = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("CLIPPY.control.ControlGains").msgclass
    ZNControlRule = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("CLIPPY.control.ZNControlRule").enummodule
  end
end
