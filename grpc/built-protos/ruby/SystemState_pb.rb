# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: SystemState.proto

require 'google/protobuf'

require 'google/protobuf/timestamp_pb'
require 'ControlGains_pb'


descriptor_data = "\n\x11SystemState.proto\x12\x0e\x43LIPPY.control\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x12\x43ontrolGains.proto\"\x1f\n\tSystemIDs\x12\x12\n\nsystem_ids\x18\x01 \x03(\t\"!\n\nSystemTags\x12\x13\n\x0bsystem_tags\x18\x01 \x03(\t\"\x97\x03\n\x0bSystemState\x12-\n\ttimestamp\x18\x01 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12\x11\n\tsystem_id\x18\x02 \x01(\t\x12\x36\n\x05state\x18\x03 \x01(\x0b\x32\'.CLIPPY.control.SystemState.Measurement\x12+\n\x05gains\x18\x04 \x01(\x0b\x32\x1c.CLIPPY.control.ControlGains\x1a\xe0\x01\n\x0bMeasurement\x12\x10\n\x08position\x18\x01 \x01(\x01\x12\x10\n\x08velocity\x18\x02 \x01(\x01\x12\x14\n\x0c\x61\x63\x63\x65leration\x18\x03 \x01(\x01\x12\x0f\n\x07voltage\x18\x04 \x01(\x01\x12\x0f\n\x07\x63urrent\x18\x05 \x01(\x01\x12\x0e\n\x06\x61\x63tive\x18\x06 \x01(\x08\x12\x11\n\ttriggered\x18\x07 \x01(\x08\x12\r\n\x05power\x18\x08 \x01(\x01\x12\x0e\n\x06\x65nergy\x18\t \x01(\x01\x12\x10\n\x08pressure\x18\n \x01(\x01\x12\x0c\n\x04jerk\x18\x0b \x01(\x01\x12\x13\n\x0btemperature\x18\x0c \x01(\x01\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
    ["google.protobuf.Timestamp", "google/protobuf/timestamp.proto"],
    ["CLIPPY.control.ControlGains", "ControlGains.proto"],
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module CLIPPY
  module Control
    SystemIDs = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("CLIPPY.control.SystemIDs").msgclass
    SystemTags = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("CLIPPY.control.SystemTags").msgclass
    SystemState = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("CLIPPY.control.SystemState").msgclass
    SystemState::Measurement = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("CLIPPY.control.SystemState.Measurement").msgclass
  end
end
