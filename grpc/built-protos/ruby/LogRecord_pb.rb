# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: LogRecord.proto

require 'google/protobuf'

require 'google/protobuf/timestamp_pb'


descriptor_data = "\n\x0fLogRecord.proto\x12\nCLIPPY.log\x1a\x1fgoogle/protobuf/timestamp.proto\"\x86\x01\n\tLogRecord\x12-\n\ttimestamp\x18\x01 \x01(\x0b\x32\x1a.google.protobuf.Timestamp\x12\x10\n\x08reporter\x18\x02 \x01(\t\x12)\n\x08severity\x18\x03 \x01(\x0e\x32\x17.CLIPPY.log.LogSeverity\x12\r\n\x05value\x18\x04 \x01(\t*W\n\x0bLogSeverity\x12\x0b\n\x07UNKNOWN\x10\x00\x12\t\n\x05TRACE\x10\x01\x12\t\n\x05\x44\x45\x42UG\x10\x02\x12\x08\n\x04INFO\x10\x03\x12\x06\n\x02OK\x10\x04\x12\x08\n\x04WARN\x10\x05\x12\t\n\x05\x45RROR\x10\x06\x62\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
    ["google.protobuf.Timestamp", "google/protobuf/timestamp.proto"],
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module CLIPPY
  module Log
    LogRecord = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("CLIPPY.log.LogRecord").msgclass
    LogSeverity = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("CLIPPY.log.LogSeverity").enummodule
  end
end
