<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Waypoint.proto

namespace CLIPPY\Control;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>CLIPPY.control.Waypoint</code>
 */
class Waypoint extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>.google.protobuf.Timestamp timestamp = 1;</code>
     */
    protected $timestamp = null;
    /**
     * Generated from protobuf field <code>.CLIPPY.control.WaypointType waypoint_type = 2;</code>
     */
    protected $waypoint_type = 0;
    /**
     * Generated from protobuf field <code>.CLIPPY.control.Urgency urgency = 3;</code>
     */
    protected $urgency = 0;
    /**
     * XYZ coordinates of the waypoint
     *
     * Generated from protobuf field <code>double x = 7;</code>
     */
    protected $x = 0.0;
    /**
     * Generated from protobuf field <code>double y = 8;</code>
     */
    protected $y = 0.0;
    /**
     * Generated from protobuf field <code>double z = 9;</code>
     */
    protected $z = 0.0;
    /**
     * Rotation angles of the waypoint, in radians
     * Consider a quaternion?
     *
     * Generated from protobuf field <code>double t_xy = 10;</code>
     */
    protected $t_xy = 0.0;
    /**
     * Width of margin of error on each axis
     *
     * Generated from protobuf field <code>double dx = 13;</code>
     */
    protected $dx = 0.0;
    /**
     * Generated from protobuf field <code>double dy = 14;</code>
     */
    protected $dy = 0.0;
    /**
     * Generated from protobuf field <code>double dz = 15;</code>
     */
    protected $dz = 0.0;
    /**
     * Generated from protobuf field <code>double dt_xy = 16;</code>
     */
    protected $dt_xy = 0.0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Protobuf\Timestamp $timestamp
     *     @type int $waypoint_type
     *     @type int $urgency
     *     @type float $x
     *           XYZ coordinates of the waypoint
     *     @type float $y
     *     @type float $z
     *     @type float $t_xy
     *           Rotation angles of the waypoint, in radians
     *           Consider a quaternion?
     *     @type float $dx
     *           Width of margin of error on each axis
     *     @type float $dy
     *     @type float $dz
     *     @type float $dt_xy
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Waypoint::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.google.protobuf.Timestamp timestamp = 1;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    public function hasTimestamp()
    {
        return isset($this->timestamp);
    }

    public function clearTimestamp()
    {
        unset($this->timestamp);
    }

    /**
     * Generated from protobuf field <code>.google.protobuf.Timestamp timestamp = 1;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->timestamp = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.CLIPPY.control.WaypointType waypoint_type = 2;</code>
     * @return int
     */
    public function getWaypointType()
    {
        return $this->waypoint_type;
    }

    /**
     * Generated from protobuf field <code>.CLIPPY.control.WaypointType waypoint_type = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setWaypointType($var)
    {
        GPBUtil::checkEnum($var, \CLIPPY\Control\WaypointType::class);
        $this->waypoint_type = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>.CLIPPY.control.Urgency urgency = 3;</code>
     * @return int
     */
    public function getUrgency()
    {
        return $this->urgency;
    }

    /**
     * Generated from protobuf field <code>.CLIPPY.control.Urgency urgency = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setUrgency($var)
    {
        GPBUtil::checkEnum($var, \CLIPPY\Control\Urgency::class);
        $this->urgency = $var;

        return $this;
    }

    /**
     * XYZ coordinates of the waypoint
     *
     * Generated from protobuf field <code>double x = 7;</code>
     * @return float
     */
    public function getX()
    {
        return $this->x;
    }

    /**
     * XYZ coordinates of the waypoint
     *
     * Generated from protobuf field <code>double x = 7;</code>
     * @param float $var
     * @return $this
     */
    public function setX($var)
    {
        GPBUtil::checkDouble($var);
        $this->x = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double y = 8;</code>
     * @return float
     */
    public function getY()
    {
        return $this->y;
    }

    /**
     * Generated from protobuf field <code>double y = 8;</code>
     * @param float $var
     * @return $this
     */
    public function setY($var)
    {
        GPBUtil::checkDouble($var);
        $this->y = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double z = 9;</code>
     * @return float
     */
    public function getZ()
    {
        return $this->z;
    }

    /**
     * Generated from protobuf field <code>double z = 9;</code>
     * @param float $var
     * @return $this
     */
    public function setZ($var)
    {
        GPBUtil::checkDouble($var);
        $this->z = $var;

        return $this;
    }

    /**
     * Rotation angles of the waypoint, in radians
     * Consider a quaternion?
     *
     * Generated from protobuf field <code>double t_xy = 10;</code>
     * @return float
     */
    public function getTXy()
    {
        return $this->t_xy;
    }

    /**
     * Rotation angles of the waypoint, in radians
     * Consider a quaternion?
     *
     * Generated from protobuf field <code>double t_xy = 10;</code>
     * @param float $var
     * @return $this
     */
    public function setTXy($var)
    {
        GPBUtil::checkDouble($var);
        $this->t_xy = $var;

        return $this;
    }

    /**
     * Width of margin of error on each axis
     *
     * Generated from protobuf field <code>double dx = 13;</code>
     * @return float
     */
    public function getDx()
    {
        return $this->dx;
    }

    /**
     * Width of margin of error on each axis
     *
     * Generated from protobuf field <code>double dx = 13;</code>
     * @param float $var
     * @return $this
     */
    public function setDx($var)
    {
        GPBUtil::checkDouble($var);
        $this->dx = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double dy = 14;</code>
     * @return float
     */
    public function getDy()
    {
        return $this->dy;
    }

    /**
     * Generated from protobuf field <code>double dy = 14;</code>
     * @param float $var
     * @return $this
     */
    public function setDy($var)
    {
        GPBUtil::checkDouble($var);
        $this->dy = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double dz = 15;</code>
     * @return float
     */
    public function getDz()
    {
        return $this->dz;
    }

    /**
     * Generated from protobuf field <code>double dz = 15;</code>
     * @param float $var
     * @return $this
     */
    public function setDz($var)
    {
        GPBUtil::checkDouble($var);
        $this->dz = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double dt_xy = 16;</code>
     * @return float
     */
    public function getDtXy()
    {
        return $this->dt_xy;
    }

    /**
     * Generated from protobuf field <code>double dt_xy = 16;</code>
     * @param float $var
     * @return $this
     */
    public function setDtXy($var)
    {
        GPBUtil::checkDouble($var);
        $this->dt_xy = $var;

        return $this;
    }

}

