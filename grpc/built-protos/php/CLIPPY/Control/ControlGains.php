<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ControlGains.proto

namespace CLIPPY\Control;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>CLIPPY.control.ControlGains</code>
 */
class ControlGains extends \Google\Protobuf\Internal\Message
{
    /**
     * recall that all fields are optional
     *
     * Generated from protobuf field <code>string system_id = 1;</code>
     */
    protected $system_id = '';
    /**
     * Generated from protobuf field <code>double kP = 2;</code>
     */
    protected $kP = 0.0;
    /**
     * Generated from protobuf field <code>double kI = 3;</code>
     */
    protected $kI = 0.0;
    /**
     * Generated from protobuf field <code>double kD = 4;</code>
     */
    protected $kD = 0.0;
    /**
     * kS for vel ctl
     *
     * Generated from protobuf field <code>double kF_static = 5;</code>
     */
    protected $kF_static = 0.0;
    /**
     * kV for vel ctl
     *
     * Generated from protobuf field <code>double kF_linear = 6;</code>
     */
    protected $kF_linear = 0.0;
    /**
     * kA for vel ctl
     *
     * Generated from protobuf field <code>double kF_square = 7;</code>
     */
    protected $kF_square = 0.0;
    /**
     * kG for arm pos ctl
     *
     * Generated from protobuf field <code>double kF_cosine = 8;</code>
     */
    protected $kF_cosine = 0.0;
    /**
     * "ultimate gain" for ziegler-nichols
     *
     * Generated from protobuf field <code>double kU = 9;</code>
     */
    protected $kU = 0.0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $system_id
     *           recall that all fields are optional
     *     @type float $kP
     *     @type float $kI
     *     @type float $kD
     *     @type float $kF_static
     *           kS for vel ctl
     *     @type float $kF_linear
     *           kV for vel ctl
     *     @type float $kF_square
     *           kA for vel ctl
     *     @type float $kF_cosine
     *           kG for arm pos ctl
     *     @type float $kU
     *           "ultimate gain" for ziegler-nichols
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ControlGains::initOnce();
        parent::__construct($data);
    }

    /**
     * recall that all fields are optional
     *
     * Generated from protobuf field <code>string system_id = 1;</code>
     * @return string
     */
    public function getSystemId()
    {
        return $this->system_id;
    }

    /**
     * recall that all fields are optional
     *
     * Generated from protobuf field <code>string system_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setSystemId($var)
    {
        GPBUtil::checkString($var, True);
        $this->system_id = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double kP = 2;</code>
     * @return float
     */
    public function getKP()
    {
        return $this->kP;
    }

    /**
     * Generated from protobuf field <code>double kP = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setKP($var)
    {
        GPBUtil::checkDouble($var);
        $this->kP = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double kI = 3;</code>
     * @return float
     */
    public function getKI()
    {
        return $this->kI;
    }

    /**
     * Generated from protobuf field <code>double kI = 3;</code>
     * @param float $var
     * @return $this
     */
    public function setKI($var)
    {
        GPBUtil::checkDouble($var);
        $this->kI = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double kD = 4;</code>
     * @return float
     */
    public function getKD()
    {
        return $this->kD;
    }

    /**
     * Generated from protobuf field <code>double kD = 4;</code>
     * @param float $var
     * @return $this
     */
    public function setKD($var)
    {
        GPBUtil::checkDouble($var);
        $this->kD = $var;

        return $this;
    }

    /**
     * kS for vel ctl
     *
     * Generated from protobuf field <code>double kF_static = 5;</code>
     * @return float
     */
    public function getKFStatic()
    {
        return $this->kF_static;
    }

    /**
     * kS for vel ctl
     *
     * Generated from protobuf field <code>double kF_static = 5;</code>
     * @param float $var
     * @return $this
     */
    public function setKFStatic($var)
    {
        GPBUtil::checkDouble($var);
        $this->kF_static = $var;

        return $this;
    }

    /**
     * kV for vel ctl
     *
     * Generated from protobuf field <code>double kF_linear = 6;</code>
     * @return float
     */
    public function getKFLinear()
    {
        return $this->kF_linear;
    }

    /**
     * kV for vel ctl
     *
     * Generated from protobuf field <code>double kF_linear = 6;</code>
     * @param float $var
     * @return $this
     */
    public function setKFLinear($var)
    {
        GPBUtil::checkDouble($var);
        $this->kF_linear = $var;

        return $this;
    }

    /**
     * kA for vel ctl
     *
     * Generated from protobuf field <code>double kF_square = 7;</code>
     * @return float
     */
    public function getKFSquare()
    {
        return $this->kF_square;
    }

    /**
     * kA for vel ctl
     *
     * Generated from protobuf field <code>double kF_square = 7;</code>
     * @param float $var
     * @return $this
     */
    public function setKFSquare($var)
    {
        GPBUtil::checkDouble($var);
        $this->kF_square = $var;

        return $this;
    }

    /**
     * kG for arm pos ctl
     *
     * Generated from protobuf field <code>double kF_cosine = 8;</code>
     * @return float
     */
    public function getKFCosine()
    {
        return $this->kF_cosine;
    }

    /**
     * kG for arm pos ctl
     *
     * Generated from protobuf field <code>double kF_cosine = 8;</code>
     * @param float $var
     * @return $this
     */
    public function setKFCosine($var)
    {
        GPBUtil::checkDouble($var);
        $this->kF_cosine = $var;

        return $this;
    }

    /**
     * "ultimate gain" for ziegler-nichols
     *
     * Generated from protobuf field <code>double kU = 9;</code>
     * @return float
     */
    public function getKU()
    {
        return $this->kU;
    }

    /**
     * "ultimate gain" for ziegler-nichols
     *
     * Generated from protobuf field <code>double kU = 9;</code>
     * @param float $var
     * @return $this
     */
    public function setKU($var)
    {
        GPBUtil::checkDouble($var);
        $this->kU = $var;

        return $this;
    }

}

