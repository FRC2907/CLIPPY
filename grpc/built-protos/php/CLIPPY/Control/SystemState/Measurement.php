<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: SystemState.proto

namespace CLIPPY\Control\SystemState;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>CLIPPY.control.SystemState.Measurement</code>
 */
class Measurement extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>double position = 1;</code>
     */
    protected $position = 0.0;
    /**
     * Generated from protobuf field <code>double velocity = 2;</code>
     */
    protected $velocity = 0.0;
    /**
     * Generated from protobuf field <code>double acceleration = 3;</code>
     */
    protected $acceleration = 0.0;
    /**
     * Generated from protobuf field <code>double voltage = 4;</code>
     */
    protected $voltage = 0.0;
    /**
     * Generated from protobuf field <code>double current = 5;</code>
     */
    protected $current = 0.0;
    /**
     * for solenoids
     *
     * Generated from protobuf field <code>bool active = 6;</code>
     */
    protected $active = false;
    /**
     * for boolean sensors like limit switches, beam breaks, etc.
     *
     * Generated from protobuf field <code>bool triggered = 7;</code>
     */
    protected $triggered = false;
    /**
     * Generated from protobuf field <code>double power = 8;</code>
     */
    protected $power = 0.0;
    /**
     * Generated from protobuf field <code>double energy = 9;</code>
     */
    protected $energy = 0.0;
    /**
     * Generated from protobuf field <code>double pressure = 10;</code>
     */
    protected $pressure = 0.0;
    /**
     * Generated from protobuf field <code>double jerk = 11;</code>
     */
    protected $jerk = 0.0;
    /**
     * celsius
     *
     * Generated from protobuf field <code>double temperature = 12;</code>
     */
    protected $temperature = 0.0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type float $position
     *     @type float $velocity
     *     @type float $acceleration
     *     @type float $voltage
     *     @type float $current
     *     @type bool $active
     *           for solenoids
     *     @type bool $triggered
     *           for boolean sensors like limit switches, beam breaks, etc.
     *     @type float $power
     *     @type float $energy
     *     @type float $pressure
     *     @type float $jerk
     *     @type float $temperature
     *           celsius
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\SystemState::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>double position = 1;</code>
     * @return float
     */
    public function getPosition()
    {
        return $this->position;
    }

    /**
     * Generated from protobuf field <code>double position = 1;</code>
     * @param float $var
     * @return $this
     */
    public function setPosition($var)
    {
        GPBUtil::checkDouble($var);
        $this->position = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double velocity = 2;</code>
     * @return float
     */
    public function getVelocity()
    {
        return $this->velocity;
    }

    /**
     * Generated from protobuf field <code>double velocity = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setVelocity($var)
    {
        GPBUtil::checkDouble($var);
        $this->velocity = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double acceleration = 3;</code>
     * @return float
     */
    public function getAcceleration()
    {
        return $this->acceleration;
    }

    /**
     * Generated from protobuf field <code>double acceleration = 3;</code>
     * @param float $var
     * @return $this
     */
    public function setAcceleration($var)
    {
        GPBUtil::checkDouble($var);
        $this->acceleration = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double voltage = 4;</code>
     * @return float
     */
    public function getVoltage()
    {
        return $this->voltage;
    }

    /**
     * Generated from protobuf field <code>double voltage = 4;</code>
     * @param float $var
     * @return $this
     */
    public function setVoltage($var)
    {
        GPBUtil::checkDouble($var);
        $this->voltage = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double current = 5;</code>
     * @return float
     */
    public function getCurrent()
    {
        return $this->current;
    }

    /**
     * Generated from protobuf field <code>double current = 5;</code>
     * @param float $var
     * @return $this
     */
    public function setCurrent($var)
    {
        GPBUtil::checkDouble($var);
        $this->current = $var;

        return $this;
    }

    /**
     * for solenoids
     *
     * Generated from protobuf field <code>bool active = 6;</code>
     * @return bool
     */
    public function getActive()
    {
        return $this->active;
    }

    /**
     * for solenoids
     *
     * Generated from protobuf field <code>bool active = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setActive($var)
    {
        GPBUtil::checkBool($var);
        $this->active = $var;

        return $this;
    }

    /**
     * for boolean sensors like limit switches, beam breaks, etc.
     *
     * Generated from protobuf field <code>bool triggered = 7;</code>
     * @return bool
     */
    public function getTriggered()
    {
        return $this->triggered;
    }

    /**
     * for boolean sensors like limit switches, beam breaks, etc.
     *
     * Generated from protobuf field <code>bool triggered = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setTriggered($var)
    {
        GPBUtil::checkBool($var);
        $this->triggered = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double power = 8;</code>
     * @return float
     */
    public function getPower()
    {
        return $this->power;
    }

    /**
     * Generated from protobuf field <code>double power = 8;</code>
     * @param float $var
     * @return $this
     */
    public function setPower($var)
    {
        GPBUtil::checkDouble($var);
        $this->power = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double energy = 9;</code>
     * @return float
     */
    public function getEnergy()
    {
        return $this->energy;
    }

    /**
     * Generated from protobuf field <code>double energy = 9;</code>
     * @param float $var
     * @return $this
     */
    public function setEnergy($var)
    {
        GPBUtil::checkDouble($var);
        $this->energy = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double pressure = 10;</code>
     * @return float
     */
    public function getPressure()
    {
        return $this->pressure;
    }

    /**
     * Generated from protobuf field <code>double pressure = 10;</code>
     * @param float $var
     * @return $this
     */
    public function setPressure($var)
    {
        GPBUtil::checkDouble($var);
        $this->pressure = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>double jerk = 11;</code>
     * @return float
     */
    public function getJerk()
    {
        return $this->jerk;
    }

    /**
     * Generated from protobuf field <code>double jerk = 11;</code>
     * @param float $var
     * @return $this
     */
    public function setJerk($var)
    {
        GPBUtil::checkDouble($var);
        $this->jerk = $var;

        return $this;
    }

    /**
     * celsius
     *
     * Generated from protobuf field <code>double temperature = 12;</code>
     * @return float
     */
    public function getTemperature()
    {
        return $this->temperature;
    }

    /**
     * celsius
     *
     * Generated from protobuf field <code>double temperature = 12;</code>
     * @param float $var
     * @return $this
     */
    public function setTemperature($var)
    {
        GPBUtil::checkDouble($var);
        $this->temperature = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Measurement::class, \CLIPPY\Control\SystemState_Measurement::class);

