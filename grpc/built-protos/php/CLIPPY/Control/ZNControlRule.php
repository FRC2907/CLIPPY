<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ControlGains.proto

namespace CLIPPY\Control;

use UnexpectedValueException;

/**
 * Protobuf type <code>CLIPPY.control.ZNControlRule</code>
 */
class ZNControlRule
{
    /**
     * Generated from protobuf enum <code>UNSET = 0;</code>
     */
    const PBUNSET = 0;
    /**
     * Generated from protobuf enum <code>P = 1;</code>
     */
    const P = 1;
    /**
     * Generated from protobuf enum <code>PI = 2;</code>
     */
    const PI = 2;
    /**
     * Generated from protobuf enum <code>PD = 3;</code>
     */
    const PD = 3;
    /**
     * Generated from protobuf enum <code>PID = 4;</code>
     */
    const PID = 4;
    /**
     * Generated from protobuf enum <code>PESSEN = 5;</code>
     */
    const PESSEN = 5;
    /**
     * Generated from protobuf enum <code>MILD_OVERSHOOT = 6;</code>
     */
    const MILD_OVERSHOOT = 6;
    /**
     * Generated from protobuf enum <code>NO_OVERSHOOT = 7;</code>
     */
    const NO_OVERSHOOT = 7;

    private static $valueToName = [
        self::PBUNSET => 'UNSET',
        self::P => 'P',
        self::PI => 'PI',
        self::PD => 'PD',
        self::PID => 'PID',
        self::PESSEN => 'PESSEN',
        self::MILD_OVERSHOOT => 'MILD_OVERSHOOT',
        self::NO_OVERSHOOT => 'NO_OVERSHOOT',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            $pbconst =  __CLASS__. '::PB' . strtoupper($name);
            if (!defined($pbconst)) {
                throw new UnexpectedValueException(sprintf(
                        'Enum %s has no value defined for name %s', __CLASS__, $name));
            }
            return constant($pbconst);
        }
        return constant($const);
    }
}

