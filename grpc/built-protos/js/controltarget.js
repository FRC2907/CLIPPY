// source: ControlTarget.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.CLIPPY.control.ControlTarget');
goog.provide('proto.CLIPPY.control.ControlTarget.OutputCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.google.protobuf.Timestamp');

goog.forwardDeclare('proto.CLIPPY.control.Urgency');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CLIPPY.control.ControlTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.CLIPPY.control.ControlTarget.oneofGroups_);
};
goog.inherits(proto.CLIPPY.control.ControlTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CLIPPY.control.ControlTarget.displayName = 'proto.CLIPPY.control.ControlTarget';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.CLIPPY.control.ControlTarget.oneofGroups_ = [[7,8,9,10,11,12]];

/**
 * @enum {number}
 */
proto.CLIPPY.control.ControlTarget.OutputCase = {
  OUTPUT_NOT_SET: 0,
  VOLTAGE: 7,
  CURRENT: 8,
  POSITION: 9,
  VELOCITY: 10,
  ACCELERATION: 11,
  ACTIVE: 12
};

/**
 * @return {proto.CLIPPY.control.ControlTarget.OutputCase}
 */
proto.CLIPPY.control.ControlTarget.prototype.getOutputCase = function() {
  return /** @type {proto.CLIPPY.control.ControlTarget.OutputCase} */(jspb.Message.computeOneofCase(this, proto.CLIPPY.control.ControlTarget.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CLIPPY.control.ControlTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.CLIPPY.control.ControlTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CLIPPY.control.ControlTarget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CLIPPY.control.ControlTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
timestamp: (f = msg.getTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
systemId: jspb.Message.getFieldWithDefault(msg, 2, ""),
urgency: jspb.Message.getFieldWithDefault(msg, 3, 0),
voltage: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
current: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
position: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
velocity: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
acceleration: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
active: (f = jspb.Message.getBooleanField(msg, 12)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CLIPPY.control.ControlTarget}
 */
proto.CLIPPY.control.ControlTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CLIPPY.control.ControlTarget;
  return proto.CLIPPY.control.ControlTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CLIPPY.control.ControlTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CLIPPY.control.ControlTarget}
 */
proto.CLIPPY.control.ControlTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemId(value);
      break;
    case 3:
      var value = /** @type {!proto.CLIPPY.control.Urgency} */ (reader.readEnum());
      msg.setUrgency(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVoltage(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrent(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPosition(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVelocity(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAcceleration(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CLIPPY.control.ControlTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CLIPPY.control.ControlTarget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CLIPPY.control.ControlTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CLIPPY.control.ControlTarget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getSystemId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUrgency();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.CLIPPY.control.ControlTarget.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.CLIPPY.control.ControlTarget} returns this
*/
proto.CLIPPY.control.ControlTarget.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CLIPPY.control.ControlTarget} returns this
 */
proto.CLIPPY.control.ControlTarget.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CLIPPY.control.ControlTarget.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string system_id = 2;
 * @return {string}
 */
proto.CLIPPY.control.ControlTarget.prototype.getSystemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CLIPPY.control.ControlTarget} returns this
 */
proto.CLIPPY.control.ControlTarget.prototype.setSystemId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Urgency urgency = 3;
 * @return {!proto.CLIPPY.control.Urgency}
 */
proto.CLIPPY.control.ControlTarget.prototype.getUrgency = function() {
  return /** @type {!proto.CLIPPY.control.Urgency} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.CLIPPY.control.Urgency} value
 * @return {!proto.CLIPPY.control.ControlTarget} returns this
 */
proto.CLIPPY.control.ControlTarget.prototype.setUrgency = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional double voltage = 7;
 * @return {number}
 */
proto.CLIPPY.control.ControlTarget.prototype.getVoltage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CLIPPY.control.ControlTarget} returns this
 */
proto.CLIPPY.control.ControlTarget.prototype.setVoltage = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.CLIPPY.control.ControlTarget.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CLIPPY.control.ControlTarget} returns this
 */
proto.CLIPPY.control.ControlTarget.prototype.clearVoltage = function() {
  return jspb.Message.setOneofField(this, 7, proto.CLIPPY.control.ControlTarget.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CLIPPY.control.ControlTarget.prototype.hasVoltage = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double current = 8;
 * @return {number}
 */
proto.CLIPPY.control.ControlTarget.prototype.getCurrent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CLIPPY.control.ControlTarget} returns this
 */
proto.CLIPPY.control.ControlTarget.prototype.setCurrent = function(value) {
  return jspb.Message.setOneofField(this, 8, proto.CLIPPY.control.ControlTarget.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CLIPPY.control.ControlTarget} returns this
 */
proto.CLIPPY.control.ControlTarget.prototype.clearCurrent = function() {
  return jspb.Message.setOneofField(this, 8, proto.CLIPPY.control.ControlTarget.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CLIPPY.control.ControlTarget.prototype.hasCurrent = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double position = 9;
 * @return {number}
 */
proto.CLIPPY.control.ControlTarget.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CLIPPY.control.ControlTarget} returns this
 */
proto.CLIPPY.control.ControlTarget.prototype.setPosition = function(value) {
  return jspb.Message.setOneofField(this, 9, proto.CLIPPY.control.ControlTarget.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CLIPPY.control.ControlTarget} returns this
 */
proto.CLIPPY.control.ControlTarget.prototype.clearPosition = function() {
  return jspb.Message.setOneofField(this, 9, proto.CLIPPY.control.ControlTarget.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CLIPPY.control.ControlTarget.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double velocity = 10;
 * @return {number}
 */
proto.CLIPPY.control.ControlTarget.prototype.getVelocity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CLIPPY.control.ControlTarget} returns this
 */
proto.CLIPPY.control.ControlTarget.prototype.setVelocity = function(value) {
  return jspb.Message.setOneofField(this, 10, proto.CLIPPY.control.ControlTarget.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CLIPPY.control.ControlTarget} returns this
 */
proto.CLIPPY.control.ControlTarget.prototype.clearVelocity = function() {
  return jspb.Message.setOneofField(this, 10, proto.CLIPPY.control.ControlTarget.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CLIPPY.control.ControlTarget.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double acceleration = 11;
 * @return {number}
 */
proto.CLIPPY.control.ControlTarget.prototype.getAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CLIPPY.control.ControlTarget} returns this
 */
proto.CLIPPY.control.ControlTarget.prototype.setAcceleration = function(value) {
  return jspb.Message.setOneofField(this, 11, proto.CLIPPY.control.ControlTarget.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CLIPPY.control.ControlTarget} returns this
 */
proto.CLIPPY.control.ControlTarget.prototype.clearAcceleration = function() {
  return jspb.Message.setOneofField(this, 11, proto.CLIPPY.control.ControlTarget.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CLIPPY.control.ControlTarget.prototype.hasAcceleration = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool active = 12;
 * @return {boolean}
 */
proto.CLIPPY.control.ControlTarget.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.CLIPPY.control.ControlTarget} returns this
 */
proto.CLIPPY.control.ControlTarget.prototype.setActive = function(value) {
  return jspb.Message.setOneofField(this, 12, proto.CLIPPY.control.ControlTarget.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.CLIPPY.control.ControlTarget} returns this
 */
proto.CLIPPY.control.ControlTarget.prototype.clearActive = function() {
  return jspb.Message.setOneofField(this, 12, proto.CLIPPY.control.ControlTarget.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CLIPPY.control.ControlTarget.prototype.hasActive = function() {
  return jspb.Message.getField(this, 12) != null;
};


