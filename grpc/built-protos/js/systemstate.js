// source: SystemState.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.CLIPPY.control.SystemState');
goog.provide('proto.CLIPPY.control.SystemState.Measurement');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.CLIPPY.control.ControlGains');
goog.require('proto.google.protobuf.Timestamp');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CLIPPY.control.SystemState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CLIPPY.control.SystemState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CLIPPY.control.SystemState.displayName = 'proto.CLIPPY.control.SystemState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CLIPPY.control.SystemState.Measurement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CLIPPY.control.SystemState.Measurement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CLIPPY.control.SystemState.Measurement.displayName = 'proto.CLIPPY.control.SystemState.Measurement';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CLIPPY.control.SystemState.prototype.toObject = function(opt_includeInstance) {
  return proto.CLIPPY.control.SystemState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CLIPPY.control.SystemState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CLIPPY.control.SystemState.toObject = function(includeInstance, msg) {
  var f, obj = {
timestamp: (f = msg.getTimestamp()) && proto.google.protobuf.Timestamp.toObject(includeInstance, f),
systemId: jspb.Message.getFieldWithDefault(msg, 2, ""),
state: (f = msg.getState()) && proto.CLIPPY.control.SystemState.Measurement.toObject(includeInstance, f),
gains: (f = msg.getGains()) && proto.CLIPPY.control.ControlGains.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CLIPPY.control.SystemState}
 */
proto.CLIPPY.control.SystemState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CLIPPY.control.SystemState;
  return proto.CLIPPY.control.SystemState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CLIPPY.control.SystemState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CLIPPY.control.SystemState}
 */
proto.CLIPPY.control.SystemState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.google.protobuf.Timestamp;
      reader.readMessage(value,proto.google.protobuf.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemId(value);
      break;
    case 3:
      var value = new proto.CLIPPY.control.SystemState.Measurement;
      reader.readMessage(value,proto.CLIPPY.control.SystemState.Measurement.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 4:
      var value = new proto.CLIPPY.control.ControlGains;
      reader.readMessage(value,proto.CLIPPY.control.ControlGains.deserializeBinaryFromReader);
      msg.setGains(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CLIPPY.control.SystemState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CLIPPY.control.SystemState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CLIPPY.control.SystemState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CLIPPY.control.SystemState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.google.protobuf.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getSystemId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.CLIPPY.control.SystemState.Measurement.serializeBinaryToWriter
    );
  }
  f = message.getGains();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.CLIPPY.control.ControlGains.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.toObject = function(opt_includeInstance) {
  return proto.CLIPPY.control.SystemState.Measurement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CLIPPY.control.SystemState.Measurement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CLIPPY.control.SystemState.Measurement.toObject = function(includeInstance, msg) {
  var f, obj = {
position: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
velocity: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
acceleration: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
voltage: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
current: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
active: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
triggered: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
power: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
energy: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
pressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
jerk: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
temperature: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CLIPPY.control.SystemState.Measurement}
 */
proto.CLIPPY.control.SystemState.Measurement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CLIPPY.control.SystemState.Measurement;
  return proto.CLIPPY.control.SystemState.Measurement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CLIPPY.control.SystemState.Measurement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CLIPPY.control.SystemState.Measurement}
 */
proto.CLIPPY.control.SystemState.Measurement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPosition(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVelocity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAcceleration(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVoltage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrent(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTriggered(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPower(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEnergy(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPressure(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setJerk(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTemperature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CLIPPY.control.SystemState.Measurement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CLIPPY.control.SystemState.Measurement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CLIPPY.control.SystemState.Measurement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getVelocity();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getAcceleration();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getVoltage();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getCurrent();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getTriggered();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getPower();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getEnergy();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getPressure();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getJerk();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getTemperature();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
};


/**
 * optional double position = 1;
 * @return {number}
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CLIPPY.control.SystemState.Measurement} returns this
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.setPosition = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double velocity = 2;
 * @return {number}
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.getVelocity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CLIPPY.control.SystemState.Measurement} returns this
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.setVelocity = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double acceleration = 3;
 * @return {number}
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.getAcceleration = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CLIPPY.control.SystemState.Measurement} returns this
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.setAcceleration = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double voltage = 4;
 * @return {number}
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.getVoltage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CLIPPY.control.SystemState.Measurement} returns this
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.setVoltage = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double current = 5;
 * @return {number}
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.getCurrent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CLIPPY.control.SystemState.Measurement} returns this
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.setCurrent = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional bool active = 6;
 * @return {boolean}
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.CLIPPY.control.SystemState.Measurement} returns this
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool triggered = 7;
 * @return {boolean}
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.getTriggered = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.CLIPPY.control.SystemState.Measurement} returns this
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.setTriggered = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional double power = 8;
 * @return {number}
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CLIPPY.control.SystemState.Measurement} returns this
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.setPower = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double energy = 9;
 * @return {number}
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.getEnergy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CLIPPY.control.SystemState.Measurement} returns this
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.setEnergy = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double pressure = 10;
 * @return {number}
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.getPressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CLIPPY.control.SystemState.Measurement} returns this
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.setPressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double jerk = 11;
 * @return {number}
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.getJerk = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CLIPPY.control.SystemState.Measurement} returns this
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.setJerk = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double temperature = 12;
 * @return {number}
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CLIPPY.control.SystemState.Measurement} returns this
 */
proto.CLIPPY.control.SystemState.Measurement.prototype.setTemperature = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.CLIPPY.control.SystemState.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.google.protobuf.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.CLIPPY.control.SystemState} returns this
*/
proto.CLIPPY.control.SystemState.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CLIPPY.control.SystemState} returns this
 */
proto.CLIPPY.control.SystemState.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CLIPPY.control.SystemState.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string system_id = 2;
 * @return {string}
 */
proto.CLIPPY.control.SystemState.prototype.getSystemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CLIPPY.control.SystemState} returns this
 */
proto.CLIPPY.control.SystemState.prototype.setSystemId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Measurement state = 3;
 * @return {?proto.CLIPPY.control.SystemState.Measurement}
 */
proto.CLIPPY.control.SystemState.prototype.getState = function() {
  return /** @type{?proto.CLIPPY.control.SystemState.Measurement} */ (
    jspb.Message.getWrapperField(this, proto.CLIPPY.control.SystemState.Measurement, 3));
};


/**
 * @param {?proto.CLIPPY.control.SystemState.Measurement|undefined} value
 * @return {!proto.CLIPPY.control.SystemState} returns this
*/
proto.CLIPPY.control.SystemState.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CLIPPY.control.SystemState} returns this
 */
proto.CLIPPY.control.SystemState.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CLIPPY.control.SystemState.prototype.hasState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ControlGains gains = 4;
 * @return {?proto.CLIPPY.control.ControlGains}
 */
proto.CLIPPY.control.SystemState.prototype.getGains = function() {
  return /** @type{?proto.CLIPPY.control.ControlGains} */ (
    jspb.Message.getWrapperField(this, proto.CLIPPY.control.ControlGains, 4));
};


/**
 * @param {?proto.CLIPPY.control.ControlGains|undefined} value
 * @return {!proto.CLIPPY.control.SystemState} returns this
*/
proto.CLIPPY.control.SystemState.prototype.setGains = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CLIPPY.control.SystemState} returns this
 */
proto.CLIPPY.control.SystemState.prototype.clearGains = function() {
  return this.setGains(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CLIPPY.control.SystemState.prototype.hasGains = function() {
  return jspb.Message.getField(this, 4) != null;
};


