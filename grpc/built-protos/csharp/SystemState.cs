// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SystemState.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CLIPPY.Control {

  /// <summary>Holder for reflection information generated from SystemState.proto</summary>
  public static partial class SystemStateReflection {

    #region Descriptor
    /// <summary>File descriptor for SystemState.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SystemStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFTeXN0ZW1TdGF0ZS5wcm90bxIOQ0xJUFBZLmNvbnRyb2waH2dvb2dsZS9w",
            "cm90b2J1Zi90aW1lc3RhbXAucHJvdG8aEkNvbnRyb2xHYWlucy5wcm90byIf",
            "CglTeXN0ZW1JRHMSEgoKc3lzdGVtX2lkcxgBIAMoCSIhCgpTeXN0ZW1UYWdz",
            "EhMKC3N5c3RlbV90YWdzGAEgAygJIpcDCgtTeXN0ZW1TdGF0ZRItCgl0aW1l",
            "c3RhbXAYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhEKCXN5",
            "c3RlbV9pZBgCIAEoCRI2CgVzdGF0ZRgDIAEoCzInLkNMSVBQWS5jb250cm9s",
            "LlN5c3RlbVN0YXRlLk1lYXN1cmVtZW50EisKBWdhaW5zGAQgASgLMhwuQ0xJ",
            "UFBZLmNvbnRyb2wuQ29udHJvbEdhaW5zGuABCgtNZWFzdXJlbWVudBIQCghw",
            "b3NpdGlvbhgBIAEoARIQCgh2ZWxvY2l0eRgCIAEoARIUCgxhY2NlbGVyYXRp",
            "b24YAyABKAESDwoHdm9sdGFnZRgEIAEoARIPCgdjdXJyZW50GAUgASgBEg4K",
            "BmFjdGl2ZRgGIAEoCBIRCgl0cmlnZ2VyZWQYByABKAgSDQoFcG93ZXIYCCAB",
            "KAESDgoGZW5lcmd5GAkgASgBEhAKCHByZXNzdXJlGAogASgBEgwKBGplcmsY",
            "CyABKAESEwoLdGVtcGVyYXR1cmUYDCABKAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::CLIPPY.Control.ControlGainsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CLIPPY.Control.SystemIDs), global::CLIPPY.Control.SystemIDs.Parser, new[]{ "SystemIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CLIPPY.Control.SystemTags), global::CLIPPY.Control.SystemTags.Parser, new[]{ "SystemTags_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CLIPPY.Control.SystemState), global::CLIPPY.Control.SystemState.Parser, new[]{ "Timestamp", "SystemId", "State", "Gains" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CLIPPY.Control.SystemState.Types.Measurement), global::CLIPPY.Control.SystemState.Types.Measurement.Parser, new[]{ "Position", "Velocity", "Acceleration", "Voltage", "Current", "Active", "Triggered", "Power", "Energy", "Pressure", "Jerk", "Temperature" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SystemIDs : pb::IMessage<SystemIDs>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SystemIDs> _parser = new pb::MessageParser<SystemIDs>(() => new SystemIDs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SystemIDs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CLIPPY.Control.SystemStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SystemIDs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SystemIDs(SystemIDs other) : this() {
      systemIds_ = other.systemIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SystemIDs Clone() {
      return new SystemIDs(this);
    }

    /// <summary>Field number for the "system_ids" field.</summary>
    public const int SystemIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_systemIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> systemIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> SystemIds {
      get { return systemIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SystemIDs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SystemIDs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!systemIds_.Equals(other.systemIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= systemIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      systemIds_.WriteTo(output, _repeated_systemIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      systemIds_.WriteTo(ref output, _repeated_systemIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += systemIds_.CalculateSize(_repeated_systemIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SystemIDs other) {
      if (other == null) {
        return;
      }
      systemIds_.Add(other.systemIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            systemIds_.AddEntriesFrom(input, _repeated_systemIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            systemIds_.AddEntriesFrom(ref input, _repeated_systemIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SystemTags : pb::IMessage<SystemTags>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SystemTags> _parser = new pb::MessageParser<SystemTags>(() => new SystemTags());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SystemTags> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CLIPPY.Control.SystemStateReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SystemTags() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SystemTags(SystemTags other) : this() {
      systemTags_ = other.systemTags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SystemTags Clone() {
      return new SystemTags(this);
    }

    /// <summary>Field number for the "system_tags" field.</summary>
    public const int SystemTags_FieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_systemTags_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> systemTags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> SystemTags_ {
      get { return systemTags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SystemTags);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SystemTags other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!systemTags_.Equals(other.systemTags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= systemTags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      systemTags_.WriteTo(output, _repeated_systemTags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      systemTags_.WriteTo(ref output, _repeated_systemTags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += systemTags_.CalculateSize(_repeated_systemTags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SystemTags other) {
      if (other == null) {
        return;
      }
      systemTags_.Add(other.systemTags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            systemTags_.AddEntriesFrom(input, _repeated_systemTags_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            systemTags_.AddEntriesFrom(ref input, _repeated_systemTags_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SystemState : pb::IMessage<SystemState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SystemState> _parser = new pb::MessageParser<SystemState>(() => new SystemState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SystemState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CLIPPY.Control.SystemStateReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SystemState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SystemState(SystemState other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      systemId_ = other.systemId_;
      state_ = other.state_ != null ? other.state_.Clone() : null;
      gains_ = other.gains_ != null ? other.gains_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SystemState Clone() {
      return new SystemState(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "system_id" field.</summary>
    public const int SystemIdFieldNumber = 2;
    private string systemId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SystemId {
      get { return systemId_; }
      set {
        systemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::CLIPPY.Control.SystemState.Types.Measurement state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::CLIPPY.Control.SystemState.Types.Measurement State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "gains" field.</summary>
    public const int GainsFieldNumber = 4;
    private global::CLIPPY.Control.ControlGains gains_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::CLIPPY.Control.ControlGains Gains {
      get { return gains_; }
      set {
        gains_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SystemState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SystemState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (SystemId != other.SystemId) return false;
      if (!object.Equals(State, other.State)) return false;
      if (!object.Equals(Gains, other.Gains)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (SystemId.Length != 0) hash ^= SystemId.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (gains_ != null) hash ^= Gains.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (SystemId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SystemId);
      }
      if (state_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(State);
      }
      if (gains_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Gains);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (SystemId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SystemId);
      }
      if (state_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(State);
      }
      if (gains_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Gains);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (SystemId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SystemId);
      }
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (gains_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gains);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SystemState other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.SystemId.Length != 0) {
        SystemId = other.SystemId;
      }
      if (other.state_ != null) {
        if (state_ == null) {
          State = new global::CLIPPY.Control.SystemState.Types.Measurement();
        }
        State.MergeFrom(other.State);
      }
      if (other.gains_ != null) {
        if (gains_ == null) {
          Gains = new global::CLIPPY.Control.ControlGains();
        }
        Gains.MergeFrom(other.Gains);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            SystemId = input.ReadString();
            break;
          }
          case 26: {
            if (state_ == null) {
              State = new global::CLIPPY.Control.SystemState.Types.Measurement();
            }
            input.ReadMessage(State);
            break;
          }
          case 34: {
            if (gains_ == null) {
              Gains = new global::CLIPPY.Control.ControlGains();
            }
            input.ReadMessage(Gains);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            SystemId = input.ReadString();
            break;
          }
          case 26: {
            if (state_ == null) {
              State = new global::CLIPPY.Control.SystemState.Types.Measurement();
            }
            input.ReadMessage(State);
            break;
          }
          case 34: {
            if (gains_ == null) {
              Gains = new global::CLIPPY.Control.ControlGains();
            }
            input.ReadMessage(Gains);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SystemState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Measurement : pb::IMessage<Measurement>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Measurement> _parser = new pb::MessageParser<Measurement>(() => new Measurement());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Measurement> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::CLIPPY.Control.SystemState.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Measurement() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Measurement(Measurement other) : this() {
          position_ = other.position_;
          velocity_ = other.velocity_;
          acceleration_ = other.acceleration_;
          voltage_ = other.voltage_;
          current_ = other.current_;
          active_ = other.active_;
          triggered_ = other.triggered_;
          power_ = other.power_;
          energy_ = other.energy_;
          pressure_ = other.pressure_;
          jerk_ = other.jerk_;
          temperature_ = other.temperature_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Measurement Clone() {
          return new Measurement(this);
        }

        /// <summary>Field number for the "position" field.</summary>
        public const int PositionFieldNumber = 1;
        private double position_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Position {
          get { return position_; }
          set {
            position_ = value;
          }
        }

        /// <summary>Field number for the "velocity" field.</summary>
        public const int VelocityFieldNumber = 2;
        private double velocity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Velocity {
          get { return velocity_; }
          set {
            velocity_ = value;
          }
        }

        /// <summary>Field number for the "acceleration" field.</summary>
        public const int AccelerationFieldNumber = 3;
        private double acceleration_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Acceleration {
          get { return acceleration_; }
          set {
            acceleration_ = value;
          }
        }

        /// <summary>Field number for the "voltage" field.</summary>
        public const int VoltageFieldNumber = 4;
        private double voltage_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Voltage {
          get { return voltage_; }
          set {
            voltage_ = value;
          }
        }

        /// <summary>Field number for the "current" field.</summary>
        public const int CurrentFieldNumber = 5;
        private double current_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Current {
          get { return current_; }
          set {
            current_ = value;
          }
        }

        /// <summary>Field number for the "active" field.</summary>
        public const int ActiveFieldNumber = 6;
        private bool active_;
        /// <summary>
        /// for solenoids
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Active {
          get { return active_; }
          set {
            active_ = value;
          }
        }

        /// <summary>Field number for the "triggered" field.</summary>
        public const int TriggeredFieldNumber = 7;
        private bool triggered_;
        /// <summary>
        /// for boolean sensors like limit switches, beam breaks, etc.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Triggered {
          get { return triggered_; }
          set {
            triggered_ = value;
          }
        }

        /// <summary>Field number for the "power" field.</summary>
        public const int PowerFieldNumber = 8;
        private double power_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Power {
          get { return power_; }
          set {
            power_ = value;
          }
        }

        /// <summary>Field number for the "energy" field.</summary>
        public const int EnergyFieldNumber = 9;
        private double energy_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Energy {
          get { return energy_; }
          set {
            energy_ = value;
          }
        }

        /// <summary>Field number for the "pressure" field.</summary>
        public const int PressureFieldNumber = 10;
        private double pressure_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Pressure {
          get { return pressure_; }
          set {
            pressure_ = value;
          }
        }

        /// <summary>Field number for the "jerk" field.</summary>
        public const int JerkFieldNumber = 11;
        private double jerk_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Jerk {
          get { return jerk_; }
          set {
            jerk_ = value;
          }
        }

        /// <summary>Field number for the "temperature" field.</summary>
        public const int TemperatureFieldNumber = 12;
        private double temperature_;
        /// <summary>
        /// celsius
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Temperature {
          get { return temperature_; }
          set {
            temperature_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Measurement);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Measurement other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Position, other.Position)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Velocity, other.Velocity)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Acceleration, other.Acceleration)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Voltage, other.Voltage)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Current, other.Current)) return false;
          if (Active != other.Active) return false;
          if (Triggered != other.Triggered) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Power, other.Power)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Energy, other.Energy)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Pressure, other.Pressure)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Jerk, other.Jerk)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Position != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Position);
          if (Velocity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Velocity);
          if (Acceleration != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Acceleration);
          if (Voltage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Voltage);
          if (Current != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Current);
          if (Active != false) hash ^= Active.GetHashCode();
          if (Triggered != false) hash ^= Triggered.GetHashCode();
          if (Power != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Power);
          if (Energy != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Energy);
          if (Pressure != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Pressure);
          if (Jerk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Jerk);
          if (Temperature != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Temperature);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Position != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Position);
          }
          if (Velocity != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Velocity);
          }
          if (Acceleration != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Acceleration);
          }
          if (Voltage != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(Voltage);
          }
          if (Current != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(Current);
          }
          if (Active != false) {
            output.WriteRawTag(48);
            output.WriteBool(Active);
          }
          if (Triggered != false) {
            output.WriteRawTag(56);
            output.WriteBool(Triggered);
          }
          if (Power != 0D) {
            output.WriteRawTag(65);
            output.WriteDouble(Power);
          }
          if (Energy != 0D) {
            output.WriteRawTag(73);
            output.WriteDouble(Energy);
          }
          if (Pressure != 0D) {
            output.WriteRawTag(81);
            output.WriteDouble(Pressure);
          }
          if (Jerk != 0D) {
            output.WriteRawTag(89);
            output.WriteDouble(Jerk);
          }
          if (Temperature != 0D) {
            output.WriteRawTag(97);
            output.WriteDouble(Temperature);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Position != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(Position);
          }
          if (Velocity != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Velocity);
          }
          if (Acceleration != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(Acceleration);
          }
          if (Voltage != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(Voltage);
          }
          if (Current != 0D) {
            output.WriteRawTag(41);
            output.WriteDouble(Current);
          }
          if (Active != false) {
            output.WriteRawTag(48);
            output.WriteBool(Active);
          }
          if (Triggered != false) {
            output.WriteRawTag(56);
            output.WriteBool(Triggered);
          }
          if (Power != 0D) {
            output.WriteRawTag(65);
            output.WriteDouble(Power);
          }
          if (Energy != 0D) {
            output.WriteRawTag(73);
            output.WriteDouble(Energy);
          }
          if (Pressure != 0D) {
            output.WriteRawTag(81);
            output.WriteDouble(Pressure);
          }
          if (Jerk != 0D) {
            output.WriteRawTag(89);
            output.WriteDouble(Jerk);
          }
          if (Temperature != 0D) {
            output.WriteRawTag(97);
            output.WriteDouble(Temperature);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Position != 0D) {
            size += 1 + 8;
          }
          if (Velocity != 0D) {
            size += 1 + 8;
          }
          if (Acceleration != 0D) {
            size += 1 + 8;
          }
          if (Voltage != 0D) {
            size += 1 + 8;
          }
          if (Current != 0D) {
            size += 1 + 8;
          }
          if (Active != false) {
            size += 1 + 1;
          }
          if (Triggered != false) {
            size += 1 + 1;
          }
          if (Power != 0D) {
            size += 1 + 8;
          }
          if (Energy != 0D) {
            size += 1 + 8;
          }
          if (Pressure != 0D) {
            size += 1 + 8;
          }
          if (Jerk != 0D) {
            size += 1 + 8;
          }
          if (Temperature != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Measurement other) {
          if (other == null) {
            return;
          }
          if (other.Position != 0D) {
            Position = other.Position;
          }
          if (other.Velocity != 0D) {
            Velocity = other.Velocity;
          }
          if (other.Acceleration != 0D) {
            Acceleration = other.Acceleration;
          }
          if (other.Voltage != 0D) {
            Voltage = other.Voltage;
          }
          if (other.Current != 0D) {
            Current = other.Current;
          }
          if (other.Active != false) {
            Active = other.Active;
          }
          if (other.Triggered != false) {
            Triggered = other.Triggered;
          }
          if (other.Power != 0D) {
            Power = other.Power;
          }
          if (other.Energy != 0D) {
            Energy = other.Energy;
          }
          if (other.Pressure != 0D) {
            Pressure = other.Pressure;
          }
          if (other.Jerk != 0D) {
            Jerk = other.Jerk;
          }
          if (other.Temperature != 0D) {
            Temperature = other.Temperature;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Position = input.ReadDouble();
                break;
              }
              case 17: {
                Velocity = input.ReadDouble();
                break;
              }
              case 25: {
                Acceleration = input.ReadDouble();
                break;
              }
              case 33: {
                Voltage = input.ReadDouble();
                break;
              }
              case 41: {
                Current = input.ReadDouble();
                break;
              }
              case 48: {
                Active = input.ReadBool();
                break;
              }
              case 56: {
                Triggered = input.ReadBool();
                break;
              }
              case 65: {
                Power = input.ReadDouble();
                break;
              }
              case 73: {
                Energy = input.ReadDouble();
                break;
              }
              case 81: {
                Pressure = input.ReadDouble();
                break;
              }
              case 89: {
                Jerk = input.ReadDouble();
                break;
              }
              case 97: {
                Temperature = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Position = input.ReadDouble();
                break;
              }
              case 17: {
                Velocity = input.ReadDouble();
                break;
              }
              case 25: {
                Acceleration = input.ReadDouble();
                break;
              }
              case 33: {
                Voltage = input.ReadDouble();
                break;
              }
              case 41: {
                Current = input.ReadDouble();
                break;
              }
              case 48: {
                Active = input.ReadBool();
                break;
              }
              case 56: {
                Triggered = input.ReadBool();
                break;
              }
              case 65: {
                Power = input.ReadDouble();
                break;
              }
              case 73: {
                Energy = input.ReadDouble();
                break;
              }
              case 81: {
                Pressure = input.ReadDouble();
                break;
              }
              case 89: {
                Jerk = input.ReadDouble();
                break;
              }
              case 97: {
                Temperature = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
