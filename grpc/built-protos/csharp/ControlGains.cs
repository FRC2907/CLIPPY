// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ControlGains.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CLIPPY.Control {

  /// <summary>Holder for reflection information generated from ControlGains.proto</summary>
  public static partial class ControlGainsReflection {

    #region Descriptor
    /// <summary>File descriptor for ControlGains.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControlGainsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJDb250cm9sR2FpbnMucHJvdG8SDkNMSVBQWS5jb250cm9sGh5nb29nbGUv",
            "cHJvdG9idWYvd3JhcHBlcnMucHJvdG8i+AMKDENvbnRyb2xHYWlucxIRCglz",
            "eXN0ZW1faWQYASABKAkSKAoCa1AYAiABKAsyHC5nb29nbGUucHJvdG9idWYu",
            "RG91YmxlVmFsdWUSKAoCa0kYAyABKAsyHC5nb29nbGUucHJvdG9idWYuRG91",
            "YmxlVmFsdWUSKAoCa0QYBCABKAsyHC5nb29nbGUucHJvdG9idWYuRG91Ymxl",
            "VmFsdWUSLwoJa0Zfc3RhdGljGAUgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRv",
            "dWJsZVZhbHVlEi8KCWtGX2xpbmVhchgGIAEoCzIcLmdvb2dsZS5wcm90b2J1",
            "Zi5Eb3VibGVWYWx1ZRI4ChJrRl9saW5lYXJfcGVyX3RpbWUYByABKAsyHC5n",
            "b29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSMQoLa0ZfY29uc3RhbnQYCCAB",
            "KAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSKAoCa1UYCSABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSKAoCdFUYCiABKAsyHC5n",
            "b29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSNAoNem5Db250cm9sUnVsZRgL",
            "IAEoDjIdLkNMSVBQWS5jb250cm9sLlpOQ29udHJvbFJ1bGUqbAoNWk5Db250",
            "cm9sUnVsZRIJCgVVTlNFVBAAEgUKAVAQARIGCgJQSRACEgYKAlBEEAMSBwoD",
            "UElEEAQSCgoGUEVTU0VOEAUSEgoOTUlMRF9PVkVSU0hPT1QQBhIQCgxOT19P",
            "VkVSU0hPT1QQB2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::CLIPPY.Control.ZNControlRule), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CLIPPY.Control.ControlGains), global::CLIPPY.Control.ControlGains.Parser, new[]{ "SystemId", "KP", "KI", "KD", "KFStatic", "KFLinear", "KFLinearPerTime", "KFConstant", "KU", "TU", "ZnControlRule" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ZNControlRule {
    [pbr::OriginalName("UNSET")] Unset = 0,
    [pbr::OriginalName("P")] P = 1,
    [pbr::OriginalName("PI")] Pi = 2,
    [pbr::OriginalName("PD")] Pd = 3,
    [pbr::OriginalName("PID")] Pid = 4,
    [pbr::OriginalName("PESSEN")] Pessen = 5,
    [pbr::OriginalName("MILD_OVERSHOOT")] MildOvershoot = 6,
    [pbr::OriginalName("NO_OVERSHOOT")] NoOvershoot = 7,
  }

  #endregion

  #region Messages
  public sealed partial class ControlGains : pb::IMessage<ControlGains>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ControlGains> _parser = new pb::MessageParser<ControlGains>(() => new ControlGains());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ControlGains> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CLIPPY.Control.ControlGainsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ControlGains() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ControlGains(ControlGains other) : this() {
      systemId_ = other.systemId_;
      KP = other.KP;
      KI = other.KI;
      KD = other.KD;
      KFStatic = other.KFStatic;
      KFLinear = other.KFLinear;
      KFLinearPerTime = other.KFLinearPerTime;
      KFConstant = other.KFConstant;
      KU = other.KU;
      TU = other.TU;
      znControlRule_ = other.znControlRule_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ControlGains Clone() {
      return new ControlGains(this);
    }

    /// <summary>Field number for the "system_id" field.</summary>
    public const int SystemIdFieldNumber = 1;
    private string systemId_ = "";
    /// <summary>
    /// recall that all fields are optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SystemId {
      get { return systemId_; }
      set {
        systemId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kP" field.</summary>
    public const int KPFieldNumber = 2;
    private static readonly pb::FieldCodec<double?> _single_kP_codec = pb::FieldCodec.ForStructWrapper<double>(18);
    private double? kP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double? KP {
      get { return kP_; }
      set {
        kP_ = value;
      }
    }


    /// <summary>Field number for the "kI" field.</summary>
    public const int KIFieldNumber = 3;
    private static readonly pb::FieldCodec<double?> _single_kI_codec = pb::FieldCodec.ForStructWrapper<double>(26);
    private double? kI_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double? KI {
      get { return kI_; }
      set {
        kI_ = value;
      }
    }


    /// <summary>Field number for the "kD" field.</summary>
    public const int KDFieldNumber = 4;
    private static readonly pb::FieldCodec<double?> _single_kD_codec = pb::FieldCodec.ForStructWrapper<double>(34);
    private double? kD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double? KD {
      get { return kD_; }
      set {
        kD_ = value;
      }
    }


    /// <summary>Field number for the "kF_static" field.</summary>
    public const int KFStaticFieldNumber = 5;
    private static readonly pb::FieldCodec<double?> _single_kFStatic_codec = pb::FieldCodec.ForStructWrapper<double>(42);
    private double? kFStatic_;
    /// <summary>
    /// kS for vel ctl
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double? KFStatic {
      get { return kFStatic_; }
      set {
        kFStatic_ = value;
      }
    }


    /// <summary>Field number for the "kF_linear" field.</summary>
    public const int KFLinearFieldNumber = 6;
    private static readonly pb::FieldCodec<double?> _single_kFLinear_codec = pb::FieldCodec.ForStructWrapper<double>(50);
    private double? kFLinear_;
    /// <summary>
    /// kV for vel ctl
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double? KFLinear {
      get { return kFLinear_; }
      set {
        kFLinear_ = value;
      }
    }


    /// <summary>Field number for the "kF_linear_per_time" field.</summary>
    public const int KFLinearPerTimeFieldNumber = 7;
    private static readonly pb::FieldCodec<double?> _single_kFLinearPerTime_codec = pb::FieldCodec.ForStructWrapper<double>(58);
    private double? kFLinearPerTime_;
    /// <summary>
    /// kA for vel ctl
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double? KFLinearPerTime {
      get { return kFLinearPerTime_; }
      set {
        kFLinearPerTime_ = value;
      }
    }


    /// <summary>Field number for the "kF_constant" field.</summary>
    public const int KFConstantFieldNumber = 8;
    private static readonly pb::FieldCodec<double?> _single_kFConstant_codec = pb::FieldCodec.ForStructWrapper<double>(66);
    private double? kFConstant_;
    /// <summary>
    /// kG for elevator ctl
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double? KFConstant {
      get { return kFConstant_; }
      set {
        kFConstant_ = value;
      }
    }


    /// <summary>Field number for the "kU" field.</summary>
    public const int KUFieldNumber = 9;
    private static readonly pb::FieldCodec<double?> _single_kU_codec = pb::FieldCodec.ForStructWrapper<double>(74);
    private double? kU_;
    /// <summary>
    /// "ultimate gain" for ziegler-nichols
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double? KU {
      get { return kU_; }
      set {
        kU_ = value;
      }
    }


    /// <summary>Field number for the "tU" field.</summary>
    public const int TUFieldNumber = 10;
    private static readonly pb::FieldCodec<double?> _single_tU_codec = pb::FieldCodec.ForStructWrapper<double>(82);
    private double? tU_;
    /// <summary>
    /// period of oscillation for ziegler-nichols
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double? TU {
      get { return tU_; }
      set {
        tU_ = value;
      }
    }


    /// <summary>Field number for the "znControlRule" field.</summary>
    public const int ZnControlRuleFieldNumber = 11;
    private global::CLIPPY.Control.ZNControlRule znControlRule_ = global::CLIPPY.Control.ZNControlRule.Unset;
    /// <summary>
    /// ziegler-nichols meta-gains to derive PID from using kU
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::CLIPPY.Control.ZNControlRule ZnControlRule {
      get { return znControlRule_; }
      set {
        znControlRule_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ControlGains);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ControlGains other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SystemId != other.SystemId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(KP, other.KP)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(KI, other.KI)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(KD, other.KD)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(KFStatic, other.KFStatic)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(KFLinear, other.KFLinear)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(KFLinearPerTime, other.KFLinearPerTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(KFConstant, other.KFConstant)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(KU, other.KU)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(TU, other.TU)) return false;
      if (ZnControlRule != other.ZnControlRule) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SystemId.Length != 0) hash ^= SystemId.GetHashCode();
      if (kP_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(KP);
      if (kI_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(KI);
      if (kD_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(KD);
      if (kFStatic_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(KFStatic);
      if (kFLinear_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(KFLinear);
      if (kFLinearPerTime_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(KFLinearPerTime);
      if (kFConstant_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(KFConstant);
      if (kU_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(KU);
      if (tU_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(TU);
      if (ZnControlRule != global::CLIPPY.Control.ZNControlRule.Unset) hash ^= ZnControlRule.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SystemId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SystemId);
      }
      if (kP_ != null) {
        _single_kP_codec.WriteTagAndValue(output, KP);
      }
      if (kI_ != null) {
        _single_kI_codec.WriteTagAndValue(output, KI);
      }
      if (kD_ != null) {
        _single_kD_codec.WriteTagAndValue(output, KD);
      }
      if (kFStatic_ != null) {
        _single_kFStatic_codec.WriteTagAndValue(output, KFStatic);
      }
      if (kFLinear_ != null) {
        _single_kFLinear_codec.WriteTagAndValue(output, KFLinear);
      }
      if (kFLinearPerTime_ != null) {
        _single_kFLinearPerTime_codec.WriteTagAndValue(output, KFLinearPerTime);
      }
      if (kFConstant_ != null) {
        _single_kFConstant_codec.WriteTagAndValue(output, KFConstant);
      }
      if (kU_ != null) {
        _single_kU_codec.WriteTagAndValue(output, KU);
      }
      if (tU_ != null) {
        _single_tU_codec.WriteTagAndValue(output, TU);
      }
      if (ZnControlRule != global::CLIPPY.Control.ZNControlRule.Unset) {
        output.WriteRawTag(88);
        output.WriteEnum((int) ZnControlRule);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SystemId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SystemId);
      }
      if (kP_ != null) {
        _single_kP_codec.WriteTagAndValue(ref output, KP);
      }
      if (kI_ != null) {
        _single_kI_codec.WriteTagAndValue(ref output, KI);
      }
      if (kD_ != null) {
        _single_kD_codec.WriteTagAndValue(ref output, KD);
      }
      if (kFStatic_ != null) {
        _single_kFStatic_codec.WriteTagAndValue(ref output, KFStatic);
      }
      if (kFLinear_ != null) {
        _single_kFLinear_codec.WriteTagAndValue(ref output, KFLinear);
      }
      if (kFLinearPerTime_ != null) {
        _single_kFLinearPerTime_codec.WriteTagAndValue(ref output, KFLinearPerTime);
      }
      if (kFConstant_ != null) {
        _single_kFConstant_codec.WriteTagAndValue(ref output, KFConstant);
      }
      if (kU_ != null) {
        _single_kU_codec.WriteTagAndValue(ref output, KU);
      }
      if (tU_ != null) {
        _single_tU_codec.WriteTagAndValue(ref output, TU);
      }
      if (ZnControlRule != global::CLIPPY.Control.ZNControlRule.Unset) {
        output.WriteRawTag(88);
        output.WriteEnum((int) ZnControlRule);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SystemId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SystemId);
      }
      if (kP_ != null) {
        size += _single_kP_codec.CalculateSizeWithTag(KP);
      }
      if (kI_ != null) {
        size += _single_kI_codec.CalculateSizeWithTag(KI);
      }
      if (kD_ != null) {
        size += _single_kD_codec.CalculateSizeWithTag(KD);
      }
      if (kFStatic_ != null) {
        size += _single_kFStatic_codec.CalculateSizeWithTag(KFStatic);
      }
      if (kFLinear_ != null) {
        size += _single_kFLinear_codec.CalculateSizeWithTag(KFLinear);
      }
      if (kFLinearPerTime_ != null) {
        size += _single_kFLinearPerTime_codec.CalculateSizeWithTag(KFLinearPerTime);
      }
      if (kFConstant_ != null) {
        size += _single_kFConstant_codec.CalculateSizeWithTag(KFConstant);
      }
      if (kU_ != null) {
        size += _single_kU_codec.CalculateSizeWithTag(KU);
      }
      if (tU_ != null) {
        size += _single_tU_codec.CalculateSizeWithTag(TU);
      }
      if (ZnControlRule != global::CLIPPY.Control.ZNControlRule.Unset) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ZnControlRule);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ControlGains other) {
      if (other == null) {
        return;
      }
      if (other.SystemId.Length != 0) {
        SystemId = other.SystemId;
      }
      if (other.kP_ != null) {
        if (kP_ == null || other.KP != 0D) {
          KP = other.KP;
        }
      }
      if (other.kI_ != null) {
        if (kI_ == null || other.KI != 0D) {
          KI = other.KI;
        }
      }
      if (other.kD_ != null) {
        if (kD_ == null || other.KD != 0D) {
          KD = other.KD;
        }
      }
      if (other.kFStatic_ != null) {
        if (kFStatic_ == null || other.KFStatic != 0D) {
          KFStatic = other.KFStatic;
        }
      }
      if (other.kFLinear_ != null) {
        if (kFLinear_ == null || other.KFLinear != 0D) {
          KFLinear = other.KFLinear;
        }
      }
      if (other.kFLinearPerTime_ != null) {
        if (kFLinearPerTime_ == null || other.KFLinearPerTime != 0D) {
          KFLinearPerTime = other.KFLinearPerTime;
        }
      }
      if (other.kFConstant_ != null) {
        if (kFConstant_ == null || other.KFConstant != 0D) {
          KFConstant = other.KFConstant;
        }
      }
      if (other.kU_ != null) {
        if (kU_ == null || other.KU != 0D) {
          KU = other.KU;
        }
      }
      if (other.tU_ != null) {
        if (tU_ == null || other.TU != 0D) {
          TU = other.TU;
        }
      }
      if (other.ZnControlRule != global::CLIPPY.Control.ZNControlRule.Unset) {
        ZnControlRule = other.ZnControlRule;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SystemId = input.ReadString();
            break;
          }
          case 18: {
            double? value = _single_kP_codec.Read(input);
            if (kP_ == null || value != 0D) {
              KP = value;
            }
            break;
          }
          case 26: {
            double? value = _single_kI_codec.Read(input);
            if (kI_ == null || value != 0D) {
              KI = value;
            }
            break;
          }
          case 34: {
            double? value = _single_kD_codec.Read(input);
            if (kD_ == null || value != 0D) {
              KD = value;
            }
            break;
          }
          case 42: {
            double? value = _single_kFStatic_codec.Read(input);
            if (kFStatic_ == null || value != 0D) {
              KFStatic = value;
            }
            break;
          }
          case 50: {
            double? value = _single_kFLinear_codec.Read(input);
            if (kFLinear_ == null || value != 0D) {
              KFLinear = value;
            }
            break;
          }
          case 58: {
            double? value = _single_kFLinearPerTime_codec.Read(input);
            if (kFLinearPerTime_ == null || value != 0D) {
              KFLinearPerTime = value;
            }
            break;
          }
          case 66: {
            double? value = _single_kFConstant_codec.Read(input);
            if (kFConstant_ == null || value != 0D) {
              KFConstant = value;
            }
            break;
          }
          case 74: {
            double? value = _single_kU_codec.Read(input);
            if (kU_ == null || value != 0D) {
              KU = value;
            }
            break;
          }
          case 82: {
            double? value = _single_tU_codec.Read(input);
            if (tU_ == null || value != 0D) {
              TU = value;
            }
            break;
          }
          case 88: {
            ZnControlRule = (global::CLIPPY.Control.ZNControlRule) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SystemId = input.ReadString();
            break;
          }
          case 18: {
            double? value = _single_kP_codec.Read(ref input);
            if (kP_ == null || value != 0D) {
              KP = value;
            }
            break;
          }
          case 26: {
            double? value = _single_kI_codec.Read(ref input);
            if (kI_ == null || value != 0D) {
              KI = value;
            }
            break;
          }
          case 34: {
            double? value = _single_kD_codec.Read(ref input);
            if (kD_ == null || value != 0D) {
              KD = value;
            }
            break;
          }
          case 42: {
            double? value = _single_kFStatic_codec.Read(ref input);
            if (kFStatic_ == null || value != 0D) {
              KFStatic = value;
            }
            break;
          }
          case 50: {
            double? value = _single_kFLinear_codec.Read(ref input);
            if (kFLinear_ == null || value != 0D) {
              KFLinear = value;
            }
            break;
          }
          case 58: {
            double? value = _single_kFLinearPerTime_codec.Read(ref input);
            if (kFLinearPerTime_ == null || value != 0D) {
              KFLinearPerTime = value;
            }
            break;
          }
          case 66: {
            double? value = _single_kFConstant_codec.Read(ref input);
            if (kFConstant_ == null || value != 0D) {
              KFConstant = value;
            }
            break;
          }
          case 74: {
            double? value = _single_kU_codec.Read(ref input);
            if (kU_ == null || value != 0D) {
              KU = value;
            }
            break;
          }
          case 82: {
            double? value = _single_tU_codec.Read(ref input);
            if (tU_ == null || value != 0D) {
              TU = value;
            }
            break;
          }
          case 88: {
            ZnControlRule = (global::CLIPPY.Control.ZNControlRule) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
